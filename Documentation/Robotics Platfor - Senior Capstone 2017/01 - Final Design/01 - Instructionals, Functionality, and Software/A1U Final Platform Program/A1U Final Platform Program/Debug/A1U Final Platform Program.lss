
A1U Final Platform Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000245e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007e  00802000  0000245e  000024f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000082  0080207e  0080207e  00002570  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002570  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000025cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a21  00000000  00000000  0000263c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003b3  00000000  00000000  0000405d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000847  00000000  00000000  00004410  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000218  00000000  00000000  00004c58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001e3b  00000000  00000000  00004e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005a3  00000000  00000000  00006cab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000724e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8d c1       	rjmp	.+794    	; 0x31c <__ctors_end>
       2:	00 00       	nop
       4:	b0 c1       	rjmp	.+864    	; 0x366 <__bad_interrupt>
       6:	00 00       	nop
       8:	ae c1       	rjmp	.+860    	; 0x366 <__bad_interrupt>
       a:	00 00       	nop
       c:	ac c1       	rjmp	.+856    	; 0x366 <__bad_interrupt>
       e:	00 00       	nop
      10:	aa c1       	rjmp	.+852    	; 0x366 <__bad_interrupt>
      12:	00 00       	nop
      14:	a8 c1       	rjmp	.+848    	; 0x366 <__bad_interrupt>
      16:	00 00       	nop
      18:	a6 c1       	rjmp	.+844    	; 0x366 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a4 c1       	rjmp	.+840    	; 0x366 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a2 c1       	rjmp	.+836    	; 0x366 <__bad_interrupt>
      22:	00 00       	nop
      24:	a0 c1       	rjmp	.+832    	; 0x366 <__bad_interrupt>
      26:	00 00       	nop
      28:	9e c1       	rjmp	.+828    	; 0x366 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9c c1       	rjmp	.+824    	; 0x366 <__bad_interrupt>
      2e:	00 00       	nop
      30:	9a c1       	rjmp	.+820    	; 0x366 <__bad_interrupt>
      32:	00 00       	nop
      34:	98 c1       	rjmp	.+816    	; 0x366 <__bad_interrupt>
      36:	00 00       	nop
      38:	96 c1       	rjmp	.+812    	; 0x366 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	94 c1       	rjmp	.+808    	; 0x366 <__bad_interrupt>
      3e:	00 00       	nop
      40:	92 c1       	rjmp	.+804    	; 0x366 <__bad_interrupt>
      42:	00 00       	nop
      44:	90 c1       	rjmp	.+800    	; 0x366 <__bad_interrupt>
      46:	00 00       	nop
      48:	8e c1       	rjmp	.+796    	; 0x366 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8c c1       	rjmp	.+792    	; 0x366 <__bad_interrupt>
      4e:	00 00       	nop
      50:	33 c2       	rjmp	.+1126   	; 0x4b8 <__vector_20>
      52:	00 00       	nop
      54:	88 c1       	rjmp	.+784    	; 0x366 <__bad_interrupt>
      56:	00 00       	nop
      58:	86 c1       	rjmp	.+780    	; 0x366 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	84 c1       	rjmp	.+776    	; 0x366 <__bad_interrupt>
      5e:	00 00       	nop
      60:	82 c1       	rjmp	.+772    	; 0x366 <__bad_interrupt>
      62:	00 00       	nop
      64:	80 c1       	rjmp	.+768    	; 0x366 <__bad_interrupt>
      66:	00 00       	nop
      68:	7e c1       	rjmp	.+764    	; 0x366 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7c c1       	rjmp	.+760    	; 0x366 <__bad_interrupt>
      6e:	00 00       	nop
      70:	7a c1       	rjmp	.+756    	; 0x366 <__bad_interrupt>
      72:	00 00       	nop
      74:	78 c1       	rjmp	.+752    	; 0x366 <__bad_interrupt>
      76:	00 00       	nop
      78:	76 c1       	rjmp	.+748    	; 0x366 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	74 c1       	rjmp	.+744    	; 0x366 <__bad_interrupt>
      7e:	00 00       	nop
      80:	72 c1       	rjmp	.+740    	; 0x366 <__bad_interrupt>
      82:	00 00       	nop
      84:	70 c1       	rjmp	.+736    	; 0x366 <__bad_interrupt>
      86:	00 00       	nop
      88:	6e c1       	rjmp	.+732    	; 0x366 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6c c1       	rjmp	.+728    	; 0x366 <__bad_interrupt>
      8e:	00 00       	nop
      90:	6a c1       	rjmp	.+724    	; 0x366 <__bad_interrupt>
      92:	00 00       	nop
      94:	68 c1       	rjmp	.+720    	; 0x366 <__bad_interrupt>
      96:	00 00       	nop
      98:	66 c1       	rjmp	.+716    	; 0x366 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	64 c1       	rjmp	.+712    	; 0x366 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	62 c1       	rjmp	.+708    	; 0x366 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	60 c1       	rjmp	.+704    	; 0x366 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	5e c1       	rjmp	.+700    	; 0x366 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5c c1       	rjmp	.+696    	; 0x366 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5a c1       	rjmp	.+692    	; 0x366 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	58 c1       	rjmp	.+688    	; 0x366 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	56 c1       	rjmp	.+684    	; 0x366 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	54 c1       	rjmp	.+680    	; 0x366 <__bad_interrupt>
      be:	00 00       	nop
      c0:	52 c1       	rjmp	.+676    	; 0x366 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	50 c1       	rjmp	.+672    	; 0x366 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	4e c1       	rjmp	.+668    	; 0x366 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	4c c1       	rjmp	.+664    	; 0x366 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	4a c1       	rjmp	.+660    	; 0x366 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	48 c1       	rjmp	.+656    	; 0x366 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	46 c1       	rjmp	.+652    	; 0x366 <__bad_interrupt>
      da:	00 00       	nop
      dc:	44 c1       	rjmp	.+648    	; 0x366 <__bad_interrupt>
      de:	00 00       	nop
      e0:	42 c1       	rjmp	.+644    	; 0x366 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	40 c1       	rjmp	.+640    	; 0x366 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	3e c1       	rjmp	.+636    	; 0x366 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	3c c1       	rjmp	.+632    	; 0x366 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	3a c1       	rjmp	.+628    	; 0x366 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	38 c1       	rjmp	.+624    	; 0x366 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	36 c1       	rjmp	.+620    	; 0x366 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	34 c1       	rjmp	.+616    	; 0x366 <__bad_interrupt>
      fe:	00 00       	nop
     100:	32 c1       	rjmp	.+612    	; 0x366 <__bad_interrupt>
     102:	00 00       	nop
     104:	30 c1       	rjmp	.+608    	; 0x366 <__bad_interrupt>
     106:	00 00       	nop
     108:	2e c1       	rjmp	.+604    	; 0x366 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	2c c1       	rjmp	.+600    	; 0x366 <__bad_interrupt>
     10e:	00 00       	nop
     110:	2a c1       	rjmp	.+596    	; 0x366 <__bad_interrupt>
     112:	00 00       	nop
     114:	28 c1       	rjmp	.+592    	; 0x366 <__bad_interrupt>
     116:	00 00       	nop
     118:	26 c1       	rjmp	.+588    	; 0x366 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	24 c1       	rjmp	.+584    	; 0x366 <__bad_interrupt>
     11e:	00 00       	nop
     120:	22 c1       	rjmp	.+580    	; 0x366 <__bad_interrupt>
     122:	00 00       	nop
     124:	20 c1       	rjmp	.+576    	; 0x366 <__bad_interrupt>
     126:	00 00       	nop
     128:	1e c1       	rjmp	.+572    	; 0x366 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	1c c1       	rjmp	.+568    	; 0x366 <__bad_interrupt>
     12e:	00 00       	nop
     130:	1a c1       	rjmp	.+564    	; 0x366 <__bad_interrupt>
     132:	00 00       	nop
     134:	18 c1       	rjmp	.+560    	; 0x366 <__bad_interrupt>
     136:	00 00       	nop
     138:	16 c1       	rjmp	.+556    	; 0x366 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	14 c1       	rjmp	.+552    	; 0x366 <__bad_interrupt>
     13e:	00 00       	nop
     140:	12 c1       	rjmp	.+548    	; 0x366 <__bad_interrupt>
     142:	00 00       	nop
     144:	10 c1       	rjmp	.+544    	; 0x366 <__bad_interrupt>
     146:	00 00       	nop
     148:	0e c1       	rjmp	.+540    	; 0x366 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	a0 c5       	rjmp	.+2880   	; 0xc8e <__vector_83>
     14e:	00 00       	nop
     150:	0a c1       	rjmp	.+532    	; 0x366 <__bad_interrupt>
     152:	00 00       	nop
     154:	08 c1       	rjmp	.+528    	; 0x366 <__bad_interrupt>
     156:	00 00       	nop
     158:	06 c1       	rjmp	.+524    	; 0x366 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	04 c1       	rjmp	.+520    	; 0x366 <__bad_interrupt>
     15e:	00 00       	nop
     160:	02 c1       	rjmp	.+516    	; 0x366 <__bad_interrupt>
     162:	00 00       	nop
     164:	00 c1       	rjmp	.+512    	; 0x366 <__bad_interrupt>
     166:	00 00       	nop
     168:	fe c0       	rjmp	.+508    	; 0x366 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	fc c0       	rjmp	.+504    	; 0x366 <__bad_interrupt>
     16e:	00 00       	nop
     170:	fa c0       	rjmp	.+500    	; 0x366 <__bad_interrupt>
     172:	00 00       	nop
     174:	f8 c0       	rjmp	.+496    	; 0x366 <__bad_interrupt>
     176:	00 00       	nop
     178:	f6 c0       	rjmp	.+492    	; 0x366 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	f4 c0       	rjmp	.+488    	; 0x366 <__bad_interrupt>
     17e:	00 00       	nop
     180:	f2 c0       	rjmp	.+484    	; 0x366 <__bad_interrupt>
     182:	00 00       	nop
     184:	f0 c0       	rjmp	.+480    	; 0x366 <__bad_interrupt>
     186:	00 00       	nop
     188:	ee c0       	rjmp	.+476    	; 0x366 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	ec c0       	rjmp	.+472    	; 0x366 <__bad_interrupt>
     18e:	00 00       	nop
     190:	ea c0       	rjmp	.+468    	; 0x366 <__bad_interrupt>
     192:	00 00       	nop
     194:	e8 c0       	rjmp	.+464    	; 0x366 <__bad_interrupt>
     196:	00 00       	nop
     198:	e6 c0       	rjmp	.+460    	; 0x366 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	e4 c0       	rjmp	.+456    	; 0x366 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	e2 c0       	rjmp	.+452    	; 0x366 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	e0 c0       	rjmp	.+448    	; 0x366 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	de c0       	rjmp	.+444    	; 0x366 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	dc c0       	rjmp	.+440    	; 0x366 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	da c0       	rjmp	.+436    	; 0x366 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	d8 c0       	rjmp	.+432    	; 0x366 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	d6 c0       	rjmp	.+428    	; 0x366 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	d4 c0       	rjmp	.+424    	; 0x366 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	d2 c0       	rjmp	.+420    	; 0x366 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	d0 c0       	rjmp	.+416    	; 0x366 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	ce c0       	rjmp	.+412    	; 0x366 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	cc c0       	rjmp	.+408    	; 0x366 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	ca c0       	rjmp	.+404    	; 0x366 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	c8 c0       	rjmp	.+400    	; 0x366 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	c6 c0       	rjmp	.+396    	; 0x366 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	c4 c0       	rjmp	.+392    	; 0x366 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	c2 c0       	rjmp	.+388    	; 0x366 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	c0 c0       	rjmp	.+384    	; 0x366 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	be c0       	rjmp	.+380    	; 0x366 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	bc c0       	rjmp	.+376    	; 0x366 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	ba c0       	rjmp	.+372    	; 0x366 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	b8 c0       	rjmp	.+368    	; 0x366 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	b6 c0       	rjmp	.+364    	; 0x366 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	05 a8       	ldd	r0, Z+53	; 0x35
     1fe:	4c cd       	rjmp	.-1384   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     200:	b2 d4       	rcall	.+2404   	; 0xb66 <__vector_20+0x6ae>
     202:	4e b9       	out	0x0e, r20	; 14
     204:	38 36       	cpi	r19, 0x68	; 104
     206:	a9 02       	muls	r26, r25
     208:	0c 50       	subi	r16, 0x0C	; 12
     20a:	b9 91       	ld	r27, Y+
     20c:	86 88       	ldd	r8, Z+22	; 0x16
     20e:	08 3c       	cpi	r16, 0xC8	; 200
     210:	a6 aa       	std	Z+54, r10	; 0x36
     212:	aa 2a       	or	r10, r26
     214:	be 00       	.word	0x00be	; ????
     216:	00 00       	nop
     218:	80 3f       	cpi	r24, 0xF0	; 240

0000021a <__trampolines_end>:
     21a:	6e 61       	ori	r22, 0x1E	; 30
     21c:	6e 00       	.word	0x006e	; ????

0000021e <__c.2159>:
     21e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     22e:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     23e:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     24e:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     25e:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     26e:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     27e:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     28e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     29e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2ae:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2be:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2ce:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2de:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2ee:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2fe:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     30e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000031c <__ctors_end>:
     31c:	11 24       	eor	r1, r1
     31e:	1f be       	out	0x3f, r1	; 63
     320:	cf ef       	ldi	r28, 0xFF	; 255
     322:	cd bf       	out	0x3d, r28	; 61
     324:	df e3       	ldi	r29, 0x3F	; 63
     326:	de bf       	out	0x3e, r29	; 62
     328:	00 e0       	ldi	r16, 0x00	; 0
     32a:	0c bf       	out	0x3c, r16	; 60
     32c:	18 be       	out	0x38, r1	; 56
     32e:	19 be       	out	0x39, r1	; 57
     330:	1a be       	out	0x3a, r1	; 58
     332:	1b be       	out	0x3b, r1	; 59

00000334 <__do_copy_data>:
     334:	10 e2       	ldi	r17, 0x20	; 32
     336:	a0 e0       	ldi	r26, 0x00	; 0
     338:	b0 e2       	ldi	r27, 0x20	; 32
     33a:	ee e5       	ldi	r30, 0x5E	; 94
     33c:	f4 e2       	ldi	r31, 0x24	; 36
     33e:	00 e0       	ldi	r16, 0x00	; 0
     340:	0b bf       	out	0x3b, r16	; 59
     342:	02 c0       	rjmp	.+4      	; 0x348 <__do_copy_data+0x14>
     344:	07 90       	elpm	r0, Z+
     346:	0d 92       	st	X+, r0
     348:	ae 37       	cpi	r26, 0x7E	; 126
     34a:	b1 07       	cpc	r27, r17
     34c:	d9 f7       	brne	.-10     	; 0x344 <__do_copy_data+0x10>
     34e:	1b be       	out	0x3b, r1	; 59

00000350 <__do_clear_bss>:
     350:	21 e2       	ldi	r18, 0x21	; 33
     352:	ae e7       	ldi	r26, 0x7E	; 126
     354:	b0 e2       	ldi	r27, 0x20	; 32
     356:	01 c0       	rjmp	.+2      	; 0x35a <.do_clear_bss_start>

00000358 <.do_clear_bss_loop>:
     358:	1d 92       	st	X+, r1

0000035a <.do_clear_bss_start>:
     35a:	a0 30       	cpi	r26, 0x00	; 0
     35c:	b2 07       	cpc	r27, r18
     35e:	e1 f7       	brne	.-8      	; 0x358 <.do_clear_bss_loop>
     360:	ad d5       	rcall	.+2906   	; 0xebc <main>
     362:	0c 94 2d 12 	jmp	0x245a	; 0x245a <_exit>

00000366 <__bad_interrupt>:
     366:	4c ce       	rjmp	.-872    	; 0x0 <__vectors>

00000368 <put_char>:
	USARTC0.CTRLB |= USART_TXEN_bm;
}


static int put_char(char c, FILE *stream) //Serial transfer function
{
     368:	cf 93       	push	r28
     36a:	c8 2f       	mov	r28, r24
	if (c == '\n') put_char('\r',stream);	//add return to newline character for term
     36c:	8a 30       	cpi	r24, 0x0A	; 10
     36e:	11 f4       	brne	.+4      	; 0x374 <put_char+0xc>
     370:	8d e0       	ldi	r24, 0x0D	; 13
     372:	fa df       	rcall	.-12     	; 0x368 <put_char>

	while(!(USARTC0.STATUS & USART_DREIF_bm)); //loop until Tx is ready
     374:	e0 ea       	ldi	r30, 0xA0	; 160
     376:	f8 e0       	ldi	r31, 0x08	; 8
     378:	91 81       	ldd	r25, Z+1	; 0x01
     37a:	95 ff       	sbrs	r25, 5
     37c:	fd cf       	rjmp	.-6      	; 0x378 <put_char+0x10>
	USARTC0.DATA = c;
     37e:	c0 93 a0 08 	sts	0x08A0, r28
	return 0;
}
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	cf 91       	pop	r28
     388:	08 95       	ret

0000038a <pwmtoMotor1>:
	timeNow += Ts;	//Calculate time in program
}

void pwmtoMotor1(float voltSet1)
{
	digiHB1 = voltSet1 / 12.0*1599;	//Convert to digital PWM compare value for HB1
     38a:	20 e0       	ldi	r18, 0x00	; 0
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	40 e4       	ldi	r20, 0x40	; 64
     390:	51 e4       	ldi	r21, 0x41	; 65
     392:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__divsf3>
     396:	20 e0       	ldi	r18, 0x00	; 0
     398:	30 ee       	ldi	r19, 0xE0	; 224
     39a:	47 ec       	ldi	r20, 0xC7	; 199
     39c:	54 e4       	ldi	r21, 0x44	; 68
     39e:	0e 94 45 0c 	call	0x188a	; 0x188a <__mulsf3>
     3a2:	60 93 d8 20 	sts	0x20D8, r22
     3a6:	70 93 d9 20 	sts	0x20D9, r23
     3aa:	80 93 da 20 	sts	0x20DA, r24
     3ae:	90 93 db 20 	sts	0x20DB, r25
	
	//Motor 1
	if(digiHB1 < 0)
     3b2:	60 91 d8 20 	lds	r22, 0x20D8
     3b6:	70 91 d9 20 	lds	r23, 0x20D9
     3ba:	80 91 da 20 	lds	r24, 0x20DA
     3be:	90 91 db 20 	lds	r25, 0x20DB
     3c2:	20 e0       	ldi	r18, 0x00	; 0
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	a9 01       	movw	r20, r18
     3c8:	0e 94 9f 0a 	call	0x153e	; 0x153e <__cmpsf2>
     3cc:	88 23       	and	r24, r24
     3ce:	0c f0       	brlt	.+2      	; 0x3d2 <pwmtoMotor1+0x48>
     3d0:	42 c0       	rjmp	.+132    	; 0x456 <pwmtoMotor1+0xcc>
	{
		PORTF.OUTSET = PIN3_bm;	//set INB high for CCW direction
     3d2:	e0 ea       	ldi	r30, 0xA0	; 160
     3d4:	f6 e0       	ldi	r31, 0x06	; 6
     3d6:	88 e0       	ldi	r24, 0x08	; 8
     3d8:	85 83       	std	Z+5, r24	; 0x05
		PORTF.OUTCLR = PIN2_bm;	//set INA
     3da:	84 e0       	ldi	r24, 0x04	; 4
     3dc:	86 83       	std	Z+6, r24	; 0x06
		digiHB1 = -digiHB1;	//make digital HB value positive
     3de:	80 91 d8 20 	lds	r24, 0x20D8
     3e2:	90 91 d9 20 	lds	r25, 0x20D9
     3e6:	a0 91 da 20 	lds	r26, 0x20DA
     3ea:	b0 91 db 20 	lds	r27, 0x20DB
     3ee:	b0 58       	subi	r27, 0x80	; 128
     3f0:	80 93 d8 20 	sts	0x20D8, r24
     3f4:	90 93 d9 20 	sts	0x20D9, r25
     3f8:	a0 93 da 20 	sts	0x20DA, r26
     3fc:	b0 93 db 20 	sts	0x20DB, r27
		if(digiHB1 >= 1599){digiHB1 = 1599;}	//PWM overflow error check (pulse width cannot exceed top count)
     400:	60 91 d8 20 	lds	r22, 0x20D8
     404:	70 91 d9 20 	lds	r23, 0x20D9
     408:	80 91 da 20 	lds	r24, 0x20DA
     40c:	90 91 db 20 	lds	r25, 0x20DB
     410:	20 e0       	ldi	r18, 0x00	; 0
     412:	30 ee       	ldi	r19, 0xE0	; 224
     414:	47 ec       	ldi	r20, 0xC7	; 199
     416:	54 e4       	ldi	r21, 0x44	; 68
     418:	0e 94 41 0c 	call	0x1882	; 0x1882 <__gesf2>
     41c:	88 23       	and	r24, r24
     41e:	64 f0       	brlt	.+24     	; 0x438 <pwmtoMotor1+0xae>
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	90 ee       	ldi	r25, 0xE0	; 224
     424:	a7 ec       	ldi	r26, 0xC7	; 199
     426:	b4 e4       	ldi	r27, 0x44	; 68
     428:	80 93 d8 20 	sts	0x20D8, r24
     42c:	90 93 d9 20 	sts	0x20D9, r25
     430:	a0 93 da 20 	sts	0x20DA, r26
     434:	b0 93 db 20 	sts	0x20DB, r27
		TCF1.CCA = digiHB1; //Set duty cycle on compare channel A (HB1)
     438:	60 91 d8 20 	lds	r22, 0x20D8
     43c:	70 91 d9 20 	lds	r23, 0x20D9
     440:	80 91 da 20 	lds	r24, 0x20DA
     444:	90 91 db 20 	lds	r25, 0x20DB
     448:	0e 94 10 0b 	call	0x1620	; 0x1620 <__fixunssfsi>
     44c:	e0 e4       	ldi	r30, 0x40	; 64
     44e:	fb e0       	ldi	r31, 0x0B	; 11
     450:	60 a7       	std	Z+40, r22	; 0x28
     452:	71 a7       	std	Z+41, r23	; 0x29
     454:	08 95       	ret
	}
	else
	{
		PORTF.OUTSET = PIN2_bm;	//set INA high for CW direction
     456:	e0 ea       	ldi	r30, 0xA0	; 160
     458:	f6 e0       	ldi	r31, 0x06	; 6
     45a:	84 e0       	ldi	r24, 0x04	; 4
     45c:	85 83       	std	Z+5, r24	; 0x05
		PORTF.OUTCLR = PIN3_bm;	//set INB low
     45e:	88 e0       	ldi	r24, 0x08	; 8
     460:	86 83       	std	Z+6, r24	; 0x06
		if(digiHB1 >= 1599){digiHB1 = 1599;}	//PWM overflow error check (pulse width cannot exceed top count)
     462:	60 91 d8 20 	lds	r22, 0x20D8
     466:	70 91 d9 20 	lds	r23, 0x20D9
     46a:	80 91 da 20 	lds	r24, 0x20DA
     46e:	90 91 db 20 	lds	r25, 0x20DB
     472:	20 e0       	ldi	r18, 0x00	; 0
     474:	30 ee       	ldi	r19, 0xE0	; 224
     476:	47 ec       	ldi	r20, 0xC7	; 199
     478:	54 e4       	ldi	r21, 0x44	; 68
     47a:	0e 94 41 0c 	call	0x1882	; 0x1882 <__gesf2>
     47e:	88 23       	and	r24, r24
     480:	64 f0       	brlt	.+24     	; 0x49a <pwmtoMotor1+0x110>
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	90 ee       	ldi	r25, 0xE0	; 224
     486:	a7 ec       	ldi	r26, 0xC7	; 199
     488:	b4 e4       	ldi	r27, 0x44	; 68
     48a:	80 93 d8 20 	sts	0x20D8, r24
     48e:	90 93 d9 20 	sts	0x20D9, r25
     492:	a0 93 da 20 	sts	0x20DA, r26
     496:	b0 93 db 20 	sts	0x20DB, r27
		TCF1.CCA = digiHB1;
     49a:	60 91 d8 20 	lds	r22, 0x20D8
     49e:	70 91 d9 20 	lds	r23, 0x20D9
     4a2:	80 91 da 20 	lds	r24, 0x20DA
     4a6:	90 91 db 20 	lds	r25, 0x20DB
     4aa:	0e 94 10 0b 	call	0x1620	; 0x1620 <__fixunssfsi>
     4ae:	e0 e4       	ldi	r30, 0x40	; 64
     4b0:	fb e0       	ldi	r31, 0x0B	; 11
     4b2:	60 a7       	std	Z+40, r22	; 0x28
     4b4:	71 a7       	std	Z+41, r23	; 0x29
     4b6:	08 95       	ret

000004b8 <__vector_20>:
	}

}

ISR(TCC1_OVF_vect)
{
     4b8:	1f 92       	push	r1
     4ba:	0f 92       	push	r0
     4bc:	0f b6       	in	r0, 0x3f	; 63
     4be:	0f 92       	push	r0
     4c0:	11 24       	eor	r1, r1
     4c2:	08 b6       	in	r0, 0x38	; 56
     4c4:	0f 92       	push	r0
     4c6:	18 be       	out	0x38, r1	; 56
     4c8:	09 b6       	in	r0, 0x39	; 57
     4ca:	0f 92       	push	r0
     4cc:	19 be       	out	0x39, r1	; 57
     4ce:	0a b6       	in	r0, 0x3a	; 58
     4d0:	0f 92       	push	r0
     4d2:	1a be       	out	0x3a, r1	; 58
     4d4:	0b b6       	in	r0, 0x3b	; 59
     4d6:	0f 92       	push	r0
     4d8:	1b be       	out	0x3b, r1	; 59
     4da:	4f 92       	push	r4
     4dc:	5f 92       	push	r5
     4de:	6f 92       	push	r6
     4e0:	7f 92       	push	r7
     4e2:	8f 92       	push	r8
     4e4:	9f 92       	push	r9
     4e6:	af 92       	push	r10
     4e8:	bf 92       	push	r11
     4ea:	cf 92       	push	r12
     4ec:	df 92       	push	r13
     4ee:	ef 92       	push	r14
     4f0:	ff 92       	push	r15
     4f2:	2f 93       	push	r18
     4f4:	3f 93       	push	r19
     4f6:	4f 93       	push	r20
     4f8:	5f 93       	push	r21
     4fa:	6f 93       	push	r22
     4fc:	7f 93       	push	r23
     4fe:	8f 93       	push	r24
     500:	9f 93       	push	r25
     502:	af 93       	push	r26
     504:	bf 93       	push	r27
     506:	ef 93       	push	r30
     508:	ff 93       	push	r31
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	cd b7       	in	r28, 0x3d	; 61
     510:	de b7       	in	r29, 0x3e	; 62
     512:	64 97       	sbiw	r28, 0x14	; 20
     514:	cd bf       	out	0x3d, r28	; 61
     516:	de bf       	out	0x3e, r29	; 62
	
	PORTD.OUTTGL = PIN6_bm;	//Toggle Pin D6 for interrupt timing
     518:	80 e4       	ldi	r24, 0x40	; 64
     51a:	e0 e6       	ldi	r30, 0x60	; 96
     51c:	f6 e0       	ldi	r31, 0x06	; 6
     51e:	87 83       	std	Z+7, r24	; 0x07
	if(timeNow <= stopTime)
     520:	60 91 eb 20 	lds	r22, 0x20EB
     524:	70 91 ec 20 	lds	r23, 0x20EC
     528:	80 91 ed 20 	lds	r24, 0x20ED
     52c:	90 91 ee 20 	lds	r25, 0x20EE
     530:	20 91 ef 20 	lds	r18, 0x20EF
     534:	30 91 f0 20 	lds	r19, 0x20F0
     538:	40 91 f1 20 	lds	r20, 0x20F1
     53c:	50 91 f2 20 	lds	r21, 0x20F2
     540:	fe d7       	rcall	.+4092   	; 0x153e <__cmpsf2>
     542:	18 16       	cp	r1, r24
     544:	0c f4       	brge	.+2      	; 0x548 <__vector_20+0x90>
     546:	12 c3       	rjmp	.+1572   	; 0xb6c <__vector_20+0x6b4>
	{

		if(inputMode == OSCILLATION)
     548:	80 91 85 20 	lds	r24, 0x2085
     54c:	81 11       	cpse	r24, r1
     54e:	2f c0       	rjmp	.+94     	; 0x5ae <__vector_20+0xf6>
		{
			commandPosition1 = amplitudeMotor1*sin(2*M_PI*frequencyMotor1*timeNow);	//command position of platform (degrees)
     550:	60 91 8c 20 	lds	r22, 0x208C
     554:	70 91 8d 20 	lds	r23, 0x208D
     558:	80 91 8e 20 	lds	r24, 0x208E
     55c:	90 91 8f 20 	lds	r25, 0x208F
     560:	c0 90 eb 20 	lds	r12, 0x20EB
     564:	d0 90 ec 20 	lds	r13, 0x20EC
     568:	e0 90 ed 20 	lds	r14, 0x20ED
     56c:	f0 90 ee 20 	lds	r15, 0x20EE
     570:	2b ed       	ldi	r18, 0xDB	; 219
     572:	3f e0       	ldi	r19, 0x0F	; 15
     574:	49 ec       	ldi	r20, 0xC9	; 201
     576:	50 e4       	ldi	r21, 0x40	; 64
     578:	0e 94 45 0c 	call	0x188a	; 0x188a <__mulsf3>
     57c:	a7 01       	movw	r20, r14
     57e:	96 01       	movw	r18, r12
     580:	0e 94 45 0c 	call	0x188a	; 0x188a <__mulsf3>
     584:	0e 94 a8 0c 	call	0x1950	; 0x1950 <sin>
     588:	20 91 96 20 	lds	r18, 0x2096
     58c:	30 91 97 20 	lds	r19, 0x2097
     590:	40 91 98 20 	lds	r20, 0x2098
     594:	50 91 99 20 	lds	r21, 0x2099
     598:	0e 94 45 0c 	call	0x188a	; 0x188a <__mulsf3>
     59c:	60 93 e7 20 	sts	0x20E7, r22
     5a0:	70 93 e8 20 	sts	0x20E8, r23
     5a4:	80 93 e9 20 	sts	0x20E9, r24
     5a8:	90 93 ea 20 	sts	0x20EA, r25
     5ac:	1d c0       	rjmp	.+58     	; 0x5e8 <__vector_20+0x130>
			//inputVelocity1 = amplitudeMotor1*2*M_PI*frequencyMotor1*cos(2*M_PI*frequencyMotor1*timeNow);	//calculated velocity value (dps)
			//inputVelocity = amplitude*sin(2*M_PI*frequency*timeNow);	//command velocity for open loop input (dps)
		}
		else if(inputMode == STEP)
     5ae:	80 91 85 20 	lds	r24, 0x2085
     5b2:	81 30       	cpi	r24, 0x01	; 1
     5b4:	89 f4       	brne	.+34     	; 0x5d8 <__vector_20+0x120>
		{
			commandPosition1 = amplitudeMotor1;	//Input position in degrees for step input
     5b6:	80 91 96 20 	lds	r24, 0x2096
     5ba:	90 91 97 20 	lds	r25, 0x2097
     5be:	a0 91 98 20 	lds	r26, 0x2098
     5c2:	b0 91 99 20 	lds	r27, 0x2099
     5c6:	80 93 e7 20 	sts	0x20E7, r24
     5ca:	90 93 e8 20 	sts	0x20E8, r25
     5ce:	a0 93 e9 20 	sts	0x20E9, r26
     5d2:	b0 93 ea 20 	sts	0x20EA, r27
     5d6:	08 c0       	rjmp	.+16     	; 0x5e8 <__vector_20+0x130>
			//printf("commandPositionStep = %f \t amplitudeMotor1 = %f \n",commandPosition1,amplitudeMotor1);
		}
		else
		{
			voltSet1 = 0;
     5d8:	10 92 dc 20 	sts	0x20DC, r1
     5dc:	10 92 dd 20 	sts	0x20DD, r1
     5e0:	10 92 de 20 	sts	0x20DE, r1
     5e4:	10 92 df 20 	sts	0x20DF, r1
		}


		////Read encoder 1 and calculate position and velocity
		if(timeNow == 0)
     5e8:	60 91 eb 20 	lds	r22, 0x20EB
     5ec:	70 91 ec 20 	lds	r23, 0x20EC
     5f0:	80 91 ed 20 	lds	r24, 0x20ED
     5f4:	90 91 ee 20 	lds	r25, 0x20EE
     5f8:	20 e0       	ldi	r18, 0x00	; 0
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	a9 01       	movw	r20, r18
     5fe:	9f d7       	rcall	.+3902   	; 0x153e <__cmpsf2>
     600:	81 11       	cpse	r24, r1
     602:	10 c0       	rjmp	.+32     	; 0x624 <__vector_20+0x16c>
		{
			encCount1_first = TCD1.CNT;
     604:	e0 e4       	ldi	r30, 0x40	; 64
     606:	f9 e0       	ldi	r31, 0x09	; 9
     608:	80 a1       	ldd	r24, Z+32	; 0x20
     60a:	91 a1       	ldd	r25, Z+33	; 0x21
     60c:	80 93 d6 20 	sts	0x20D6, r24
     610:	90 93 d7 20 	sts	0x20D7, r25
			encCount1_first = encCount1_first;
     614:	80 91 d6 20 	lds	r24, 0x20D6
     618:	90 91 d7 20 	lds	r25, 0x20D7
     61c:	80 93 d6 20 	sts	0x20D6, r24
     620:	90 93 d7 20 	sts	0x20D7, r25
		}

		encCount1 = TCD1.CNT;
     624:	e0 e4       	ldi	r30, 0x40	; 64
     626:	f9 e0       	ldi	r31, 0x09	; 9
     628:	80 a1       	ldd	r24, Z+32	; 0x20
     62a:	91 a1       	ldd	r25, Z+33	; 0x21
     62c:	80 93 f8 20 	sts	0x20F8, r24
     630:	90 93 f9 20 	sts	0x20F9, r25
		
		if(encCount1 < 0) encCount1 = 0;		//encoder 1 out of bounds check
     634:	80 91 f8 20 	lds	r24, 0x20F8
     638:	90 91 f9 20 	lds	r25, 0x20F9
     63c:	99 23       	and	r25, r25
     63e:	24 f4       	brge	.+8      	; 0x648 <__vector_20+0x190>
     640:	10 92 f8 20 	sts	0x20F8, r1
     644:	10 92 f9 20 	sts	0x20F9, r1
		if(encCount1 > 8191) encCount1 = 8191;	//encoder 1 out of bounds check
     648:	80 91 f8 20 	lds	r24, 0x20F8
     64c:	90 91 f9 20 	lds	r25, 0x20F9
     650:	81 15       	cp	r24, r1
     652:	90 42       	sbci	r25, 0x20	; 32
     654:	34 f0       	brlt	.+12     	; 0x662 <__vector_20+0x1aa>
     656:	8f ef       	ldi	r24, 0xFF	; 255
     658:	9f e1       	ldi	r25, 0x1F	; 31
     65a:	80 93 f8 20 	sts	0x20F8, r24
     65e:	90 93 f9 20 	sts	0x20F9, r25
		
		actualPosition1 = (revCnt1 + (encCount1-encCount1_first)/8191.)*360.;	//Position in degrees
     662:	60 91 f8 20 	lds	r22, 0x20F8
     666:	70 91 f9 20 	lds	r23, 0x20F9
     66a:	80 91 d6 20 	lds	r24, 0x20D6
     66e:	90 91 d7 20 	lds	r25, 0x20D7
     672:	c0 90 c2 20 	lds	r12, 0x20C2
     676:	d0 90 c3 20 	lds	r13, 0x20C3
     67a:	e0 90 c4 20 	lds	r14, 0x20C4
     67e:	f0 90 c5 20 	lds	r15, 0x20C5
     682:	68 1b       	sub	r22, r24
     684:	79 0b       	sbc	r23, r25
     686:	88 27       	eor	r24, r24
     688:	77 fd       	sbrc	r23, 7
     68a:	80 95       	com	r24
     68c:	98 2f       	mov	r25, r24
     68e:	f6 d7       	rcall	.+4076   	; 0x167c <__floatsisf>
     690:	20 e0       	ldi	r18, 0x00	; 0
     692:	38 ef       	ldi	r19, 0xF8	; 248
     694:	4f ef       	ldi	r20, 0xFF	; 255
     696:	55 e4       	ldi	r21, 0x45	; 69
     698:	56 d7       	rcall	.+3756   	; 0x1546 <__divsf3>
     69a:	a7 01       	movw	r20, r14
     69c:	96 01       	movw	r18, r12
     69e:	eb d6       	rcall	.+3542   	; 0x1476 <__addsf3>
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	44 eb       	ldi	r20, 0xB4	; 180
     6a6:	53 e4       	ldi	r21, 0x43	; 67
     6a8:	0e 94 45 0c 	call	0x188a	; 0x188a <__mulsf3>
     6ac:	60 93 d2 20 	sts	0x20D2, r22
     6b0:	70 93 d3 20 	sts	0x20D3, r23
     6b4:	80 93 d4 20 	sts	0x20D4, r24
     6b8:	90 93 d5 20 	sts	0x20D5, r25
		
		deltapos1_ang = (actualPosition1 - position1_m1);			//calculate change in angular position of motor 1 for current loop (degrees/count = (360 deg/rev)/(8192 counts/rev))
     6bc:	60 91 d2 20 	lds	r22, 0x20D2
     6c0:	70 91 d3 20 	lds	r23, 0x20D3
     6c4:	80 91 d4 20 	lds	r24, 0x20D4
     6c8:	90 91 d5 20 	lds	r25, 0x20D5
     6cc:	20 91 c7 20 	lds	r18, 0x20C7
     6d0:	30 91 c8 20 	lds	r19, 0x20C8
     6d4:	40 91 c9 20 	lds	r20, 0x20C9
     6d8:	50 91 ca 20 	lds	r21, 0x20CA
     6dc:	cb d6       	rcall	.+3478   	; 0x1474 <__subsf3>
     6de:	60 93 ba 20 	sts	0x20BA, r22
     6e2:	70 93 bb 20 	sts	0x20BB, r23
     6e6:	80 93 bc 20 	sts	0x20BC, r24
     6ea:	90 93 bd 20 	sts	0x20BD, r25
		velocity1_ang = (deltapos1_ang)/(Ts);					//calculate angular velocity of motor 1 for last loop (deg/s)
     6ee:	60 91 ba 20 	lds	r22, 0x20BA
     6f2:	70 91 bb 20 	lds	r23, 0x20BB
     6f6:	80 91 bc 20 	lds	r24, 0x20BC
     6fa:	90 91 bd 20 	lds	r25, 0x20BD
     6fe:	20 91 9b 20 	lds	r18, 0x209B
     702:	30 91 9c 20 	lds	r19, 0x209C
     706:	40 91 9d 20 	lds	r20, 0x209D
     70a:	50 91 9e 20 	lds	r21, 0x209E
     70e:	1b d7       	rcall	.+3638   	; 0x1546 <__divsf3>
     710:	60 93 b6 20 	sts	0x20B6, r22
     714:	70 93 b7 20 	sts	0x20B7, r23
     718:	80 93 b8 20 	sts	0x20B8, r24
     71c:	90 93 b9 20 	sts	0x20B9, r25
		
		errorNow1 = commandPosition1 - actualPosition1;
     720:	60 91 e7 20 	lds	r22, 0x20E7
     724:	70 91 e8 20 	lds	r23, 0x20E8
     728:	80 91 e9 20 	lds	r24, 0x20E9
     72c:	90 91 ea 20 	lds	r25, 0x20EA
     730:	20 91 d2 20 	lds	r18, 0x20D2
     734:	30 91 d3 20 	lds	r19, 0x20D3
     738:	40 91 d4 20 	lds	r20, 0x20D4
     73c:	50 91 d5 20 	lds	r21, 0x20D5
     740:	99 d6       	rcall	.+3378   	; 0x1474 <__subsf3>
     742:	60 93 a7 20 	sts	0x20A7, r22
     746:	70 93 a8 20 	sts	0x20A8, r23
     74a:	80 93 a9 20 	sts	0x20A9, r24
     74e:	90 93 aa 20 	sts	0x20AA, r25

		//Controller
		//ctrlOut1 = Kp * errorNow1;	//Proportional Controller

		ctrlOut1 = ((-Kp) + 1./2.*Ki*Ts)*error1_m1 + (Kp + 1./2.*Ki*Ts)*errorNow1 + ctrlOut1_m1;	//PI Controller
     752:	60 91 01 20 	lds	r22, 0x2001
     756:	70 91 02 20 	lds	r23, 0x2002
     75a:	80 91 03 20 	lds	r24, 0x2003
     75e:	90 91 04 20 	lds	r25, 0x2004
     762:	40 90 9b 20 	lds	r4, 0x209B
     766:	50 90 9c 20 	lds	r5, 0x209C
     76a:	60 90 9d 20 	lds	r6, 0x209D
     76e:	70 90 9e 20 	lds	r7, 0x209E
     772:	80 90 9f 20 	lds	r8, 0x209F
     776:	90 90 a0 20 	lds	r9, 0x20A0
     77a:	a0 90 a1 20 	lds	r10, 0x20A1
     77e:	b0 90 a2 20 	lds	r11, 0x20A2
     782:	20 91 a3 20 	lds	r18, 0x20A3
     786:	30 91 a4 20 	lds	r19, 0x20A4
     78a:	40 91 a5 20 	lds	r20, 0x20A5
     78e:	50 91 a6 20 	lds	r21, 0x20A6
     792:	29 83       	std	Y+1, r18	; 0x01
     794:	3a 83       	std	Y+2, r19	; 0x02
     796:	4b 83       	std	Y+3, r20	; 0x03
     798:	5c 83       	std	Y+4, r21	; 0x04
     79a:	20 91 01 20 	lds	r18, 0x2001
     79e:	30 91 02 20 	lds	r19, 0x2002
     7a2:	40 91 03 20 	lds	r20, 0x2003
     7a6:	50 91 04 20 	lds	r21, 0x2004
     7aa:	2d 83       	std	Y+5, r18	; 0x05
     7ac:	3e 83       	std	Y+6, r19	; 0x06
     7ae:	4f 83       	std	Y+7, r20	; 0x07
     7b0:	58 87       	std	Y+8, r21	; 0x08
     7b2:	20 91 9b 20 	lds	r18, 0x209B
     7b6:	30 91 9c 20 	lds	r19, 0x209C
     7ba:	40 91 9d 20 	lds	r20, 0x209D
     7be:	50 91 9e 20 	lds	r21, 0x209E
     7c2:	29 87       	std	Y+9, r18	; 0x09
     7c4:	3a 87       	std	Y+10, r19	; 0x0a
     7c6:	4b 87       	std	Y+11, r20	; 0x0b
     7c8:	5c 87       	std	Y+12, r21	; 0x0c
     7ca:	20 91 9f 20 	lds	r18, 0x209F
     7ce:	30 91 a0 20 	lds	r19, 0x20A0
     7d2:	40 91 a1 20 	lds	r20, 0x20A1
     7d6:	50 91 a2 20 	lds	r21, 0x20A2
     7da:	2d 87       	std	Y+13, r18	; 0x0d
     7dc:	3e 87       	std	Y+14, r19	; 0x0e
     7de:	4f 87       	std	Y+15, r20	; 0x0f
     7e0:	58 8b       	std	Y+16, r21	; 0x10
     7e2:	20 91 a7 20 	lds	r18, 0x20A7
     7e6:	30 91 a8 20 	lds	r19, 0x20A8
     7ea:	40 91 a9 20 	lds	r20, 0x20A9
     7ee:	50 91 aa 20 	lds	r21, 0x20AA
     7f2:	29 8b       	std	Y+17, r18	; 0x11
     7f4:	3a 8b       	std	Y+18, r19	; 0x12
     7f6:	4b 8b       	std	Y+19, r20	; 0x13
     7f8:	5c 8b       	std	Y+20, r21	; 0x14
     7fa:	c0 90 ab 20 	lds	r12, 0x20AB
     7fe:	d0 90 ac 20 	lds	r13, 0x20AC
     802:	e0 90 ad 20 	lds	r14, 0x20AD
     806:	f0 90 ae 20 	lds	r15, 0x20AE
     80a:	20 e0       	ldi	r18, 0x00	; 0
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	40 e0       	ldi	r20, 0x00	; 0
     810:	5f e3       	ldi	r21, 0x3F	; 63
     812:	0e 94 45 0c 	call	0x188a	; 0x188a <__mulsf3>
     816:	a3 01       	movw	r20, r6
     818:	92 01       	movw	r18, r4
     81a:	0e 94 45 0c 	call	0x188a	; 0x188a <__mulsf3>
     81e:	a5 01       	movw	r20, r10
     820:	94 01       	movw	r18, r8
     822:	28 d6       	rcall	.+3152   	; 0x1474 <__subsf3>
     824:	29 81       	ldd	r18, Y+1	; 0x01
     826:	3a 81       	ldd	r19, Y+2	; 0x02
     828:	4b 81       	ldd	r20, Y+3	; 0x03
     82a:	5c 81       	ldd	r21, Y+4	; 0x04
     82c:	0e 94 45 0c 	call	0x188a	; 0x188a <__mulsf3>
     830:	4b 01       	movw	r8, r22
     832:	5c 01       	movw	r10, r24
     834:	20 e0       	ldi	r18, 0x00	; 0
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	40 e0       	ldi	r20, 0x00	; 0
     83a:	5f e3       	ldi	r21, 0x3F	; 63
     83c:	6d 81       	ldd	r22, Y+5	; 0x05
     83e:	7e 81       	ldd	r23, Y+6	; 0x06
     840:	8f 81       	ldd	r24, Y+7	; 0x07
     842:	98 85       	ldd	r25, Y+8	; 0x08
     844:	0e 94 45 0c 	call	0x188a	; 0x188a <__mulsf3>
     848:	29 85       	ldd	r18, Y+9	; 0x09
     84a:	3a 85       	ldd	r19, Y+10	; 0x0a
     84c:	4b 85       	ldd	r20, Y+11	; 0x0b
     84e:	5c 85       	ldd	r21, Y+12	; 0x0c
     850:	0e 94 45 0c 	call	0x188a	; 0x188a <__mulsf3>
     854:	2d 85       	ldd	r18, Y+13	; 0x0d
     856:	3e 85       	ldd	r19, Y+14	; 0x0e
     858:	4f 85       	ldd	r20, Y+15	; 0x0f
     85a:	58 89       	ldd	r21, Y+16	; 0x10
     85c:	0c d6       	rcall	.+3096   	; 0x1476 <__addsf3>
     85e:	29 89       	ldd	r18, Y+17	; 0x11
     860:	3a 89       	ldd	r19, Y+18	; 0x12
     862:	4b 89       	ldd	r20, Y+19	; 0x13
     864:	5c 89       	ldd	r21, Y+20	; 0x14
     866:	0e 94 45 0c 	call	0x188a	; 0x188a <__mulsf3>
     86a:	9b 01       	movw	r18, r22
     86c:	ac 01       	movw	r20, r24
     86e:	c5 01       	movw	r24, r10
     870:	b4 01       	movw	r22, r8
     872:	01 d6       	rcall	.+3074   	; 0x1476 <__addsf3>
     874:	a7 01       	movw	r20, r14
     876:	96 01       	movw	r18, r12
     878:	fe d5       	rcall	.+3068   	; 0x1476 <__addsf3>
     87a:	60 93 af 20 	sts	0x20AF, r22
     87e:	70 93 b0 20 	sts	0x20B0, r23
     882:	80 93 b1 20 	sts	0x20B1, r24
     886:	90 93 b2 20 	sts	0x20B2, r25

		voltSet1 = ctrlOut1;
     88a:	80 91 af 20 	lds	r24, 0x20AF
     88e:	90 91 b0 20 	lds	r25, 0x20B0
     892:	a0 91 b1 20 	lds	r26, 0x20B1
     896:	b0 91 b2 20 	lds	r27, 0x20B2
     89a:	80 93 dc 20 	sts	0x20DC, r24
     89e:	90 93 dd 20 	sts	0x20DD, r25
     8a2:	a0 93 de 20 	sts	0x20DE, r26
     8a6:	b0 93 df 20 	sts	0x20DF, r27

		if(revCnt1 != revCnt1_m1)
     8aa:	60 91 c2 20 	lds	r22, 0x20C2
     8ae:	70 91 c3 20 	lds	r23, 0x20C3
     8b2:	80 91 c4 20 	lds	r24, 0x20C4
     8b6:	90 91 c5 20 	lds	r25, 0x20C5
     8ba:	20 91 be 20 	lds	r18, 0x20BE
     8be:	30 91 bf 20 	lds	r19, 0x20BF
     8c2:	40 91 c0 20 	lds	r20, 0x20C0
     8c6:	50 91 c1 20 	lds	r21, 0x20C1
     8ca:	39 d6       	rcall	.+3186   	; 0x153e <__cmpsf2>
     8cc:	88 23       	and	r24, r24
     8ce:	a9 f0       	breq	.+42     	; 0x8fa <__vector_20+0x442>
		{
			neutralPositionCounter += 1;
     8d0:	60 91 e2 20 	lds	r22, 0x20E2
     8d4:	70 91 e3 20 	lds	r23, 0x20E3
     8d8:	80 91 e4 20 	lds	r24, 0x20E4
     8dc:	90 91 e5 20 	lds	r25, 0x20E5
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	40 e8       	ldi	r20, 0x80	; 128
     8e6:	5f e3       	ldi	r21, 0x3F	; 63
     8e8:	c6 d5       	rcall	.+2956   	; 0x1476 <__addsf3>
     8ea:	60 93 e2 20 	sts	0x20E2, r22
     8ee:	70 93 e3 20 	sts	0x20E3, r23
     8f2:	80 93 e4 20 	sts	0x20E4, r24
     8f6:	90 93 e5 20 	sts	0x20E5, r25
		}

		//Set up data for SPI transactions
		if(commandPosition1 >= 0)
     8fa:	60 91 e7 20 	lds	r22, 0x20E7
     8fe:	70 91 e8 20 	lds	r23, 0x20E8
     902:	80 91 e9 20 	lds	r24, 0x20E9
     906:	90 91 ea 20 	lds	r25, 0x20EA
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	a9 01       	movw	r20, r18
     910:	b8 d7       	rcall	.+3952   	; 0x1882 <__gesf2>
     912:	88 23       	and	r24, r24
     914:	1c f0       	brlt	.+6      	; 0x91c <__vector_20+0x464>
		{
			commandPositionTag1 = 0b00000000;
     916:	10 92 84 20 	sts	0x2084, r1
     91a:	11 c0       	rjmp	.+34     	; 0x93e <__vector_20+0x486>
		}
		else if(commandPosition1 < 0)
     91c:	60 91 e7 20 	lds	r22, 0x20E7
     920:	70 91 e8 20 	lds	r23, 0x20E8
     924:	80 91 e9 20 	lds	r24, 0x20E9
     928:	90 91 ea 20 	lds	r25, 0x20EA
     92c:	20 e0       	ldi	r18, 0x00	; 0
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	a9 01       	movw	r20, r18
     932:	05 d6       	rcall	.+3082   	; 0x153e <__cmpsf2>
     934:	88 23       	and	r24, r24
     936:	1c f4       	brge	.+6      	; 0x93e <__vector_20+0x486>
		{
			commandPositionTag1 = 0b10000000;
     938:	80 e8       	ldi	r24, 0x80	; 128
     93a:	80 93 84 20 	sts	0x2084, r24
		}

		if(actualPosition1 >= 0)
     93e:	60 91 d2 20 	lds	r22, 0x20D2
     942:	70 91 d3 20 	lds	r23, 0x20D3
     946:	80 91 d4 20 	lds	r24, 0x20D4
     94a:	90 91 d5 20 	lds	r25, 0x20D5
     94e:	20 e0       	ldi	r18, 0x00	; 0
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	a9 01       	movw	r20, r18
     954:	96 d7       	rcall	.+3884   	; 0x1882 <__gesf2>
     956:	88 23       	and	r24, r24
     958:	24 f0       	brlt	.+8      	; 0x962 <__vector_20+0x4aa>
		{
			actualPositionTag1 = 0b00010000;
     95a:	80 e1       	ldi	r24, 0x10	; 16
     95c:	80 93 d1 20 	sts	0x20D1, r24
     960:	11 c0       	rjmp	.+34     	; 0x984 <__vector_20+0x4cc>
		}
		else if(actualPosition1 < 0)
     962:	60 91 d2 20 	lds	r22, 0x20D2
     966:	70 91 d3 20 	lds	r23, 0x20D3
     96a:	80 91 d4 20 	lds	r24, 0x20D4
     96e:	90 91 d5 20 	lds	r25, 0x20D5
     972:	20 e0       	ldi	r18, 0x00	; 0
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	a9 01       	movw	r20, r18
     978:	e2 d5       	rcall	.+3012   	; 0x153e <__cmpsf2>
     97a:	88 23       	and	r24, r24
     97c:	1c f4       	brge	.+6      	; 0x984 <__vector_20+0x4cc>
		{
			actualPositionTag1 = 0b10010000;
     97e:	80 e9       	ldi	r24, 0x90	; 144
     980:	80 93 d1 20 	sts	0x20D1, r24
		}

		commandPosition1_flt = fabs(commandPosition1);
     984:	80 91 e7 20 	lds	r24, 0x20E7
     988:	90 91 e8 20 	lds	r25, 0x20E8
     98c:	a0 91 e9 20 	lds	r26, 0x20E9
     990:	b0 91 ea 20 	lds	r27, 0x20EA
     994:	bf 77       	andi	r27, 0x7F	; 127
     996:	80 93 80 20 	sts	0x2080, r24
     99a:	90 93 81 20 	sts	0x2081, r25
     99e:	a0 93 82 20 	sts	0x2082, r26
     9a2:	b0 93 83 20 	sts	0x2083, r27
		commandPosition1_int = floor(commandPosition1_flt);
     9a6:	60 91 80 20 	lds	r22, 0x2080
     9aa:	70 91 81 20 	lds	r23, 0x2081
     9ae:	80 91 82 20 	lds	r24, 0x2082
     9b2:	90 91 83 20 	lds	r25, 0x2083
     9b6:	9d d6       	rcall	.+3386   	; 0x16f2 <floor>
     9b8:	2e d6       	rcall	.+3164   	; 0x1616 <__fixsfsi>
     9ba:	60 93 7f 20 	sts	0x207F, r22
		commandPosition1_dec = floor((commandPosition1_flt - commandPosition1_int)*100);
     9be:	c0 90 80 20 	lds	r12, 0x2080
     9c2:	d0 90 81 20 	lds	r13, 0x2081
     9c6:	e0 90 82 20 	lds	r14, 0x2082
     9ca:	f0 90 83 20 	lds	r15, 0x2083
     9ce:	60 91 7f 20 	lds	r22, 0x207F
     9d2:	77 27       	eor	r23, r23
     9d4:	67 fd       	sbrc	r22, 7
     9d6:	70 95       	com	r23
     9d8:	87 2f       	mov	r24, r23
     9da:	97 2f       	mov	r25, r23
     9dc:	4f d6       	rcall	.+3230   	; 0x167c <__floatsisf>
     9de:	9b 01       	movw	r18, r22
     9e0:	ac 01       	movw	r20, r24
     9e2:	c7 01       	movw	r24, r14
     9e4:	b6 01       	movw	r22, r12
     9e6:	46 d5       	rcall	.+2700   	; 0x1474 <__subsf3>
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	48 ec       	ldi	r20, 0xC8	; 200
     9ee:	52 e4       	ldi	r21, 0x42	; 66
     9f0:	4c d7       	rcall	.+3736   	; 0x188a <__mulsf3>
     9f2:	7f d6       	rcall	.+3326   	; 0x16f2 <floor>
     9f4:	10 d6       	rcall	.+3104   	; 0x1616 <__fixsfsi>
     9f6:	60 93 7e 20 	sts	0x207E, r22

		actualPosition1_flt = fabs(actualPosition1);
     9fa:	80 91 d2 20 	lds	r24, 0x20D2
     9fe:	90 91 d3 20 	lds	r25, 0x20D3
     a02:	a0 91 d4 20 	lds	r26, 0x20D4
     a06:	b0 91 d5 20 	lds	r27, 0x20D5
     a0a:	bf 77       	andi	r27, 0x7F	; 127
     a0c:	80 93 cd 20 	sts	0x20CD, r24
     a10:	90 93 ce 20 	sts	0x20CE, r25
     a14:	a0 93 cf 20 	sts	0x20CF, r26
     a18:	b0 93 d0 20 	sts	0x20D0, r27
		actualPosition1_int = floor(actualPosition1_flt);
     a1c:	60 91 cd 20 	lds	r22, 0x20CD
     a20:	70 91 ce 20 	lds	r23, 0x20CE
     a24:	80 91 cf 20 	lds	r24, 0x20CF
     a28:	90 91 d0 20 	lds	r25, 0x20D0
     a2c:	62 d6       	rcall	.+3268   	; 0x16f2 <floor>
     a2e:	f3 d5       	rcall	.+3046   	; 0x1616 <__fixsfsi>
     a30:	60 93 cc 20 	sts	0x20CC, r22
		actualPosition1_dec = floor((actualPosition1_flt - actualPosition1_int)*100);
     a34:	c0 90 cd 20 	lds	r12, 0x20CD
     a38:	d0 90 ce 20 	lds	r13, 0x20CE
     a3c:	e0 90 cf 20 	lds	r14, 0x20CF
     a40:	f0 90 d0 20 	lds	r15, 0x20D0
     a44:	60 91 cc 20 	lds	r22, 0x20CC
     a48:	77 27       	eor	r23, r23
     a4a:	67 fd       	sbrc	r22, 7
     a4c:	70 95       	com	r23
     a4e:	87 2f       	mov	r24, r23
     a50:	97 2f       	mov	r25, r23
     a52:	14 d6       	rcall	.+3112   	; 0x167c <__floatsisf>
     a54:	9b 01       	movw	r18, r22
     a56:	ac 01       	movw	r20, r24
     a58:	c7 01       	movw	r24, r14
     a5a:	b6 01       	movw	r22, r12
     a5c:	0b d5       	rcall	.+2582   	; 0x1474 <__subsf3>
     a5e:	20 e0       	ldi	r18, 0x00	; 0
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	48 ec       	ldi	r20, 0xC8	; 200
     a64:	52 e4       	ldi	r21, 0x42	; 66
     a66:	11 d7       	rcall	.+3618   	; 0x188a <__mulsf3>
     a68:	44 d6       	rcall	.+3208   	; 0x16f2 <floor>
     a6a:	d5 d5       	rcall	.+2986   	; 0x1616 <__fixsfsi>
     a6c:	60 93 cb 20 	sts	0x20CB, r22
		
		for(int jj = 0; jj < 2; jj++)
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	90 e0       	ldi	r25, 0x00	; 0
				slaveWritehighByte = (actualPositionTag1 | actualPosition1_int);
				slaveWritelowByte = actualPosition1_dec;
				//printf("actualPos = %f \t\t highByte = %u \t\t lowByte = %u \t\t actualPosTag = %u \t\t int = %i \t\t dec = %i \t\t jj = %i\n",actualPosition1,slaveWritehighByte,slaveWritelowByte,actualPositionTag1,actualPosition1_int,actualPosition1_dec,jj);
			}
			
			SPIC.DATA = slaveWritehighByte;
     a74:	e0 ec       	ldi	r30, 0xC0	; 192
     a76:	f8 e0       	ldi	r31, 0x08	; 8
			//_delay_ms(2);
			PORTA.OUTCLR = PIN4_bm;		//signal RPi that data is ready on first data ready pin
     a78:	a0 e0       	ldi	r26, 0x00	; 0
     a7a:	b6 e0       	ldi	r27, 0x06	; 6
     a7c:	30 e1       	ldi	r19, 0x10	; 16
		actualPosition1_int = floor(actualPosition1_flt);
		actualPosition1_dec = floor((actualPosition1_flt - actualPosition1_int)*100);
		
		for(int jj = 0; jj < 2; jj++)
		{
			if(jj < 1)
     a7e:	18 16       	cp	r1, r24
     a80:	19 06       	cpc	r1, r25
     a82:	64 f0       	brlt	.+24     	; 0xa9c <__vector_20+0x5e4>
			{
				slaveWritehighByte = (commandPositionTag1 | commandPosition1_int);
     a84:	40 91 84 20 	lds	r20, 0x2084
     a88:	20 91 7f 20 	lds	r18, 0x207F
     a8c:	24 2b       	or	r18, r20
     a8e:	20 93 b3 20 	sts	0x20B3, r18
				slaveWritelowByte = commandPosition1_dec;
     a92:	20 91 7e 20 	lds	r18, 0x207E
     a96:	20 93 b4 20 	sts	0x20B4, r18
     a9a:	0b c0       	rjmp	.+22     	; 0xab2 <__vector_20+0x5fa>
				//printf("commandPos = %f \t\t highByte = %u \t\t lowByte = %u \t\t commandPosTag = %u \t\t int = %i \t\t dec = %i \t\t jj = %i\n",commandPosition1,slaveWritehighByte,slaveWritelowByte,commandPositionTag1,commandPosition1_int,commandPosition1_dec,jj);
			}
			else
			{
				slaveWritehighByte = (actualPositionTag1 | actualPosition1_int);
     a9c:	40 91 d1 20 	lds	r20, 0x20D1
     aa0:	20 91 cc 20 	lds	r18, 0x20CC
     aa4:	24 2b       	or	r18, r20
     aa6:	20 93 b3 20 	sts	0x20B3, r18
				slaveWritelowByte = actualPosition1_dec;
     aaa:	20 91 cb 20 	lds	r18, 0x20CB
     aae:	20 93 b4 20 	sts	0x20B4, r18
				//printf("actualPos = %f \t\t highByte = %u \t\t lowByte = %u \t\t actualPosTag = %u \t\t int = %i \t\t dec = %i \t\t jj = %i\n",actualPosition1,slaveWritehighByte,slaveWritelowByte,actualPositionTag1,actualPosition1_int,actualPosition1_dec,jj);
			}
			
			SPIC.DATA = slaveWritehighByte;
     ab2:	20 91 b3 20 	lds	r18, 0x20B3
     ab6:	23 83       	std	Z+3, r18	; 0x03
			//_delay_ms(2);
			PORTA.OUTCLR = PIN4_bm;		//signal RPi that data is ready on first data ready pin
     ab8:	16 96       	adiw	r26, 0x06	; 6
     aba:	3c 93       	st	X, r19
     abc:	16 97       	sbiw	r26, 0x06	; 6

			while(!(SPIC.STATUS & SPI_IF_bm));	//wait until data tx from Rpi is done and flag is set
     abe:	22 81       	ldd	r18, Z+2	; 0x02
     ac0:	22 23       	and	r18, r18
     ac2:	ec f7       	brge	.-6      	; 0xabe <__vector_20+0x606>
			//_delay_ms(100);
			PORTA.OUTSET = PIN4_bm;				//set data ready pin high
     ac4:	15 96       	adiw	r26, 0x05	; 5
     ac6:	3c 93       	st	X, r19
     ac8:	15 97       	sbiw	r26, 0x05	; 5
			slaveReadhighByte = SPIC.DATA;		//Grab byte received from Master
     aca:	23 81       	ldd	r18, Z+3	; 0x03
     acc:	20 93 e6 20 	sts	0x20E6, r18
			SPIC.DATA = slaveWritelowByte;						//Send zero low byte to Master
     ad0:	20 91 b4 20 	lds	r18, 0x20B4
     ad4:	23 83       	std	Z+3, r18	; 0x03

			while(!(SPIC.STATUS & SPI_IF_bm)); //wait until data tx from BB is done and flag is set
     ad6:	22 81       	ldd	r18, Z+2	; 0x02
     ad8:	22 23       	and	r18, r18
     ada:	ec f7       	brge	.-6      	; 0xad6 <__vector_20+0x61e>
			
			slaveReadlowByte = SPIC.DATA; //Grab byte received from Master
     adc:	23 81       	ldd	r18, Z+3	; 0x03
     ade:	20 93 b5 20 	sts	0x20B5, r18

		actualPosition1_flt = fabs(actualPosition1);
		actualPosition1_int = floor(actualPosition1_flt);
		actualPosition1_dec = floor((actualPosition1_flt - actualPosition1_int)*100);
		
		for(int jj = 0; jj < 2; jj++)
     ae2:	01 96       	adiw	r24, 0x01	; 1
     ae4:	82 30       	cpi	r24, 0x02	; 2
     ae6:	91 05       	cpc	r25, r1
     ae8:	51 f6       	brne	.-108    	; 0xa7e <__vector_20+0x5c6>
			
			slaveReadlowByte = SPIC.DATA; //Grab byte received from Master

		}

		position1_m1 = actualPosition1;			//store last position of motor 1
     aea:	80 91 d2 20 	lds	r24, 0x20D2
     aee:	90 91 d3 20 	lds	r25, 0x20D3
     af2:	a0 91 d4 20 	lds	r26, 0x20D4
     af6:	b0 91 d5 20 	lds	r27, 0x20D5
     afa:	80 93 c7 20 	sts	0x20C7, r24
     afe:	90 93 c8 20 	sts	0x20C8, r25
     b02:	a0 93 c9 20 	sts	0x20C9, r26
     b06:	b0 93 ca 20 	sts	0x20CA, r27
		revCnt1_m1 = revCnt1;					//store last rev counter
     b0a:	80 91 c2 20 	lds	r24, 0x20C2
     b0e:	90 91 c3 20 	lds	r25, 0x20C3
     b12:	a0 91 c4 20 	lds	r26, 0x20C4
     b16:	b0 91 c5 20 	lds	r27, 0x20C5
     b1a:	80 93 be 20 	sts	0x20BE, r24
     b1e:	90 93 bf 20 	sts	0x20BF, r25
     b22:	a0 93 c0 20 	sts	0x20C0, r26
     b26:	b0 93 c1 20 	sts	0x20C1, r27
		error1_m1 = errorNow1;					//store last error value for motor 1
     b2a:	80 91 a7 20 	lds	r24, 0x20A7
     b2e:	90 91 a8 20 	lds	r25, 0x20A8
     b32:	a0 91 a9 20 	lds	r26, 0x20A9
     b36:	b0 91 aa 20 	lds	r27, 0x20AA
     b3a:	80 93 a3 20 	sts	0x20A3, r24
     b3e:	90 93 a4 20 	sts	0x20A4, r25
     b42:	a0 93 a5 20 	sts	0x20A5, r26
     b46:	b0 93 a6 20 	sts	0x20A6, r27
		ctrlOut1_m1 = ctrlOut1;					//store last control value for motor 1
     b4a:	80 91 af 20 	lds	r24, 0x20AF
     b4e:	90 91 b0 20 	lds	r25, 0x20B0
     b52:	a0 91 b1 20 	lds	r26, 0x20B1
     b56:	b0 91 b2 20 	lds	r27, 0x20B2
     b5a:	80 93 ab 20 	sts	0x20AB, r24
     b5e:	90 93 ac 20 	sts	0x20AC, r25
     b62:	a0 93 ad 20 	sts	0x20AD, r26
     b66:	b0 93 ae 20 	sts	0x20AE, r27
     b6a:	08 c0       	rjmp	.+16     	; 0xb7c <__vector_20+0x6c4>
	}
	else
	{
		voltSet1 = 0;
     b6c:	10 92 dc 20 	sts	0x20DC, r1
     b70:	10 92 dd 20 	sts	0x20DD, r1
     b74:	10 92 de 20 	sts	0x20DE, r1
     b78:	10 92 df 20 	sts	0x20DF, r1
	}

	if(abs(voltSet1) >= maxVoltage)
     b7c:	60 91 dc 20 	lds	r22, 0x20DC
     b80:	70 91 dd 20 	lds	r23, 0x20DD
     b84:	80 91 de 20 	lds	r24, 0x20DE
     b88:	90 91 df 20 	lds	r25, 0x20DF
     b8c:	c0 90 06 20 	lds	r12, 0x2006
     b90:	d0 90 07 20 	lds	r13, 0x2007
     b94:	e0 90 08 20 	lds	r14, 0x2008
     b98:	f0 90 09 20 	lds	r15, 0x2009
     b9c:	3c d5       	rcall	.+2680   	; 0x1616 <__fixsfsi>
     b9e:	9b 01       	movw	r18, r22
     ba0:	77 23       	and	r23, r23
     ba2:	24 f4       	brge	.+8      	; 0xbac <__vector_20+0x6f4>
     ba4:	22 27       	eor	r18, r18
     ba6:	33 27       	eor	r19, r19
     ba8:	26 1b       	sub	r18, r22
     baa:	37 0b       	sbc	r19, r23
     bac:	b9 01       	movw	r22, r18
     bae:	88 27       	eor	r24, r24
     bb0:	77 fd       	sbrc	r23, 7
     bb2:	80 95       	com	r24
     bb4:	98 2f       	mov	r25, r24
     bb6:	62 d5       	rcall	.+2756   	; 0x167c <__floatsisf>
     bb8:	a7 01       	movw	r20, r14
     bba:	96 01       	movw	r18, r12
     bbc:	62 d6       	rcall	.+3268   	; 0x1882 <__gesf2>
     bbe:	88 23       	and	r24, r24
     bc0:	d4 f0       	brlt	.+52     	; 0xbf6 <__vector_20+0x73e>
	{
		voltSet1 = copysign(maxVoltage,voltSet1);
     bc2:	40 91 dc 20 	lds	r20, 0x20DC
     bc6:	50 91 dd 20 	lds	r21, 0x20DD
     bca:	60 91 de 20 	lds	r22, 0x20DE
     bce:	70 91 df 20 	lds	r23, 0x20DF
     bd2:	80 91 06 20 	lds	r24, 0x2006
     bd6:	90 91 07 20 	lds	r25, 0x2007
     bda:	a0 91 08 20 	lds	r26, 0x2008
     bde:	b0 91 09 20 	lds	r27, 0x2009
    The copysign() function returns \a __x but with the sign of \a __y.
    They work even if \a __x or \a __y are NaN or zero.
*/
__ATTR_CONST__ static inline double copysign (double __x, double __y)
{
    __asm__ (
     be2:	77 fb       	bst	r23, 7
     be4:	b7 f9       	bld	r27, 7
     be6:	80 93 dc 20 	sts	0x20DC, r24
     bea:	90 93 dd 20 	sts	0x20DD, r25
     bee:	a0 93 de 20 	sts	0x20DE, r26
     bf2:	b0 93 df 20 	sts	0x20DF, r27
	} //if greater than max, set value to max with original sign

	pwmtoMotor1(voltSet1);
     bf6:	60 91 dc 20 	lds	r22, 0x20DC
     bfa:	70 91 dd 20 	lds	r23, 0x20DD
     bfe:	80 91 de 20 	lds	r24, 0x20DE
     c02:	90 91 df 20 	lds	r25, 0x20DF
     c06:	c1 db       	rcall	.-2174   	; 0x38a <pwmtoMotor1>

	timeNow += Ts;	//Calculate time in program
     c08:	60 91 eb 20 	lds	r22, 0x20EB
     c0c:	70 91 ec 20 	lds	r23, 0x20EC
     c10:	80 91 ed 20 	lds	r24, 0x20ED
     c14:	90 91 ee 20 	lds	r25, 0x20EE
     c18:	20 91 9b 20 	lds	r18, 0x209B
     c1c:	30 91 9c 20 	lds	r19, 0x209C
     c20:	40 91 9d 20 	lds	r20, 0x209D
     c24:	50 91 9e 20 	lds	r21, 0x209E
     c28:	26 d4       	rcall	.+2124   	; 0x1476 <__addsf3>
     c2a:	60 93 eb 20 	sts	0x20EB, r22
     c2e:	70 93 ec 20 	sts	0x20EC, r23
     c32:	80 93 ed 20 	sts	0x20ED, r24
     c36:	90 93 ee 20 	sts	0x20EE, r25
}
     c3a:	64 96       	adiw	r28, 0x14	; 20
     c3c:	cd bf       	out	0x3d, r28	; 61
     c3e:	de bf       	out	0x3e, r29	; 62
     c40:	df 91       	pop	r29
     c42:	cf 91       	pop	r28
     c44:	ff 91       	pop	r31
     c46:	ef 91       	pop	r30
     c48:	bf 91       	pop	r27
     c4a:	af 91       	pop	r26
     c4c:	9f 91       	pop	r25
     c4e:	8f 91       	pop	r24
     c50:	7f 91       	pop	r23
     c52:	6f 91       	pop	r22
     c54:	5f 91       	pop	r21
     c56:	4f 91       	pop	r20
     c58:	3f 91       	pop	r19
     c5a:	2f 91       	pop	r18
     c5c:	ff 90       	pop	r15
     c5e:	ef 90       	pop	r14
     c60:	df 90       	pop	r13
     c62:	cf 90       	pop	r12
     c64:	bf 90       	pop	r11
     c66:	af 90       	pop	r10
     c68:	9f 90       	pop	r9
     c6a:	8f 90       	pop	r8
     c6c:	7f 90       	pop	r7
     c6e:	6f 90       	pop	r6
     c70:	5f 90       	pop	r5
     c72:	4f 90       	pop	r4
     c74:	0f 90       	pop	r0
     c76:	0b be       	out	0x3b, r0	; 59
     c78:	0f 90       	pop	r0
     c7a:	0a be       	out	0x3a, r0	; 58
     c7c:	0f 90       	pop	r0
     c7e:	09 be       	out	0x39, r0	; 57
     c80:	0f 90       	pop	r0
     c82:	08 be       	out	0x38, r0	; 56
     c84:	0f 90       	pop	r0
     c86:	0f be       	out	0x3f, r0	; 63
     c88:	0f 90       	pop	r0
     c8a:	1f 90       	pop	r1
     c8c:	18 95       	reti

00000c8e <__vector_83>:
		TCF1.CCA = digiHB1;
	}
}

ISR(TCD1_OVF_vect)
{
     c8e:	1f 92       	push	r1
     c90:	0f 92       	push	r0
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	0f 92       	push	r0
     c96:	11 24       	eor	r1, r1
     c98:	08 b6       	in	r0, 0x38	; 56
     c9a:	0f 92       	push	r0
     c9c:	18 be       	out	0x38, r1	; 56
     c9e:	09 b6       	in	r0, 0x39	; 57
     ca0:	0f 92       	push	r0
     ca2:	19 be       	out	0x39, r1	; 57
     ca4:	0b b6       	in	r0, 0x3b	; 59
     ca6:	0f 92       	push	r0
     ca8:	1b be       	out	0x3b, r1	; 59
     caa:	2f 93       	push	r18
     cac:	3f 93       	push	r19
     cae:	4f 93       	push	r20
     cb0:	5f 93       	push	r21
     cb2:	6f 93       	push	r22
     cb4:	7f 93       	push	r23
     cb6:	8f 93       	push	r24
     cb8:	9f 93       	push	r25
     cba:	af 93       	push	r26
     cbc:	bf 93       	push	r27
     cbe:	ef 93       	push	r30
     cc0:	ff 93       	push	r31
	if (TCD1.CTRLFSET & TC1_DIR_bm)	//if DIR pin is 0, encoder direction is positive (counting up); if DIR pin is 1, enoder direction is negative (counting down)
     cc2:	e0 e4       	ldi	r30, 0x40	; 64
     cc4:	f9 e0       	ldi	r31, 0x09	; 9
     cc6:	81 85       	ldd	r24, Z+9	; 0x09
     cc8:	80 ff       	sbrs	r24, 0
     cca:	18 c0       	rjmp	.+48     	; 0xcfc <__vector_83+0x6e>
	{
		--revCnt1;		//decrement RevCnt1 variable if overflow in negative direction
     ccc:	60 91 c2 20 	lds	r22, 0x20C2
     cd0:	70 91 c3 20 	lds	r23, 0x20C3
     cd4:	80 91 c4 20 	lds	r24, 0x20C4
     cd8:	90 91 c5 20 	lds	r25, 0x20C5
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	40 e8       	ldi	r20, 0x80	; 128
     ce2:	5f e3       	ldi	r21, 0x3F	; 63
     ce4:	c7 d3       	rcall	.+1934   	; 0x1474 <__subsf3>
     ce6:	60 93 c2 20 	sts	0x20C2, r22
     cea:	70 93 c3 20 	sts	0x20C3, r23
     cee:	80 93 c4 20 	sts	0x20C4, r24
     cf2:	90 93 c5 20 	sts	0x20C5, r25
		overFlag1 = 0;	//the overFlag variable is solely intended to make the double firing problem visible in the positive direction
     cf6:	10 92 c6 20 	sts	0x20C6, r1
     cfa:	23 c0       	rjmp	.+70     	; 0xd42 <__vector_83+0xb4>
	}
	else if (overFlag1 == 0)
     cfc:	80 91 c6 20 	lds	r24, 0x20C6
     d00:	81 11       	cpse	r24, r1
     d02:	19 c0       	rjmp	.+50     	; 0xd36 <__vector_83+0xa8>
	{
		++revCnt1;		//increment RevCnt1 variable if overflow in positive direction
     d04:	60 91 c2 20 	lds	r22, 0x20C2
     d08:	70 91 c3 20 	lds	r23, 0x20C3
     d0c:	80 91 c4 20 	lds	r24, 0x20C4
     d10:	90 91 c5 20 	lds	r25, 0x20C5
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	40 e8       	ldi	r20, 0x80	; 128
     d1a:	5f e3       	ldi	r21, 0x3F	; 63
     d1c:	ac d3       	rcall	.+1880   	; 0x1476 <__addsf3>
     d1e:	60 93 c2 20 	sts	0x20C2, r22
     d22:	70 93 c3 20 	sts	0x20C3, r23
     d26:	80 93 c4 20 	sts	0x20C4, r24
     d2a:	90 93 c5 20 	sts	0x20C5, r25
		overFlag1 = 1;	//when positive overflow from TOP to 0, set flag to 1
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	80 93 c6 20 	sts	0x20C6, r24
     d34:	06 c0       	rjmp	.+12     	; 0xd42 <__vector_83+0xb4>
	}
	else if (overFlag1 == 1)
     d36:	80 91 c6 20 	lds	r24, 0x20C6
     d3a:	81 30       	cpi	r24, 0x01	; 1
     d3c:	11 f4       	brne	.+4      	; 0xd42 <__vector_83+0xb4>
	overFlag1 = 0;		//when overflow is positive, and flag is set a second time (in error) from 0 to 1, clear the flag
     d3e:	10 92 c6 20 	sts	0x20C6, r1
}
     d42:	ff 91       	pop	r31
     d44:	ef 91       	pop	r30
     d46:	bf 91       	pop	r27
     d48:	af 91       	pop	r26
     d4a:	9f 91       	pop	r25
     d4c:	8f 91       	pop	r24
     d4e:	7f 91       	pop	r23
     d50:	6f 91       	pop	r22
     d52:	5f 91       	pop	r21
     d54:	4f 91       	pop	r20
     d56:	3f 91       	pop	r19
     d58:	2f 91       	pop	r18
     d5a:	0f 90       	pop	r0
     d5c:	0b be       	out	0x3b, r0	; 59
     d5e:	0f 90       	pop	r0
     d60:	09 be       	out	0x39, r0	; 57
     d62:	0f 90       	pop	r0
     d64:	08 be       	out	0x38, r0	; 56
     d66:	0f 90       	pop	r0
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	0f 90       	pop	r0
     d6c:	1f 90       	pop	r1
     d6e:	18 95       	reti

00000d70 <clk_init>:

void clk_init(void)
{
	OSC.CTRL |= OSC_RC32MEN_bm;					//enable 32Mhz RC Osc
     d70:	e0 e5       	ldi	r30, 0x50	; 80
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	82 60       	ori	r24, 0x02	; 2
     d78:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));		//wait for Osc to be stable
     d7a:	81 81       	ldd	r24, Z+1	; 0x01
     d7c:	81 ff       	sbrs	r24, 1
     d7e:	fd cf       	rjmp	.-6      	; 0xd7a <clk_init+0xa>
	CCP = CCP_IOREG_gc;							//disables IO protection for 4 clock cycles to permit selection of system clock
     d80:	88 ed       	ldi	r24, 0xD8	; 216
     d82:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;			//set 32Mhz RC Osc as system clock
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	80 93 40 00 	sts	0x0040, r24
     d8a:	08 95       	ret

00000d8c <timer_init>:
}


void timer_init(uint16_t topCount)	//initialization of Interrupt timer
{
	TCC1.CTRLB |= TC_WGMODE_NORMAL_gc;		//Normal mode on Port C, Output Compare pins disconnected
     d8c:	e0 e4       	ldi	r30, 0x40	; 64
     d8e:	f8 e0       	ldi	r31, 0x08	; 8
     d90:	21 81       	ldd	r18, Z+1	; 0x01
     d92:	21 83       	std	Z+1, r18	; 0x01
	TCC1.INTCTRLA |= TC_OVFINTLVL_LO_gc;	//Enable overflow interrupt
     d94:	26 81       	ldd	r18, Z+6	; 0x06
     d96:	21 60       	ori	r18, 0x01	; 1
     d98:	26 83       	std	Z+6, r18	; 0x06
	TCC1.PER = topCount;					//Set Period
     d9a:	86 a3       	std	Z+38, r24	; 0x26
     d9c:	97 a3       	std	Z+39, r25	; 0x27
	TCC1.CTRLA |= TC_CLKSEL_DIV256_gc;		//Start at Clk/256
     d9e:	80 81       	ld	r24, Z
     da0:	86 60       	ori	r24, 0x06	; 6
     da2:	80 83       	st	Z, r24
     da4:	08 95       	ret

00000da6 <usart_init>:


void usart_init(void) //(Port C)
{

	PORTC.DIRSET = PIN3_bm;		//Set Tx pin as output
     da6:	e0 e4       	ldi	r30, 0x40	; 64
     da8:	f6 e0       	ldi	r31, 0x06	; 6
     daa:	88 e0       	ldi	r24, 0x08	; 8
     dac:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = PIN2_bm;		//Set Rx pin as input (this should be default)
     dae:	94 e0       	ldi	r25, 0x04	; 4
     db0:	92 83       	std	Z+2, r25	; 0x02
	PORTC.OUTSET = PIN3_bm;		//Set Tx pin high
     db2:	85 83       	std	Z+5, r24	; 0x05

	//Set mode, baud rate and frame format
	USARTC0.CTRLC |= USART_CMODE_ASYNCHRONOUS_gc | USART_CHSIZE_8BIT_gc;
     db4:	e0 ea       	ldi	r30, 0xA0	; 160
     db6:	f8 e0       	ldi	r31, 0x08	; 8
     db8:	85 81       	ldd	r24, Z+5	; 0x05
     dba:	83 60       	ori	r24, 0x03	; 3
     dbc:	85 83       	std	Z+5, r24	; 0x05
	USARTC0.BAUDCTRLA = (uint8_t)BSEL;
     dbe:	8b e6       	ldi	r24, 0x6B	; 107
     dc0:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB = (BSCALE<<USART_BSCALE0_bp) | (BSEL>>8);
     dc2:	80 eb       	ldi	r24, 0xB0	; 176
     dc4:	87 83       	std	Z+7, r24	; 0x07

	//enable Tx (Rx not enabled)
	USARTC0.CTRLB |= USART_TXEN_bm;
     dc6:	84 81       	ldd	r24, Z+4	; 0x04
     dc8:	88 60       	ori	r24, 0x08	; 8
     dca:	84 83       	std	Z+4, r24	; 0x04
     dcc:	08 95       	ret

00000dce <pwmtimer_init>:
}


void pwmtimer_init(void) //initialization of PWM timer (come back to period of timer)
{
	TCF1.CTRLB = TC_WGMODE_SS_gc | TC1_CCAEN_bm;		//Singleslope PWM mode, enable compare on Channel A
     dce:	e0 e4       	ldi	r30, 0x40	; 64
     dd0:	fb e0       	ldi	r31, 0x0B	; 11
     dd2:	83 e1       	ldi	r24, 0x13	; 19
     dd4:	81 83       	std	Z+1, r24	; 0x01
	TCF1.PER = 1599;									//Set Period at 20k Hz (20k = 32e6/(1(top+1))), top = 1599, res = 10.64
     dd6:	8f e3       	ldi	r24, 0x3F	; 63
     dd8:	96 e0       	ldi	r25, 0x06	; 6
     dda:	86 a3       	std	Z+38, r24	; 0x26
     ddc:	97 a3       	std	Z+39, r25	; 0x27
	TCF1.CTRLA |= TC_CLKSEL_DIV1_gc;					//Start at Clk/1
     dde:	80 81       	ld	r24, Z
     de0:	81 60       	ori	r24, 0x01	; 1
     de2:	80 83       	st	Z, r24
	PORTF.DIRSET = PIN4_bm;								//Set Port F channel as output, ChA on pin4
     de4:	80 e1       	ldi	r24, 0x10	; 16
     de6:	a0 ea       	ldi	r26, 0xA0	; 160
     de8:	b6 e0       	ldi	r27, 0x06	; 6
     dea:	11 96       	adiw	r26, 0x01	; 1
     dec:	8c 93       	st	X, r24
	TCF1.CCA = 0;										//Set starting duty cycle on compare channel A
     dee:	10 a6       	std	Z+40, r1	; 0x28
     df0:	11 a6       	std	Z+41, r1	; 0x29
     df2:	08 95       	ret

00000df4 <encoder_init>:


void encoder_init(void)
{
	//set up 2 encoders, do not use index
	PORTD.DIRCLR = PIN0_bm | PIN1_bm | PIN3_bm | PIN4_bm; //set encoder pins as input (Enc1 pins 0-2, Enc2, pins 3-5)
     df4:	e0 e6       	ldi	r30, 0x60	; 96
     df6:	f6 e0       	ldi	r31, 0x06	; 6
     df8:	8b e1       	ldi	r24, 0x1B	; 27
     dfa:	82 83       	std	Z+2, r24	; 0x02
	PORTD.PIN0CTRL |= PORT_ISC_LEVEL_gc;		//set Pin 0 to low level sensing (encoder 1 phase A)
     dfc:	80 89       	ldd	r24, Z+16	; 0x10
     dfe:	83 60       	ori	r24, 0x03	; 3
     e00:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN1CTRL |= PORT_ISC_LEVEL_gc;		//set Pin 1 to low level sensing (encoder 1 phase B)
     e02:	81 89       	ldd	r24, Z+17	; 0x11
     e04:	83 60       	ori	r24, 0x03	; 3
     e06:	81 8b       	std	Z+17, r24	; 0x11
	PORTD.PIN3CTRL |= PORT_ISC_LEVEL_gc;		//set Pin 3 to low level sensing (encoder 2 phase A)
     e08:	83 89       	ldd	r24, Z+19	; 0x13
     e0a:	83 60       	ori	r24, 0x03	; 3
     e0c:	83 8b       	std	Z+19, r24	; 0x13
	PORTD.PIN4CTRL |= PORT_ISC_LEVEL_gc;		//set Pin 4 to low level sensing (encoder 2 phase B)
     e0e:	84 89       	ldd	r24, Z+20	; 0x14
     e10:	83 60       	ori	r24, 0x03	; 3
     e12:	84 8b       	std	Z+20, r24	; 0x14

	//setup event system
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTD_PIN0_gc;	//route PIND0 (encoder 1 phase A) to Event channel 0
     e14:	e0 e8       	ldi	r30, 0x80	; 128
     e16:	f1 e0       	ldi	r31, 0x01	; 1
     e18:	88 e6       	ldi	r24, 0x68	; 104
     e1a:	80 83       	st	Z, r24
	EVSYS.CH2MUX = EVSYS_CHMUX_PORTD_PIN3_gc;	//route PIND3 (encoder 2 phase A) to Event channel 2
     e1c:	8b e6       	ldi	r24, 0x6B	; 107
     e1e:	82 83       	std	Z+2, r24	; 0x02
	EVSYS.CH0CTRL |= EVSYS_QDEN_bm 				//enable quadrature decode for encoder 1
     e20:	80 85       	ldd	r24, Z+8	; 0x08
     e22:	89 60       	ori	r24, 0x09	; 9
     e24:	80 87       	std	Z+8, r24	; 0x08
	| EVSYS_DIGFILT_2SAMPLES_gc;				//set digital filter to 2 samples for encoder 1
	EVSYS.CH2CTRL |= EVSYS_QDEN_bm				//enable quadrature decode for encoder 2
     e26:	82 85       	ldd	r24, Z+10	; 0x0a
     e28:	89 60       	ori	r24, 0x09	; 9
     e2a:	82 87       	std	Z+10, r24	; 0x0a
	| EVSYS_DIGFILT_2SAMPLES_gc;				//set digital filter to 2 samples for encoder 2

	//setup timer for encoder 1
	TCD1.CTRLA |= TC_CLKSEL_DIV1_gc;			//enables timer type 1 on Port D, at peripheral clock speed
     e2c:	e0 e4       	ldi	r30, 0x40	; 64
     e2e:	f9 e0       	ldi	r31, 0x09	; 9
     e30:	80 81       	ld	r24, Z
     e32:	81 60       	ori	r24, 0x01	; 1
     e34:	80 83       	st	Z, r24
	TCD1.CTRLD |= TC_EVACT_QDEC_gc				//set event action of timer to quadrature decode
     e36:	83 81       	ldd	r24, Z+3	; 0x03
     e38:	88 66       	ori	r24, 0x68	; 104
     e3a:	83 83       	std	Z+3, r24	; 0x03
	| TC_EVSEL_CH0_gc;							//set EVCH0 as source (encoder 1)
	TCD1.PER = 8191;							//set period based on: (((pulses/rev)*1/1)*4 - 1) of WHEEL (This CUI encoder has 2048 pulses/rev, at 1:1 (gear out/gear in) scale for output shaft of Tiff's motor - mounted after gear box)
     e3c:	8f ef       	ldi	r24, 0xFF	; 255
     e3e:	9f e1       	ldi	r25, 0x1F	; 31
     e40:	86 a3       	std	Z+38, r24	; 0x26
     e42:	97 a3       	std	Z+39, r25	; 0x27
	TCD1.INTCTRLA |= TC_OVFINTLVL_MED_gc;		//set priority of timer overflow interrupt to medium
     e44:	26 81       	ldd	r18, Z+6	; 0x06
     e46:	22 60       	ori	r18, 0x02	; 2
     e48:	26 83       	std	Z+6, r18	; 0x06

	//setup timer for encoder 2
	TCE1.CTRLA |= TC_CLKSEL_DIV1_gc;			//enables timer type 1 on Port E, at peripheral clock speed
     e4a:	e0 e4       	ldi	r30, 0x40	; 64
     e4c:	fa e0       	ldi	r31, 0x0A	; 10
     e4e:	20 81       	ld	r18, Z
     e50:	21 60       	ori	r18, 0x01	; 1
     e52:	20 83       	st	Z, r18
	TCE1.CTRLD |= TC_EVACT_QDEC_gc				//set event action of timer to quadrature decode
     e54:	23 81       	ldd	r18, Z+3	; 0x03
     e56:	2a 66       	ori	r18, 0x6A	; 106
     e58:	23 83       	std	Z+3, r18	; 0x03
	| TC_EVSEL_CH2_gc;							//set EVCH2 as source (encoder 2)
	TCE1.PER = 8191;
     e5a:	86 a3       	std	Z+38, r24	; 0x26
     e5c:	97 a3       	std	Z+39, r25	; 0x27
	TCE1.INTCTRLA |= TC_OVFINTLVL_MED_gc;
     e5e:	86 81       	ldd	r24, Z+6	; 0x06
     e60:	82 60       	ori	r24, 0x02	; 2
     e62:	86 83       	std	Z+6, r24	; 0x06
     e64:	08 95       	ret

00000e66 <spi_init>:
}

void spi_init()
{
	//SPI Slave configuration on Port C
	PORTC.DIRSET = PIN6_bm;  	// Set Output Port for the SPI Interface (MISO (O), others input by default)
     e66:	e0 e4       	ldi	r30, 0x40	; 64
     e68:	f6 e0       	ldi	r31, 0x06	; 6
     e6a:	80 e4       	ldi	r24, 0x40	; 64
     e6c:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTCLR = PIN6_bm;		//Set MISO low
     e6e:	86 83       	std	Z+6, r24	; 0x06
	PORTC.PIN4CTRL = PORT_OPC_PULLUP_gc;	//Pull up chip select pin
     e70:	88 e1       	ldi	r24, 0x18	; 24
     e72:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_PULLDOWN_gc;	//Pull down MOSI
     e74:	80 e1       	ldi	r24, 0x10	; 16
     e76:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN7CTRL = PORT_OPC_PULLDOWN_gc;	//Pull down Clock
     e78:	87 8b       	std	Z+23, r24	; 0x17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e7a:	2f ef       	ldi	r18, 0xFF	; 255
     e7c:	87 e8       	ldi	r24, 0x87	; 135
     e7e:	93 e1       	ldi	r25, 0x13	; 19
     e80:	21 50       	subi	r18, 0x01	; 1
     e82:	80 40       	sbci	r24, 0x00	; 0
     e84:	90 40       	sbci	r25, 0x00	; 0
     e86:	e1 f7       	brne	.-8      	; 0xe80 <spi_init+0x1a>
     e88:	00 c0       	rjmp	.+0      	; 0xe8a <spi_init+0x24>
     e8a:	00 00       	nop
	_delay_ms(200);
	SPIC.CTRL = 0x40;          // spi slave, spi mode 0
     e8c:	e0 ec       	ldi	r30, 0xC0	; 192
     e8e:	f8 e0       	ldi	r31, 0x08	; 8
     e90:	80 e4       	ldi	r24, 0x40	; 64
     e92:	80 83       	st	Z, r24
	PORTA.DIRSET = PIN3_bm|PIN4_bm;		//Set output ports for manual data ready pin to Master
     e94:	a0 e0       	ldi	r26, 0x00	; 0
     e96:	b6 e0       	ldi	r27, 0x06	; 6
     e98:	88 e1       	ldi	r24, 0x18	; 24
     e9a:	11 96       	adiw	r26, 0x01	; 1
     e9c:	8c 93       	st	X, r24
     e9e:	11 97       	sbiw	r26, 0x01	; 1
	PORTA.OUTSET = PIN3_bm|PIN4_bm;		//Set data ready pins high to signal Master not to send data
     ea0:	15 96       	adiw	r26, 0x05	; 5
     ea2:	8c 93       	st	X, r24

	/* Flush slave receive buffer */
	while(SPIC.STATUS & SPI_IF_bm)
     ea4:	82 81       	ldd	r24, Z+2	; 0x02
     ea6:	88 23       	and	r24, r24
     ea8:	34 f4       	brge	.+12     	; 0xeb6 <spi_init+0x50>
	{
		slaveReadhighByte = SPIC.DATA;   // flush spi receive buffer
     eaa:	83 81       	ldd	r24, Z+3	; 0x03
     eac:	80 93 e6 20 	sts	0x20E6, r24
	SPIC.CTRL = 0x40;          // spi slave, spi mode 0
	PORTA.DIRSET = PIN3_bm|PIN4_bm;		//Set output ports for manual data ready pin to Master
	PORTA.OUTSET = PIN3_bm|PIN4_bm;		//Set data ready pins high to signal Master not to send data

	/* Flush slave receive buffer */
	while(SPIC.STATUS & SPI_IF_bm)
     eb0:	82 81       	ldd	r24, Z+2	; 0x02
     eb2:	88 23       	and	r24, r24
     eb4:	d4 f3       	brlt	.-12     	; 0xeaa <spi_init+0x44>
	{
		slaveReadhighByte = SPIC.DATA;   // flush spi receive buffer
	}
	slaveReadhighByte = 0;
     eb6:	10 92 e6 20 	sts	0x20E6, r1
     eba:	08 95       	ret

00000ebc <main>:
#define STEP 1
#define OSCILLATION 0

int main (void)
{
	clk_init();     // Initialize the system clock to 32 MHz
     ebc:	59 df       	rcall	.-334    	; 0xd70 <clk_init>
     ebe:	2f ef       	ldi	r18, 0xFF	; 255
     ec0:	37 e8       	ldi	r19, 0x87	; 135
     ec2:	83 e1       	ldi	r24, 0x13	; 19
     ec4:	21 50       	subi	r18, 0x01	; 1
     ec6:	30 40       	sbci	r19, 0x00	; 0
     ec8:	80 40       	sbci	r24, 0x00	; 0
     eca:	e1 f7       	brne	.-8      	; 0xec4 <main+0x8>
     ecc:	00 c0       	rjmp	.+0      	; 0xece <main+0x12>
     ece:	00 00       	nop
	_delay_ms(200);	// Delay is necessary to let the clock stabilize, otherwise encoder offset problem occurs
	
	//USART setup
	usart_init(); //Initialize serial output
     ed0:	6a df       	rcall	.-300    	; 0xda6 <usart_init>
	stdout = &usart_output;	//required for fprint
     ed2:	8a e0       	ldi	r24, 0x0A	; 10
     ed4:	90 e2       	ldi	r25, 0x20	; 32
     ed6:	80 93 fc 20 	sts	0x20FC, r24
     eda:	90 93 fd 20 	sts	0x20FD, r25
	
	//H bridge hardware setup and PWM initialization
	PORTF.DIRSET = PIN2_bm|PIN3_bm;	//set output pins for H bridge communication (Pin 2 = INA ("clockwise" input), Pin 3 = INB ("CCW" input))
     ede:	8c e0       	ldi	r24, 0x0C	; 12
     ee0:	e0 ea       	ldi	r30, 0xA0	; 160
     ee2:	f6 e0       	ldi	r31, 0x06	; 6
     ee4:	81 83       	std	Z+1, r24	; 0x01
	
	pwmtimer_init();	//initialize timer type 1 on Port F pin 4 for PWM signal out
     ee6:	73 df       	rcall	.-282    	; 0xdce <pwmtimer_init>

	PORTA.DIRCLR = PIN5_bm | PIN6_bm | PIN7_bm;	//set input pins for "manual positioning mode" buttons
     ee8:	e0 e0       	ldi	r30, 0x00	; 0
     eea:	f6 e0       	ldi	r31, 0x06	; 6
     eec:	80 ee       	ldi	r24, 0xE0	; 224
     eee:	82 83       	std	Z+2, r24	; 0x02
	PORTA.PIN5CTRL = PORT_OPC_PULLDOWN_gc;	//Use Pull down resistor
     ef0:	80 e1       	ldi	r24, 0x10	; 16
     ef2:	85 8b       	std	Z+21, r24	; 0x15
	PORTA.PIN6CTRL = PORT_OPC_PULLDOWN_gc;
     ef4:	86 8b       	std	Z+22, r24	; 0x16
	PORTA.PIN7CTRL = PORT_OPC_PULLDOWN_gc;
     ef6:	87 8b       	std	Z+23, r24	; 0x17

	//Interrupt timer setup
	Ts = 0.02;
     ef8:	8a e0       	ldi	r24, 0x0A	; 10
     efa:	97 ed       	ldi	r25, 0xD7	; 215
     efc:	a3 ea       	ldi	r26, 0xA3	; 163
     efe:	bc e3       	ldi	r27, 0x3C	; 60
     f00:	80 93 9b 20 	sts	0x209B, r24
     f04:	90 93 9c 20 	sts	0x209C, r25
     f08:	a0 93 9d 20 	sts	0x209D, r26
     f0c:	b0 93 9e 20 	sts	0x209E, r27
	Ts = 1./fs;
     f10:	60 91 00 20 	lds	r22, 0x2000
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	b0 d3       	rcall	.+1888   	; 0x167c <__floatsisf>
     f1c:	9b 01       	movw	r18, r22
     f1e:	ac 01       	movw	r20, r24
     f20:	60 e0       	ldi	r22, 0x00	; 0
     f22:	70 e0       	ldi	r23, 0x00	; 0
     f24:	80 e8       	ldi	r24, 0x80	; 128
     f26:	9f e3       	ldi	r25, 0x3F	; 63
     f28:	0e d3       	rcall	.+1564   	; 0x1546 <__divsf3>
     f2a:	60 93 9b 20 	sts	0x209B, r22
     f2e:	70 93 9c 20 	sts	0x209C, r23
     f32:	80 93 9d 20 	sts	0x209D, r24
     f36:	90 93 9e 20 	sts	0x209E, r25
	topCount = (uint16_t)(Ts*125000.);		//Computed TOP value for TCC1 interrupt timer (500000 for div64, 125000 for div256)
     f3a:	60 91 9b 20 	lds	r22, 0x209B
     f3e:	70 91 9c 20 	lds	r23, 0x209C
     f42:	80 91 9d 20 	lds	r24, 0x209D
     f46:	90 91 9e 20 	lds	r25, 0x209E
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	34 e2       	ldi	r19, 0x24	; 36
     f4e:	44 ef       	ldi	r20, 0xF4	; 244
     f50:	57 e4       	ldi	r21, 0x47	; 71
     f52:	9b d4       	rcall	.+2358   	; 0x188a <__mulsf3>
     f54:	65 d3       	rcall	.+1738   	; 0x1620 <__fixunssfsi>
     f56:	60 93 e0 20 	sts	0x20E0, r22
     f5a:	70 93 e1 20 	sts	0x20E1, r23
	timer_init(topCount);
     f5e:	80 91 e0 20 	lds	r24, 0x20E0
     f62:	90 91 e1 20 	lds	r25, 0x20E1
     f66:	12 df       	rcall	.-476    	; 0xd8c <timer_init>

	//Enter manual positioning mode, flip switch when done with manual positioning
	while(!(PORTA.IN & PIN7_bm))
     f68:	c0 e0       	ldi	r28, 0x00	; 0
     f6a:	d6 e0       	ldi	r29, 0x06	; 6
     f6c:	16 c0       	rjmp	.+44     	; 0xf9a <main+0xde>
	{
		if(PORTA.IN & PIN6_bm)
     f6e:	88 85       	ldd	r24, Y+8	; 0x08
     f70:	86 ff       	sbrs	r24, 6
     f72:	06 c0       	rjmp	.+12     	; 0xf80 <main+0xc4>
		{
			pwmtoMotor1(3);
     f74:	60 e0       	ldi	r22, 0x00	; 0
     f76:	70 e0       	ldi	r23, 0x00	; 0
     f78:	80 e4       	ldi	r24, 0x40	; 64
     f7a:	90 e4       	ldi	r25, 0x40	; 64
     f7c:	06 da       	rcall	.-3060   	; 0x38a <pwmtoMotor1>
     f7e:	0d c0       	rjmp	.+26     	; 0xf9a <main+0xde>
		}
		else if(PORTA.IN & PIN5_bm)
     f80:	88 85       	ldd	r24, Y+8	; 0x08
     f82:	85 ff       	sbrs	r24, 5
     f84:	06 c0       	rjmp	.+12     	; 0xf92 <main+0xd6>
		{
			pwmtoMotor1(-3);
     f86:	60 e0       	ldi	r22, 0x00	; 0
     f88:	70 e0       	ldi	r23, 0x00	; 0
     f8a:	80 e4       	ldi	r24, 0x40	; 64
     f8c:	90 ec       	ldi	r25, 0xC0	; 192
     f8e:	fd d9       	rcall	.-3078   	; 0x38a <pwmtoMotor1>
     f90:	04 c0       	rjmp	.+8      	; 0xf9a <main+0xde>
		}
		else
		{
			pwmtoMotor1(0);
     f92:	60 e0       	ldi	r22, 0x00	; 0
     f94:	70 e0       	ldi	r23, 0x00	; 0
     f96:	cb 01       	movw	r24, r22
     f98:	f8 d9       	rcall	.-3088   	; 0x38a <pwmtoMotor1>
	Ts = 1./fs;
	topCount = (uint16_t)(Ts*125000.);		//Computed TOP value for TCC1 interrupt timer (500000 for div64, 125000 for div256)
	timer_init(topCount);

	//Enter manual positioning mode, flip switch when done with manual positioning
	while(!(PORTA.IN & PIN7_bm))
     f9a:	88 85       	ldd	r24, Y+8	; 0x08
     f9c:	88 23       	and	r24, r24
     f9e:	3c f7       	brge	.-50     	; 0xf6e <main+0xb2>
		{
			pwmtoMotor1(0);
		}
	}

	spi_init();
     fa0:	62 df       	rcall	.-316    	; 0xe66 <spi_init>

	//16-bit SPI: transfer command bytes from Raspberry Pi
	for(int ii = 0; ii < 7; ii++)
     fa2:	e1 2c       	mov	r14, r1
     fa4:	f1 2c       	mov	r15, r1
			}

			Ts = 1./fs;
			fslowbyte = fs;		//load sample frequency into fs lowbyte

			SPIC.DATA = fshighbyte;
     fa6:	c0 ec       	ldi	r28, 0xC0	; 192
     fa8:	d8 e0       	ldi	r29, 0x08	; 8
			PORTA.OUTCLR = PIN3_bm;		//signal RPi that data is ready on first data ready pin
     faa:	00 e0       	ldi	r16, 0x00	; 0
     fac:	16 e0       	ldi	r17, 0x06	; 6
     fae:	68 94       	set
     fb0:	dd 24       	eor	r13, r13
     fb2:	d3 f8       	bld	r13, 3
		}
		else
		{
			if((inputMode == OSCILLATION) & (frequencyMotor1 <= 0.3))
			{
				fs = 20;		//sample frequency in Hz for high friction low frequency band
     fb4:	0f 2e       	mov	r0, r31
     fb6:	f4 e1       	ldi	r31, 0x14	; 20
     fb8:	cf 2e       	mov	r12, r31
     fba:	f0 2d       	mov	r31, r0
	spi_init();

	//16-bit SPI: transfer command bytes from Raspberry Pi
	for(int ii = 0; ii < 7; ii++)
	{
		if(ii < 6)
     fbc:	96 e0       	ldi	r25, 0x06	; 6
     fbe:	e9 16       	cp	r14, r25
     fc0:	f1 04       	cpc	r15, r1
     fc2:	9c f4       	brge	.+38     	; 0xfea <main+0x12e>
		{
			SPIC.DATA = 0;
     fc4:	1b 82       	std	Y+3, r1	; 0x03
			PORTA.OUTCLR = PIN3_bm;		//signal RPi that data is ready on first data ready pin
     fc6:	f8 01       	movw	r30, r16
     fc8:	d6 82       	std	Z+6, r13	; 0x06

			while(!(SPIC.STATUS & SPI_IF_bm));	//wait until data tx from Rpi is done and flag is set
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	88 23       	and	r24, r24
     fce:	ec f7       	brge	.-6      	; 0xfca <main+0x10e>
			PORTA.OUTSET = PIN3_bm;				//set data ready pin high
     fd0:	f8 01       	movw	r30, r16
     fd2:	d5 82       	std	Z+5, r13	; 0x05
			slaveReadhighByte = SPIC.DATA;		//Grab byte received from Master
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
     fd6:	80 93 e6 20 	sts	0x20E6, r24
			SPIC.DATA = 0;						//Send zero low byte to Master
     fda:	1b 82       	std	Y+3, r1	; 0x03

			while(!(SPIC.STATUS & SPI_IF_bm)); //wait until data tx from BB is done and flag is set
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	88 23       	and	r24, r24
     fe0:	ec f7       	brge	.-6      	; 0xfdc <main+0x120>
			slaveReadlowByte = SPIC.DATA; //Grab byte received from Master
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	80 93 b5 20 	sts	0x20B5, r24
     fe8:	4b c0       	rjmp	.+150    	; 0x1080 <main+0x1c4>
		}
		else
		{
			if((inputMode == OSCILLATION) & (frequencyMotor1 <= 0.3))
     fea:	a0 90 85 20 	lds	r10, 0x2085
     fee:	60 91 8c 20 	lds	r22, 0x208C
     ff2:	70 91 8d 20 	lds	r23, 0x208D
     ff6:	80 91 8e 20 	lds	r24, 0x208E
     ffa:	90 91 8f 20 	lds	r25, 0x208F
     ffe:	bb 24       	eor	r11, r11
    1000:	b3 94       	inc	r11
    1002:	2a e9       	ldi	r18, 0x9A	; 154
    1004:	39 e9       	ldi	r19, 0x99	; 153
    1006:	49 e9       	ldi	r20, 0x99	; 153
    1008:	5e e3       	ldi	r21, 0x3E	; 62
    100a:	99 d2       	rcall	.+1330   	; 0x153e <__cmpsf2>
    100c:	18 16       	cp	r1, r24
    100e:	0c f4       	brge	.+2      	; 0x1012 <main+0x156>
    1010:	b1 2c       	mov	r11, r1
    1012:	bb 20       	and	r11, r11
    1014:	31 f0       	breq	.+12     	; 0x1022 <main+0x166>
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	a1 10       	cpse	r10, r1
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	81 11       	cpse	r24, r1
			{
				fs = 20;		//sample frequency in Hz for high friction low frequency band
    101e:	c0 92 00 20 	sts	0x2000, r12
			}

			Ts = 1./fs;
    1022:	60 91 00 20 	lds	r22, 0x2000
    1026:	70 e0       	ldi	r23, 0x00	; 0
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	27 d3       	rcall	.+1614   	; 0x167c <__floatsisf>
    102e:	9b 01       	movw	r18, r22
    1030:	ac 01       	movw	r20, r24
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	80 e8       	ldi	r24, 0x80	; 128
    1038:	9f e3       	ldi	r25, 0x3F	; 63
    103a:	85 d2       	rcall	.+1290   	; 0x1546 <__divsf3>
    103c:	60 93 9b 20 	sts	0x209B, r22
    1040:	70 93 9c 20 	sts	0x209C, r23
    1044:	80 93 9d 20 	sts	0x209D, r24
    1048:	90 93 9e 20 	sts	0x209E, r25
			fslowbyte = fs;		//load sample frequency into fs lowbyte
    104c:	80 91 00 20 	lds	r24, 0x2000
    1050:	80 93 f3 20 	sts	0x20F3, r24

			SPIC.DATA = fshighbyte;
    1054:	80 91 05 20 	lds	r24, 0x2005
    1058:	8b 83       	std	Y+3, r24	; 0x03
			PORTA.OUTCLR = PIN3_bm;		//signal RPi that data is ready on first data ready pin
    105a:	f8 01       	movw	r30, r16
    105c:	d6 82       	std	Z+6, r13	; 0x06

			while(!(SPIC.STATUS & SPI_IF_bm));	//wait until data tx from Rpi is done and flag is set
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	88 23       	and	r24, r24
    1062:	ec f7       	brge	.-6      	; 0x105e <main+0x1a2>
			PORTA.OUTSET = PIN3_bm;				//set data ready pin high
    1064:	f8 01       	movw	r30, r16
    1066:	d5 82       	std	Z+5, r13	; 0x05
			slaveReadhighByte = SPIC.DATA;		//Grab byte received from Master
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	80 93 e6 20 	sts	0x20E6, r24
			SPIC.DATA = fslowbyte;				//Send zero low byte to Master
    106e:	80 91 f3 20 	lds	r24, 0x20F3
    1072:	8b 83       	std	Y+3, r24	; 0x03

			while(!(SPIC.STATUS & SPI_IF_bm)); //wait until data tx from BB is done and flag is set
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	88 23       	and	r24, r24
    1078:	ec f7       	brge	.-6      	; 0x1074 <main+0x1b8>
			slaveReadlowByte = SPIC.DATA; //Grab byte received from Master
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	80 93 b5 20 	sts	0x20B5, r24
		}

		//slaveRead = ((slaveReadhighByte & 0x00ff) << 8) | slaveReadlowByte; //Combine two bytes into 16 bit number

		if(slaveReadhighByte == 0b00000001)	//store inputs (slaveReadlowByte) from RPi into appropriate variables according to command bits (slaveReadhighByte)
    1080:	80 91 e6 20 	lds	r24, 0x20E6
    1084:	81 30       	cpi	r24, 0x01	; 1
    1086:	c1 f4       	brne	.+48     	; 0x10b8 <main+0x1fc>
		{
			amplitudeMotor1_input = slaveReadlowByte;
    1088:	80 91 b5 20 	lds	r24, 0x20B5
    108c:	80 93 9a 20 	sts	0x209A, r24
			amplitudeMotor1 = amplitudeMotor1_input/10.0;
    1090:	60 91 9a 20 	lds	r22, 0x209A
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	f0 d2       	rcall	.+1504   	; 0x167c <__floatsisf>
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	40 e2       	ldi	r20, 0x20	; 32
    10a2:	51 e4       	ldi	r21, 0x41	; 65
    10a4:	50 d2       	rcall	.+1184   	; 0x1546 <__divsf3>
    10a6:	60 93 96 20 	sts	0x2096, r22
    10aa:	70 93 97 20 	sts	0x2097, r23
    10ae:	80 93 98 20 	sts	0x2098, r24
    10b2:	90 93 99 20 	sts	0x2099, r25
    10b6:	6a c0       	rjmp	.+212    	; 0x118c <main+0x2d0>
			//printf("amplitudeMotor1 = %f \n",amplitudeMotor1);
		}
		else if(slaveReadhighByte == 0b00000010)
    10b8:	80 91 e6 20 	lds	r24, 0x20E6
    10bc:	82 30       	cpi	r24, 0x02	; 2
    10be:	c1 f4       	brne	.+48     	; 0x10f0 <main+0x234>
		{
			amplitudeMotor2_input = slaveReadlowByte;
    10c0:	80 91 b5 20 	lds	r24, 0x20B5
    10c4:	80 93 95 20 	sts	0x2095, r24
			amplitudeMotor2 = amplitudeMotor2_input/10.0;
    10c8:	60 91 95 20 	lds	r22, 0x2095
    10cc:	70 e0       	ldi	r23, 0x00	; 0
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	d4 d2       	rcall	.+1448   	; 0x167c <__floatsisf>
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	40 e2       	ldi	r20, 0x20	; 32
    10da:	51 e4       	ldi	r21, 0x41	; 65
    10dc:	34 d2       	rcall	.+1128   	; 0x1546 <__divsf3>
    10de:	60 93 91 20 	sts	0x2091, r22
    10e2:	70 93 92 20 	sts	0x2092, r23
    10e6:	80 93 93 20 	sts	0x2093, r24
    10ea:	90 93 94 20 	sts	0x2094, r25
    10ee:	4e c0       	rjmp	.+156    	; 0x118c <main+0x2d0>
		}
		else if(slaveReadhighByte == 0b00000011)
    10f0:	80 91 e6 20 	lds	r24, 0x20E6
    10f4:	83 30       	cpi	r24, 0x03	; 3
    10f6:	c1 f4       	brne	.+48     	; 0x1128 <main+0x26c>
		{
			frequencyMotor1_input = slaveReadlowByte;
    10f8:	80 91 b5 20 	lds	r24, 0x20B5
    10fc:	80 93 90 20 	sts	0x2090, r24
			frequencyMotor1 = frequencyMotor1_input/10.0;
    1100:	60 91 90 20 	lds	r22, 0x2090
    1104:	70 e0       	ldi	r23, 0x00	; 0
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	b8 d2       	rcall	.+1392   	; 0x167c <__floatsisf>
    110c:	20 e0       	ldi	r18, 0x00	; 0
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	40 e2       	ldi	r20, 0x20	; 32
    1112:	51 e4       	ldi	r21, 0x41	; 65
    1114:	18 d2       	rcall	.+1072   	; 0x1546 <__divsf3>
    1116:	60 93 8c 20 	sts	0x208C, r22
    111a:	70 93 8d 20 	sts	0x208D, r23
    111e:	80 93 8e 20 	sts	0x208E, r24
    1122:	90 93 8f 20 	sts	0x208F, r25
    1126:	32 c0       	rjmp	.+100    	; 0x118c <main+0x2d0>
		}
		else if(slaveReadhighByte == 0b00000100)
    1128:	80 91 e6 20 	lds	r24, 0x20E6
    112c:	84 30       	cpi	r24, 0x04	; 4
    112e:	c1 f4       	brne	.+48     	; 0x1160 <main+0x2a4>
		{
			frequencyMotor2_input = slaveReadlowByte;
    1130:	80 91 b5 20 	lds	r24, 0x20B5
    1134:	80 93 8b 20 	sts	0x208B, r24
			frequencyMotor2 = frequencyMotor2_input/10.0;
    1138:	60 91 8b 20 	lds	r22, 0x208B
    113c:	70 e0       	ldi	r23, 0x00	; 0
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	9c d2       	rcall	.+1336   	; 0x167c <__floatsisf>
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	40 e2       	ldi	r20, 0x20	; 32
    114a:	51 e4       	ldi	r21, 0x41	; 65
    114c:	fc d1       	rcall	.+1016   	; 0x1546 <__divsf3>
    114e:	60 93 87 20 	sts	0x2087, r22
    1152:	70 93 88 20 	sts	0x2088, r23
    1156:	80 93 89 20 	sts	0x2089, r24
    115a:	90 93 8a 20 	sts	0x208A, r25
    115e:	16 c0       	rjmp	.+44     	; 0x118c <main+0x2d0>
		}
		else if(slaveReadhighByte == 0b00000101)
    1160:	80 91 e6 20 	lds	r24, 0x20E6
    1164:	85 30       	cpi	r24, 0x05	; 5
    1166:	29 f4       	brne	.+10     	; 0x1172 <main+0x2b6>
		{
			numberofCycles = slaveReadlowByte;	//do we need this for each motor?
    1168:	80 91 b5 20 	lds	r24, 0x20B5
    116c:	80 93 86 20 	sts	0x2086, r24
    1170:	0d c0       	rjmp	.+26     	; 0x118c <main+0x2d0>
		}
		else if(slaveReadhighByte == 0b00000110)
    1172:	80 91 e6 20 	lds	r24, 0x20E6
    1176:	86 30       	cpi	r24, 0x06	; 6
    1178:	29 f4       	brne	.+10     	; 0x1184 <main+0x2c8>
		{
			inputMode = slaveReadlowByte;		//input mode refers to oscillatory or step input, once enabled
    117a:	80 91 b5 20 	lds	r24, 0x20B5
    117e:	80 93 85 20 	sts	0x2085, r24
    1182:	04 c0       	rjmp	.+8      	; 0x118c <main+0x2d0>
		}
		else
		{
			slaveReadhighByte = 0;
    1184:	10 92 e6 20 	sts	0x20E6, r1
			slaveReadlowByte = 0;
    1188:	10 92 b5 20 	sts	0x20B5, r1
	}

	spi_init();

	//16-bit SPI: transfer command bytes from Raspberry Pi
	for(int ii = 0; ii < 7; ii++)
    118c:	ff ef       	ldi	r31, 0xFF	; 255
    118e:	ef 1a       	sub	r14, r31
    1190:	ff 0a       	sbc	r15, r31
    1192:	27 e0       	ldi	r18, 0x07	; 7
    1194:	e2 16       	cp	r14, r18
    1196:	f1 04       	cpc	r15, r1
    1198:	09 f0       	breq	.+2      	; 0x119c <main+0x2e0>
    119a:	10 cf       	rjmp	.-480    	; 0xfbc <main+0x100>

		//printf("numLoop = %f \t\t commandByte = %u \t\t valueByte = %u \t ii = %i \n", numberLoop_flt, slaveReadhighByte, slaveReadlowByte, ii);
		
	}

	if((inputMode == OSCILLATION) & (frequencyMotor1 <= 0.3))
    119c:	d0 91 85 20 	lds	r29, 0x2085
    11a0:	60 91 8c 20 	lds	r22, 0x208C
    11a4:	70 91 8d 20 	lds	r23, 0x208D
    11a8:	80 91 8e 20 	lds	r24, 0x208E
    11ac:	90 91 8f 20 	lds	r25, 0x208F
    11b0:	c1 e0       	ldi	r28, 0x01	; 1
    11b2:	2a e9       	ldi	r18, 0x9A	; 154
    11b4:	39 e9       	ldi	r19, 0x99	; 153
    11b6:	49 e9       	ldi	r20, 0x99	; 153
    11b8:	5e e3       	ldi	r21, 0x3E	; 62
    11ba:	c1 d1       	rcall	.+898    	; 0x153e <__cmpsf2>
    11bc:	18 16       	cp	r1, r24
    11be:	0c f4       	brge	.+2      	; 0x11c2 <main+0x306>
    11c0:	c0 e0       	ldi	r28, 0x00	; 0
    11c2:	cc 23       	and	r28, r28
    11c4:	91 f0       	breq	.+36     	; 0x11ea <main+0x32e>
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	d1 11       	cpse	r29, r1
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	88 23       	and	r24, r24
    11ce:	69 f0       	breq	.+26     	; 0x11ea <main+0x32e>
	{
		Kp = 2.0;
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	a0 e0       	ldi	r26, 0x00	; 0
    11d6:	b0 e4       	ldi	r27, 0x40	; 64
    11d8:	80 93 9f 20 	sts	0x209F, r24
    11dc:	90 93 a0 20 	sts	0x20A0, r25
    11e0:	a0 93 a1 20 	sts	0x20A1, r26
    11e4:	b0 93 a2 20 	sts	0x20A2, r27
    11e8:	0c c0       	rjmp	.+24     	; 0x1202 <main+0x346>
	}
	else
	{
		Kp = 1.0;
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	a0 e8       	ldi	r26, 0x80	; 128
    11f0:	bf e3       	ldi	r27, 0x3F	; 63
    11f2:	80 93 9f 20 	sts	0x209F, r24
    11f6:	90 93 a0 20 	sts	0x20A0, r25
    11fa:	a0 93 a1 20 	sts	0x20A1, r26
    11fe:	b0 93 a2 20 	sts	0x20A2, r27
	}

	printf("A1 = %f \t A2 = %f \t f1 = %f \t f2 = %f \t nC = %u \t iM = %u Kp = %f \n", amplitudeMotor1,amplitudeMotor2,frequencyMotor1,frequencyMotor2,numberofCycles,inputMode,Kp);
    1202:	80 90 9f 20 	lds	r8, 0x209F
    1206:	90 90 a0 20 	lds	r9, 0x20A0
    120a:	a0 90 a1 20 	lds	r10, 0x20A1
    120e:	b0 90 a2 20 	lds	r11, 0x20A2
    1212:	f0 91 85 20 	lds	r31, 0x2085
    1216:	e0 91 86 20 	lds	r30, 0x2086
    121a:	c0 90 87 20 	lds	r12, 0x2087
    121e:	d0 90 88 20 	lds	r13, 0x2088
    1222:	e0 90 89 20 	lds	r14, 0x2089
    1226:	f0 90 8a 20 	lds	r15, 0x208A
    122a:	00 91 8c 20 	lds	r16, 0x208C
    122e:	10 91 8d 20 	lds	r17, 0x208D
    1232:	20 91 8e 20 	lds	r18, 0x208E
    1236:	30 91 8f 20 	lds	r19, 0x208F
    123a:	40 91 91 20 	lds	r20, 0x2091
    123e:	50 91 92 20 	lds	r21, 0x2092
    1242:	60 91 93 20 	lds	r22, 0x2093
    1246:	70 91 94 20 	lds	r23, 0x2094
    124a:	80 91 96 20 	lds	r24, 0x2096
    124e:	90 91 97 20 	lds	r25, 0x2097
    1252:	a0 91 98 20 	lds	r26, 0x2098
    1256:	b0 91 99 20 	lds	r27, 0x2099
    125a:	bf 92       	push	r11
    125c:	af 92       	push	r10
    125e:	9f 92       	push	r9
    1260:	8f 92       	push	r8
    1262:	1f 92       	push	r1
    1264:	ff 93       	push	r31
    1266:	1f 92       	push	r1
    1268:	ef 93       	push	r30
    126a:	ff 92       	push	r15
    126c:	ef 92       	push	r14
    126e:	df 92       	push	r13
    1270:	cf 92       	push	r12
    1272:	3f 93       	push	r19
    1274:	2f 93       	push	r18
    1276:	1f 93       	push	r17
    1278:	0f 93       	push	r16
    127a:	7f 93       	push	r23
    127c:	6f 93       	push	r22
    127e:	5f 93       	push	r21
    1280:	4f 93       	push	r20
    1282:	bf 93       	push	r27
    1284:	af 93       	push	r26
    1286:	9f 93       	push	r25
    1288:	8f 93       	push	r24
    128a:	88 e1       	ldi	r24, 0x18	; 24
    128c:	90 e2       	ldi	r25, 0x20	; 32
    128e:	9f 93       	push	r25
    1290:	8f 93       	push	r24
    1292:	0e 94 be 11 	call	0x237c	; 0x237c <printf>

	//Ts = 1./fs;
	topCount = (uint16_t)(Ts*125000.);		//Computed TOP value for TCC1 interrupt timer (500000 for div64, 125000 for div256)
    1296:	60 91 9b 20 	lds	r22, 0x209B
    129a:	70 91 9c 20 	lds	r23, 0x209C
    129e:	80 91 9d 20 	lds	r24, 0x209D
    12a2:	90 91 9e 20 	lds	r25, 0x209E
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	34 e2       	ldi	r19, 0x24	; 36
    12aa:	44 ef       	ldi	r20, 0xF4	; 244
    12ac:	57 e4       	ldi	r21, 0x47	; 71
    12ae:	ed d2       	rcall	.+1498   	; 0x188a <__mulsf3>
    12b0:	b7 d1       	rcall	.+878    	; 0x1620 <__fixunssfsi>
    12b2:	60 93 e0 20 	sts	0x20E0, r22
    12b6:	70 93 e1 20 	sts	0x20E1, r23
	TCC1.PER = topCount;					//Set Period
    12ba:	80 91 e0 20 	lds	r24, 0x20E0
    12be:	90 91 e1 20 	lds	r25, 0x20E1
    12c2:	e0 e4       	ldi	r30, 0x40	; 64
    12c4:	f8 e0       	ldi	r31, 0x08	; 8
    12c6:	86 a3       	std	Z+38, r24	; 0x26
    12c8:	97 a3       	std	Z+39, r25	; 0x27


	//Set timing pins as output
	PORTD.DIRSET = PIN7_bm;	//set D7 as output for while loop timing pin
    12ca:	e0 e6       	ldi	r30, 0x60	; 96
    12cc:	f6 e0       	ldi	r31, 0x06	; 6
    12ce:	80 e8       	ldi	r24, 0x80	; 128
    12d0:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRSET = PIN6_bm;	//set D6 as output for interrupt timing pin
    12d2:	80 e4       	ldi	r24, 0x40	; 64
    12d4:	81 83       	std	Z+1, r24	; 0x01

	if((inputMode == OSCILLATION) & (frequencyMotor1 != 0))	//Currently only one motor may be active at a time
    12d6:	d0 91 85 20 	lds	r29, 0x2085
    12da:	60 91 8c 20 	lds	r22, 0x208C
    12de:	70 91 8d 20 	lds	r23, 0x208D
    12e2:	80 91 8e 20 	lds	r24, 0x208E
    12e6:	90 91 8f 20 	lds	r25, 0x208F
    12ea:	c1 e0       	ldi	r28, 0x01	; 1
    12ec:	ed b7       	in	r30, 0x3d	; 61
    12ee:	fe b7       	in	r31, 0x3e	; 62
    12f0:	7a 96       	adiw	r30, 0x1a	; 26
    12f2:	ed bf       	out	0x3d, r30	; 61
    12f4:	fe bf       	out	0x3e, r31	; 62
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	a9 01       	movw	r20, r18
    12fc:	20 d1       	rcall	.+576    	; 0x153e <__cmpsf2>
    12fe:	81 11       	cpse	r24, r1
    1300:	01 c0       	rjmp	.+2      	; 0x1304 <main+0x448>
    1302:	c0 e0       	ldi	r28, 0x00	; 0
    1304:	cc 23       	and	r28, r28
    1306:	f9 f0       	breq	.+62     	; 0x1346 <main+0x48a>
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	d1 11       	cpse	r29, r1
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	88 23       	and	r24, r24
    1310:	d1 f0       	breq	.+52     	; 0x1346 <main+0x48a>
	{
		stopTime = numberofCycles/frequencyMotor1;	//Stop time in seconds (based on motor 1 inputs)
    1312:	60 91 86 20 	lds	r22, 0x2086
    1316:	c0 90 8c 20 	lds	r12, 0x208C
    131a:	d0 90 8d 20 	lds	r13, 0x208D
    131e:	e0 90 8e 20 	lds	r14, 0x208E
    1322:	f0 90 8f 20 	lds	r15, 0x208F
    1326:	70 e0       	ldi	r23, 0x00	; 0
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	a7 d1       	rcall	.+846    	; 0x167c <__floatsisf>
    132e:	a7 01       	movw	r20, r14
    1330:	96 01       	movw	r18, r12
    1332:	09 d1       	rcall	.+530    	; 0x1546 <__divsf3>
    1334:	60 93 ef 20 	sts	0x20EF, r22
    1338:	70 93 f0 20 	sts	0x20F0, r23
    133c:	80 93 f1 20 	sts	0x20F1, r24
    1340:	90 93 f2 20 	sts	0x20F2, r25
    1344:	43 c0       	rjmp	.+134    	; 0x13cc <main+0x510>
	}
	else if((inputMode == OSCILLATION) & (frequencyMotor2 != 0))
    1346:	d0 91 85 20 	lds	r29, 0x2085
    134a:	60 91 87 20 	lds	r22, 0x2087
    134e:	70 91 88 20 	lds	r23, 0x2088
    1352:	80 91 89 20 	lds	r24, 0x2089
    1356:	90 91 8a 20 	lds	r25, 0x208A
    135a:	c1 e0       	ldi	r28, 0x01	; 1
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	a9 01       	movw	r20, r18
    1362:	ed d0       	rcall	.+474    	; 0x153e <__cmpsf2>
    1364:	81 11       	cpse	r24, r1
    1366:	01 c0       	rjmp	.+2      	; 0x136a <main+0x4ae>
    1368:	c0 e0       	ldi	r28, 0x00	; 0
    136a:	cc 23       	and	r28, r28
    136c:	f9 f0       	breq	.+62     	; 0x13ac <main+0x4f0>
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	d1 11       	cpse	r29, r1
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	88 23       	and	r24, r24
    1376:	d1 f0       	breq	.+52     	; 0x13ac <main+0x4f0>
	{
		stopTime = numberofCycles/frequencyMotor2;	//Stop time based on motor 2 inputs
    1378:	60 91 86 20 	lds	r22, 0x2086
    137c:	c0 90 87 20 	lds	r12, 0x2087
    1380:	d0 90 88 20 	lds	r13, 0x2088
    1384:	e0 90 89 20 	lds	r14, 0x2089
    1388:	f0 90 8a 20 	lds	r15, 0x208A
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	74 d1       	rcall	.+744    	; 0x167c <__floatsisf>
    1394:	a7 01       	movw	r20, r14
    1396:	96 01       	movw	r18, r12
    1398:	d6 d0       	rcall	.+428    	; 0x1546 <__divsf3>
    139a:	60 93 ef 20 	sts	0x20EF, r22
    139e:	70 93 f0 20 	sts	0x20F0, r23
    13a2:	80 93 f1 20 	sts	0x20F1, r24
    13a6:	90 93 f2 20 	sts	0x20F2, r25
    13aa:	10 c0       	rjmp	.+32     	; 0x13cc <main+0x510>
	}
	else if(inputMode == STEP)
    13ac:	80 91 85 20 	lds	r24, 0x2085
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	61 f4       	brne	.+24     	; 0x13cc <main+0x510>
	{
		stopTime = 3;	//3 second stop time for step inputs, do not switch to auto reset before 3 seconds is reached or software reset will not work
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	a0 e4       	ldi	r26, 0x40	; 64
    13ba:	b0 e4       	ldi	r27, 0x40	; 64
    13bc:	80 93 ef 20 	sts	0x20EF, r24
    13c0:	90 93 f0 20 	sts	0x20F0, r25
    13c4:	a0 93 f1 20 	sts	0x20F1, r26
    13c8:	b0 93 f2 20 	sts	0x20F2, r27
	}

	printf("inputMode = %u \t stopTime = %f \n",inputMode,stopTime);
    13cc:	80 91 ef 20 	lds	r24, 0x20EF
    13d0:	90 91 f0 20 	lds	r25, 0x20F0
    13d4:	a0 91 f1 20 	lds	r26, 0x20F1
    13d8:	b0 91 f2 20 	lds	r27, 0x20F2
    13dc:	20 91 85 20 	lds	r18, 0x2085
    13e0:	bf 93       	push	r27
    13e2:	af 93       	push	r26
    13e4:	9f 93       	push	r25
    13e6:	8f 93       	push	r24
    13e8:	1f 92       	push	r1
    13ea:	2f 93       	push	r18
    13ec:	8c e5       	ldi	r24, 0x5C	; 92
    13ee:	90 e2       	ldi	r25, 0x20	; 32
    13f0:	9f 93       	push	r25
    13f2:	8f 93       	push	r24
    13f4:	c3 d7       	rcall	.+3974   	; 0x237c <printf>

	encoder_init();	//encoder must be initialized AFTER manual mode, otherwise the medium level interrupt misfires and loads a value into revCnt variable causing voltage burst to motor
    13f6:	fe dc       	rcall	.-1540   	; 0xdf4 <encoder_init>

	PMIC.CTRL = PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;	//enable interrupts medium and high levels
    13f8:	87 e0       	ldi	r24, 0x07	; 7
    13fa:	e0 ea       	ldi	r30, 0xA0	; 160
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	82 83       	std	Z+2, r24	; 0x02
	sei();	//enable global interrupts
    1400:	78 94       	sei
    1402:	2d b7       	in	r18, 0x3d	; 61
    1404:	3e b7       	in	r19, 0x3e	; 62
    1406:	28 5f       	subi	r18, 0xF8	; 248
    1408:	3f 4f       	sbci	r19, 0xFF	; 255
    140a:	2d bf       	out	0x3d, r18	; 61
    140c:	3e bf       	out	0x3e, r19	; 62
	
	while(1)
	{
		PORTD.OUTTGL = (1<<7);	//Toggle Pin D7 for oscillator clock timing
    140e:	00 e6       	ldi	r16, 0x60	; 96
    1410:	16 e0       	ldi	r17, 0x06	; 6
    1412:	68 94       	set
    1414:	dd 24       	eor	r13, r13
    1416:	d7 f8       	bld	r13, 7

		if((timeNow >= stopTime) & !(PORTA.IN & PIN7_bm))	//after program is over if manual override switch is turned back to ground, initiate software reset to start of program
    1418:	c0 e0       	ldi	r28, 0x00	; 0
    141a:	d6 e0       	ldi	r29, 0x06	; 6
		{
			cli();						//disable interrupts to prevent interruption
			CCP = 0xD8;					//configuration change protection: allow protected IO register write
    141c:	0f 2e       	mov	r0, r31
    141e:	f8 ed       	ldi	r31, 0xD8	; 216
    1420:	bf 2e       	mov	r11, r31
    1422:	f0 2d       	mov	r31, r0
			RST.CTRL = RST_SWRST_bm;	//software reset at end of program
    1424:	0f 2e       	mov	r0, r31
    1426:	f8 e7       	ldi	r31, 0x78	; 120
    1428:	ef 2e       	mov	r14, r31
    142a:	f1 2c       	mov	r15, r1
    142c:	f0 2d       	mov	r31, r0
	PMIC.CTRL = PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;	//enable interrupts medium and high levels
	sei();	//enable global interrupts
	
	while(1)
	{
		PORTD.OUTTGL = (1<<7);	//Toggle Pin D7 for oscillator clock timing
    142e:	f8 01       	movw	r30, r16
    1430:	d7 82       	std	Z+7, r13	; 0x07

		if((timeNow >= stopTime) & !(PORTA.IN & PIN7_bm))	//after program is over if manual override switch is turned back to ground, initiate software reset to start of program
    1432:	60 91 eb 20 	lds	r22, 0x20EB
    1436:	70 91 ec 20 	lds	r23, 0x20EC
    143a:	80 91 ed 20 	lds	r24, 0x20ED
    143e:	90 91 ee 20 	lds	r25, 0x20EE
    1442:	20 91 ef 20 	lds	r18, 0x20EF
    1446:	30 91 f0 20 	lds	r19, 0x20F0
    144a:	40 91 f1 20 	lds	r20, 0x20F1
    144e:	50 91 f2 20 	lds	r21, 0x20F2
    1452:	e8 85       	ldd	r30, Y+8	; 0x08
    1454:	ee 23       	and	r30, r30
    1456:	5c f3       	brlt	.-42     	; 0x142e <main+0x572>
    1458:	cc 24       	eor	r12, r12
    145a:	c3 94       	inc	r12
    145c:	12 d2       	rcall	.+1060   	; 0x1882 <__gesf2>
    145e:	88 23       	and	r24, r24
    1460:	0c f4       	brge	.+2      	; 0x1464 <main+0x5a8>
    1462:	c1 2c       	mov	r12, r1
    1464:	cc 20       	and	r12, r12
    1466:	19 f3       	breq	.-58     	; 0x142e <main+0x572>
		{
			cli();						//disable interrupts to prevent interruption
    1468:	f8 94       	cli
			CCP = 0xD8;					//configuration change protection: allow protected IO register write
    146a:	b4 be       	out	0x34, r11	; 52
			RST.CTRL = RST_SWRST_bm;	//software reset at end of program
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	f7 01       	movw	r30, r14
    1470:	81 83       	std	Z+1, r24	; 0x01
    1472:	dd cf       	rjmp	.-70     	; 0x142e <main+0x572>

00001474 <__subsf3>:
    1474:	50 58       	subi	r21, 0x80	; 128

00001476 <__addsf3>:
    1476:	bb 27       	eor	r27, r27
    1478:	aa 27       	eor	r26, r26
    147a:	0e d0       	rcall	.+28     	; 0x1498 <__addsf3x>
    147c:	b1 c1       	rjmp	.+866    	; 0x17e0 <__fp_round>
    147e:	a2 d1       	rcall	.+836    	; 0x17c4 <__fp_pscA>
    1480:	30 f0       	brcs	.+12     	; 0x148e <__addsf3+0x18>
    1482:	a7 d1       	rcall	.+846    	; 0x17d2 <__fp_pscB>
    1484:	20 f0       	brcs	.+8      	; 0x148e <__addsf3+0x18>
    1486:	31 f4       	brne	.+12     	; 0x1494 <__addsf3+0x1e>
    1488:	9f 3f       	cpi	r25, 0xFF	; 255
    148a:	11 f4       	brne	.+4      	; 0x1490 <__addsf3+0x1a>
    148c:	1e f4       	brtc	.+6      	; 0x1494 <__addsf3+0x1e>
    148e:	97 c1       	rjmp	.+814    	; 0x17be <__fp_nan>
    1490:	0e f4       	brtc	.+2      	; 0x1494 <__addsf3+0x1e>
    1492:	e0 95       	com	r30
    1494:	e7 fb       	bst	r30, 7
    1496:	64 c1       	rjmp	.+712    	; 0x1760 <__fp_inf>

00001498 <__addsf3x>:
    1498:	e9 2f       	mov	r30, r25
    149a:	b3 d1       	rcall	.+870    	; 0x1802 <__fp_split3>
    149c:	80 f3       	brcs	.-32     	; 0x147e <__addsf3+0x8>
    149e:	ba 17       	cp	r27, r26
    14a0:	62 07       	cpc	r22, r18
    14a2:	73 07       	cpc	r23, r19
    14a4:	84 07       	cpc	r24, r20
    14a6:	95 07       	cpc	r25, r21
    14a8:	18 f0       	brcs	.+6      	; 0x14b0 <__addsf3x+0x18>
    14aa:	71 f4       	brne	.+28     	; 0x14c8 <__addsf3x+0x30>
    14ac:	9e f5       	brtc	.+102    	; 0x1514 <__addsf3x+0x7c>
    14ae:	e2 c1       	rjmp	.+964    	; 0x1874 <__fp_zero>
    14b0:	0e f4       	brtc	.+2      	; 0x14b4 <__addsf3x+0x1c>
    14b2:	e0 95       	com	r30
    14b4:	0b 2e       	mov	r0, r27
    14b6:	ba 2f       	mov	r27, r26
    14b8:	a0 2d       	mov	r26, r0
    14ba:	0b 01       	movw	r0, r22
    14bc:	b9 01       	movw	r22, r18
    14be:	90 01       	movw	r18, r0
    14c0:	0c 01       	movw	r0, r24
    14c2:	ca 01       	movw	r24, r20
    14c4:	a0 01       	movw	r20, r0
    14c6:	11 24       	eor	r1, r1
    14c8:	ff 27       	eor	r31, r31
    14ca:	59 1b       	sub	r21, r25
    14cc:	99 f0       	breq	.+38     	; 0x14f4 <__addsf3x+0x5c>
    14ce:	59 3f       	cpi	r21, 0xF9	; 249
    14d0:	50 f4       	brcc	.+20     	; 0x14e6 <__addsf3x+0x4e>
    14d2:	50 3e       	cpi	r21, 0xE0	; 224
    14d4:	68 f1       	brcs	.+90     	; 0x1530 <__addsf3x+0x98>
    14d6:	1a 16       	cp	r1, r26
    14d8:	f0 40       	sbci	r31, 0x00	; 0
    14da:	a2 2f       	mov	r26, r18
    14dc:	23 2f       	mov	r18, r19
    14de:	34 2f       	mov	r19, r20
    14e0:	44 27       	eor	r20, r20
    14e2:	58 5f       	subi	r21, 0xF8	; 248
    14e4:	f3 cf       	rjmp	.-26     	; 0x14cc <__addsf3x+0x34>
    14e6:	46 95       	lsr	r20
    14e8:	37 95       	ror	r19
    14ea:	27 95       	ror	r18
    14ec:	a7 95       	ror	r26
    14ee:	f0 40       	sbci	r31, 0x00	; 0
    14f0:	53 95       	inc	r21
    14f2:	c9 f7       	brne	.-14     	; 0x14e6 <__addsf3x+0x4e>
    14f4:	7e f4       	brtc	.+30     	; 0x1514 <__addsf3x+0x7c>
    14f6:	1f 16       	cp	r1, r31
    14f8:	ba 0b       	sbc	r27, r26
    14fa:	62 0b       	sbc	r22, r18
    14fc:	73 0b       	sbc	r23, r19
    14fe:	84 0b       	sbc	r24, r20
    1500:	ba f0       	brmi	.+46     	; 0x1530 <__addsf3x+0x98>
    1502:	91 50       	subi	r25, 0x01	; 1
    1504:	a1 f0       	breq	.+40     	; 0x152e <__addsf3x+0x96>
    1506:	ff 0f       	add	r31, r31
    1508:	bb 1f       	adc	r27, r27
    150a:	66 1f       	adc	r22, r22
    150c:	77 1f       	adc	r23, r23
    150e:	88 1f       	adc	r24, r24
    1510:	c2 f7       	brpl	.-16     	; 0x1502 <__addsf3x+0x6a>
    1512:	0e c0       	rjmp	.+28     	; 0x1530 <__addsf3x+0x98>
    1514:	ba 0f       	add	r27, r26
    1516:	62 1f       	adc	r22, r18
    1518:	73 1f       	adc	r23, r19
    151a:	84 1f       	adc	r24, r20
    151c:	48 f4       	brcc	.+18     	; 0x1530 <__addsf3x+0x98>
    151e:	87 95       	ror	r24
    1520:	77 95       	ror	r23
    1522:	67 95       	ror	r22
    1524:	b7 95       	ror	r27
    1526:	f7 95       	ror	r31
    1528:	9e 3f       	cpi	r25, 0xFE	; 254
    152a:	08 f0       	brcs	.+2      	; 0x152e <__addsf3x+0x96>
    152c:	b3 cf       	rjmp	.-154    	; 0x1494 <__addsf3+0x1e>
    152e:	93 95       	inc	r25
    1530:	88 0f       	add	r24, r24
    1532:	08 f0       	brcs	.+2      	; 0x1536 <__addsf3x+0x9e>
    1534:	99 27       	eor	r25, r25
    1536:	ee 0f       	add	r30, r30
    1538:	97 95       	ror	r25
    153a:	87 95       	ror	r24
    153c:	08 95       	ret

0000153e <__cmpsf2>:
    153e:	ec d0       	rcall	.+472    	; 0x1718 <__fp_cmp>
    1540:	08 f4       	brcc	.+2      	; 0x1544 <__cmpsf2+0x6>
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	08 95       	ret

00001546 <__divsf3>:
    1546:	0c d0       	rcall	.+24     	; 0x1560 <__divsf3x>
    1548:	4b c1       	rjmp	.+662    	; 0x17e0 <__fp_round>
    154a:	43 d1       	rcall	.+646    	; 0x17d2 <__fp_pscB>
    154c:	40 f0       	brcs	.+16     	; 0x155e <__divsf3+0x18>
    154e:	3a d1       	rcall	.+628    	; 0x17c4 <__fp_pscA>
    1550:	30 f0       	brcs	.+12     	; 0x155e <__divsf3+0x18>
    1552:	21 f4       	brne	.+8      	; 0x155c <__divsf3+0x16>
    1554:	5f 3f       	cpi	r21, 0xFF	; 255
    1556:	19 f0       	breq	.+6      	; 0x155e <__divsf3+0x18>
    1558:	03 c1       	rjmp	.+518    	; 0x1760 <__fp_inf>
    155a:	51 11       	cpse	r21, r1
    155c:	8c c1       	rjmp	.+792    	; 0x1876 <__fp_szero>
    155e:	2f c1       	rjmp	.+606    	; 0x17be <__fp_nan>

00001560 <__divsf3x>:
    1560:	50 d1       	rcall	.+672    	; 0x1802 <__fp_split3>
    1562:	98 f3       	brcs	.-26     	; 0x154a <__divsf3+0x4>

00001564 <__divsf3_pse>:
    1564:	99 23       	and	r25, r25
    1566:	c9 f3       	breq	.-14     	; 0x155a <__divsf3+0x14>
    1568:	55 23       	and	r21, r21
    156a:	b1 f3       	breq	.-20     	; 0x1558 <__divsf3+0x12>
    156c:	95 1b       	sub	r25, r21
    156e:	55 0b       	sbc	r21, r21
    1570:	bb 27       	eor	r27, r27
    1572:	aa 27       	eor	r26, r26
    1574:	62 17       	cp	r22, r18
    1576:	73 07       	cpc	r23, r19
    1578:	84 07       	cpc	r24, r20
    157a:	38 f0       	brcs	.+14     	; 0x158a <__divsf3_pse+0x26>
    157c:	9f 5f       	subi	r25, 0xFF	; 255
    157e:	5f 4f       	sbci	r21, 0xFF	; 255
    1580:	22 0f       	add	r18, r18
    1582:	33 1f       	adc	r19, r19
    1584:	44 1f       	adc	r20, r20
    1586:	aa 1f       	adc	r26, r26
    1588:	a9 f3       	breq	.-22     	; 0x1574 <__divsf3_pse+0x10>
    158a:	33 d0       	rcall	.+102    	; 0x15f2 <__divsf3_pse+0x8e>
    158c:	0e 2e       	mov	r0, r30
    158e:	3a f0       	brmi	.+14     	; 0x159e <__divsf3_pse+0x3a>
    1590:	e0 e8       	ldi	r30, 0x80	; 128
    1592:	30 d0       	rcall	.+96     	; 0x15f4 <__divsf3_pse+0x90>
    1594:	91 50       	subi	r25, 0x01	; 1
    1596:	50 40       	sbci	r21, 0x00	; 0
    1598:	e6 95       	lsr	r30
    159a:	00 1c       	adc	r0, r0
    159c:	ca f7       	brpl	.-14     	; 0x1590 <__divsf3_pse+0x2c>
    159e:	29 d0       	rcall	.+82     	; 0x15f2 <__divsf3_pse+0x8e>
    15a0:	fe 2f       	mov	r31, r30
    15a2:	27 d0       	rcall	.+78     	; 0x15f2 <__divsf3_pse+0x8e>
    15a4:	66 0f       	add	r22, r22
    15a6:	77 1f       	adc	r23, r23
    15a8:	88 1f       	adc	r24, r24
    15aa:	bb 1f       	adc	r27, r27
    15ac:	26 17       	cp	r18, r22
    15ae:	37 07       	cpc	r19, r23
    15b0:	48 07       	cpc	r20, r24
    15b2:	ab 07       	cpc	r26, r27
    15b4:	b0 e8       	ldi	r27, 0x80	; 128
    15b6:	09 f0       	breq	.+2      	; 0x15ba <__divsf3_pse+0x56>
    15b8:	bb 0b       	sbc	r27, r27
    15ba:	80 2d       	mov	r24, r0
    15bc:	bf 01       	movw	r22, r30
    15be:	ff 27       	eor	r31, r31
    15c0:	93 58       	subi	r25, 0x83	; 131
    15c2:	5f 4f       	sbci	r21, 0xFF	; 255
    15c4:	2a f0       	brmi	.+10     	; 0x15d0 <__divsf3_pse+0x6c>
    15c6:	9e 3f       	cpi	r25, 0xFE	; 254
    15c8:	51 05       	cpc	r21, r1
    15ca:	68 f0       	brcs	.+26     	; 0x15e6 <__divsf3_pse+0x82>
    15cc:	c9 c0       	rjmp	.+402    	; 0x1760 <__fp_inf>
    15ce:	53 c1       	rjmp	.+678    	; 0x1876 <__fp_szero>
    15d0:	5f 3f       	cpi	r21, 0xFF	; 255
    15d2:	ec f3       	brlt	.-6      	; 0x15ce <__divsf3_pse+0x6a>
    15d4:	98 3e       	cpi	r25, 0xE8	; 232
    15d6:	dc f3       	brlt	.-10     	; 0x15ce <__divsf3_pse+0x6a>
    15d8:	86 95       	lsr	r24
    15da:	77 95       	ror	r23
    15dc:	67 95       	ror	r22
    15de:	b7 95       	ror	r27
    15e0:	f7 95       	ror	r31
    15e2:	9f 5f       	subi	r25, 0xFF	; 255
    15e4:	c9 f7       	brne	.-14     	; 0x15d8 <__divsf3_pse+0x74>
    15e6:	88 0f       	add	r24, r24
    15e8:	91 1d       	adc	r25, r1
    15ea:	96 95       	lsr	r25
    15ec:	87 95       	ror	r24
    15ee:	97 f9       	bld	r25, 7
    15f0:	08 95       	ret
    15f2:	e1 e0       	ldi	r30, 0x01	; 1
    15f4:	66 0f       	add	r22, r22
    15f6:	77 1f       	adc	r23, r23
    15f8:	88 1f       	adc	r24, r24
    15fa:	bb 1f       	adc	r27, r27
    15fc:	62 17       	cp	r22, r18
    15fe:	73 07       	cpc	r23, r19
    1600:	84 07       	cpc	r24, r20
    1602:	ba 07       	cpc	r27, r26
    1604:	20 f0       	brcs	.+8      	; 0x160e <__divsf3_pse+0xaa>
    1606:	62 1b       	sub	r22, r18
    1608:	73 0b       	sbc	r23, r19
    160a:	84 0b       	sbc	r24, r20
    160c:	ba 0b       	sbc	r27, r26
    160e:	ee 1f       	adc	r30, r30
    1610:	88 f7       	brcc	.-30     	; 0x15f4 <__divsf3_pse+0x90>
    1612:	e0 95       	com	r30
    1614:	08 95       	ret

00001616 <__fixsfsi>:
    1616:	04 d0       	rcall	.+8      	; 0x1620 <__fixunssfsi>
    1618:	68 94       	set
    161a:	b1 11       	cpse	r27, r1
    161c:	2c c1       	rjmp	.+600    	; 0x1876 <__fp_szero>
    161e:	08 95       	ret

00001620 <__fixunssfsi>:
    1620:	f8 d0       	rcall	.+496    	; 0x1812 <__fp_splitA>
    1622:	88 f0       	brcs	.+34     	; 0x1646 <__fixunssfsi+0x26>
    1624:	9f 57       	subi	r25, 0x7F	; 127
    1626:	90 f0       	brcs	.+36     	; 0x164c <__fixunssfsi+0x2c>
    1628:	b9 2f       	mov	r27, r25
    162a:	99 27       	eor	r25, r25
    162c:	b7 51       	subi	r27, 0x17	; 23
    162e:	a0 f0       	brcs	.+40     	; 0x1658 <__fixunssfsi+0x38>
    1630:	d1 f0       	breq	.+52     	; 0x1666 <__fixunssfsi+0x46>
    1632:	66 0f       	add	r22, r22
    1634:	77 1f       	adc	r23, r23
    1636:	88 1f       	adc	r24, r24
    1638:	99 1f       	adc	r25, r25
    163a:	1a f0       	brmi	.+6      	; 0x1642 <__fixunssfsi+0x22>
    163c:	ba 95       	dec	r27
    163e:	c9 f7       	brne	.-14     	; 0x1632 <__fixunssfsi+0x12>
    1640:	12 c0       	rjmp	.+36     	; 0x1666 <__fixunssfsi+0x46>
    1642:	b1 30       	cpi	r27, 0x01	; 1
    1644:	81 f0       	breq	.+32     	; 0x1666 <__fixunssfsi+0x46>
    1646:	16 d1       	rcall	.+556    	; 0x1874 <__fp_zero>
    1648:	b1 e0       	ldi	r27, 0x01	; 1
    164a:	08 95       	ret
    164c:	13 c1       	rjmp	.+550    	; 0x1874 <__fp_zero>
    164e:	67 2f       	mov	r22, r23
    1650:	78 2f       	mov	r23, r24
    1652:	88 27       	eor	r24, r24
    1654:	b8 5f       	subi	r27, 0xF8	; 248
    1656:	39 f0       	breq	.+14     	; 0x1666 <__fixunssfsi+0x46>
    1658:	b9 3f       	cpi	r27, 0xF9	; 249
    165a:	cc f3       	brlt	.-14     	; 0x164e <__fixunssfsi+0x2e>
    165c:	86 95       	lsr	r24
    165e:	77 95       	ror	r23
    1660:	67 95       	ror	r22
    1662:	b3 95       	inc	r27
    1664:	d9 f7       	brne	.-10     	; 0x165c <__fixunssfsi+0x3c>
    1666:	3e f4       	brtc	.+14     	; 0x1676 <__fixunssfsi+0x56>
    1668:	90 95       	com	r25
    166a:	80 95       	com	r24
    166c:	70 95       	com	r23
    166e:	61 95       	neg	r22
    1670:	7f 4f       	sbci	r23, 0xFF	; 255
    1672:	8f 4f       	sbci	r24, 0xFF	; 255
    1674:	9f 4f       	sbci	r25, 0xFF	; 255
    1676:	08 95       	ret

00001678 <__floatunsisf>:
    1678:	e8 94       	clt
    167a:	09 c0       	rjmp	.+18     	; 0x168e <__floatsisf+0x12>

0000167c <__floatsisf>:
    167c:	97 fb       	bst	r25, 7
    167e:	3e f4       	brtc	.+14     	; 0x168e <__floatsisf+0x12>
    1680:	90 95       	com	r25
    1682:	80 95       	com	r24
    1684:	70 95       	com	r23
    1686:	61 95       	neg	r22
    1688:	7f 4f       	sbci	r23, 0xFF	; 255
    168a:	8f 4f       	sbci	r24, 0xFF	; 255
    168c:	9f 4f       	sbci	r25, 0xFF	; 255
    168e:	99 23       	and	r25, r25
    1690:	a9 f0       	breq	.+42     	; 0x16bc <__floatsisf+0x40>
    1692:	f9 2f       	mov	r31, r25
    1694:	96 e9       	ldi	r25, 0x96	; 150
    1696:	bb 27       	eor	r27, r27
    1698:	93 95       	inc	r25
    169a:	f6 95       	lsr	r31
    169c:	87 95       	ror	r24
    169e:	77 95       	ror	r23
    16a0:	67 95       	ror	r22
    16a2:	b7 95       	ror	r27
    16a4:	f1 11       	cpse	r31, r1
    16a6:	f8 cf       	rjmp	.-16     	; 0x1698 <__floatsisf+0x1c>
    16a8:	fa f4       	brpl	.+62     	; 0x16e8 <__floatsisf+0x6c>
    16aa:	bb 0f       	add	r27, r27
    16ac:	11 f4       	brne	.+4      	; 0x16b2 <__floatsisf+0x36>
    16ae:	60 ff       	sbrs	r22, 0
    16b0:	1b c0       	rjmp	.+54     	; 0x16e8 <__floatsisf+0x6c>
    16b2:	6f 5f       	subi	r22, 0xFF	; 255
    16b4:	7f 4f       	sbci	r23, 0xFF	; 255
    16b6:	8f 4f       	sbci	r24, 0xFF	; 255
    16b8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ba:	16 c0       	rjmp	.+44     	; 0x16e8 <__floatsisf+0x6c>
    16bc:	88 23       	and	r24, r24
    16be:	11 f0       	breq	.+4      	; 0x16c4 <__floatsisf+0x48>
    16c0:	96 e9       	ldi	r25, 0x96	; 150
    16c2:	11 c0       	rjmp	.+34     	; 0x16e6 <__floatsisf+0x6a>
    16c4:	77 23       	and	r23, r23
    16c6:	21 f0       	breq	.+8      	; 0x16d0 <__floatsisf+0x54>
    16c8:	9e e8       	ldi	r25, 0x8E	; 142
    16ca:	87 2f       	mov	r24, r23
    16cc:	76 2f       	mov	r23, r22
    16ce:	05 c0       	rjmp	.+10     	; 0x16da <__floatsisf+0x5e>
    16d0:	66 23       	and	r22, r22
    16d2:	71 f0       	breq	.+28     	; 0x16f0 <__floatsisf+0x74>
    16d4:	96 e8       	ldi	r25, 0x86	; 134
    16d6:	86 2f       	mov	r24, r22
    16d8:	70 e0       	ldi	r23, 0x00	; 0
    16da:	60 e0       	ldi	r22, 0x00	; 0
    16dc:	2a f0       	brmi	.+10     	; 0x16e8 <__floatsisf+0x6c>
    16de:	9a 95       	dec	r25
    16e0:	66 0f       	add	r22, r22
    16e2:	77 1f       	adc	r23, r23
    16e4:	88 1f       	adc	r24, r24
    16e6:	da f7       	brpl	.-10     	; 0x16de <__floatsisf+0x62>
    16e8:	88 0f       	add	r24, r24
    16ea:	96 95       	lsr	r25
    16ec:	87 95       	ror	r24
    16ee:	97 f9       	bld	r25, 7
    16f0:	08 95       	ret

000016f2 <floor>:
    16f2:	a9 d0       	rcall	.+338    	; 0x1846 <__fp_trunc>
    16f4:	80 f0       	brcs	.+32     	; 0x1716 <floor+0x24>
    16f6:	9f 37       	cpi	r25, 0x7F	; 127
    16f8:	40 f4       	brcc	.+16     	; 0x170a <floor+0x18>
    16fa:	91 11       	cpse	r25, r1
    16fc:	0e f0       	brts	.+2      	; 0x1700 <floor+0xe>
    16fe:	bb c0       	rjmp	.+374    	; 0x1876 <__fp_szero>
    1700:	60 e0       	ldi	r22, 0x00	; 0
    1702:	70 e0       	ldi	r23, 0x00	; 0
    1704:	80 e8       	ldi	r24, 0x80	; 128
    1706:	9f eb       	ldi	r25, 0xBF	; 191
    1708:	08 95       	ret
    170a:	26 f4       	brtc	.+8      	; 0x1714 <floor+0x22>
    170c:	1b 16       	cp	r1, r27
    170e:	61 1d       	adc	r22, r1
    1710:	71 1d       	adc	r23, r1
    1712:	81 1d       	adc	r24, r1
    1714:	2b c0       	rjmp	.+86     	; 0x176c <__fp_mintl>
    1716:	45 c0       	rjmp	.+138    	; 0x17a2 <__fp_mpack>

00001718 <__fp_cmp>:
    1718:	99 0f       	add	r25, r25
    171a:	00 08       	sbc	r0, r0
    171c:	55 0f       	add	r21, r21
    171e:	aa 0b       	sbc	r26, r26
    1720:	e0 e8       	ldi	r30, 0x80	; 128
    1722:	fe ef       	ldi	r31, 0xFE	; 254
    1724:	16 16       	cp	r1, r22
    1726:	17 06       	cpc	r1, r23
    1728:	e8 07       	cpc	r30, r24
    172a:	f9 07       	cpc	r31, r25
    172c:	c0 f0       	brcs	.+48     	; 0x175e <__fp_cmp+0x46>
    172e:	12 16       	cp	r1, r18
    1730:	13 06       	cpc	r1, r19
    1732:	e4 07       	cpc	r30, r20
    1734:	f5 07       	cpc	r31, r21
    1736:	98 f0       	brcs	.+38     	; 0x175e <__fp_cmp+0x46>
    1738:	62 1b       	sub	r22, r18
    173a:	73 0b       	sbc	r23, r19
    173c:	84 0b       	sbc	r24, r20
    173e:	95 0b       	sbc	r25, r21
    1740:	39 f4       	brne	.+14     	; 0x1750 <__fp_cmp+0x38>
    1742:	0a 26       	eor	r0, r26
    1744:	61 f0       	breq	.+24     	; 0x175e <__fp_cmp+0x46>
    1746:	23 2b       	or	r18, r19
    1748:	24 2b       	or	r18, r20
    174a:	25 2b       	or	r18, r21
    174c:	21 f4       	brne	.+8      	; 0x1756 <__fp_cmp+0x3e>
    174e:	08 95       	ret
    1750:	0a 26       	eor	r0, r26
    1752:	09 f4       	brne	.+2      	; 0x1756 <__fp_cmp+0x3e>
    1754:	a1 40       	sbci	r26, 0x01	; 1
    1756:	a6 95       	lsr	r26
    1758:	8f ef       	ldi	r24, 0xFF	; 255
    175a:	81 1d       	adc	r24, r1
    175c:	81 1d       	adc	r24, r1
    175e:	08 95       	ret

00001760 <__fp_inf>:
    1760:	97 f9       	bld	r25, 7
    1762:	9f 67       	ori	r25, 0x7F	; 127
    1764:	80 e8       	ldi	r24, 0x80	; 128
    1766:	70 e0       	ldi	r23, 0x00	; 0
    1768:	60 e0       	ldi	r22, 0x00	; 0
    176a:	08 95       	ret

0000176c <__fp_mintl>:
    176c:	88 23       	and	r24, r24
    176e:	71 f4       	brne	.+28     	; 0x178c <__fp_mintl+0x20>
    1770:	77 23       	and	r23, r23
    1772:	21 f0       	breq	.+8      	; 0x177c <__fp_mintl+0x10>
    1774:	98 50       	subi	r25, 0x08	; 8
    1776:	87 2b       	or	r24, r23
    1778:	76 2f       	mov	r23, r22
    177a:	07 c0       	rjmp	.+14     	; 0x178a <__fp_mintl+0x1e>
    177c:	66 23       	and	r22, r22
    177e:	11 f4       	brne	.+4      	; 0x1784 <__fp_mintl+0x18>
    1780:	99 27       	eor	r25, r25
    1782:	0d c0       	rjmp	.+26     	; 0x179e <__fp_mintl+0x32>
    1784:	90 51       	subi	r25, 0x10	; 16
    1786:	86 2b       	or	r24, r22
    1788:	70 e0       	ldi	r23, 0x00	; 0
    178a:	60 e0       	ldi	r22, 0x00	; 0
    178c:	2a f0       	brmi	.+10     	; 0x1798 <__fp_mintl+0x2c>
    178e:	9a 95       	dec	r25
    1790:	66 0f       	add	r22, r22
    1792:	77 1f       	adc	r23, r23
    1794:	88 1f       	adc	r24, r24
    1796:	da f7       	brpl	.-10     	; 0x178e <__fp_mintl+0x22>
    1798:	88 0f       	add	r24, r24
    179a:	96 95       	lsr	r25
    179c:	87 95       	ror	r24
    179e:	97 f9       	bld	r25, 7
    17a0:	08 95       	ret

000017a2 <__fp_mpack>:
    17a2:	9f 3f       	cpi	r25, 0xFF	; 255
    17a4:	31 f0       	breq	.+12     	; 0x17b2 <__fp_mpack_finite+0xc>

000017a6 <__fp_mpack_finite>:
    17a6:	91 50       	subi	r25, 0x01	; 1
    17a8:	20 f4       	brcc	.+8      	; 0x17b2 <__fp_mpack_finite+0xc>
    17aa:	87 95       	ror	r24
    17ac:	77 95       	ror	r23
    17ae:	67 95       	ror	r22
    17b0:	b7 95       	ror	r27
    17b2:	88 0f       	add	r24, r24
    17b4:	91 1d       	adc	r25, r1
    17b6:	96 95       	lsr	r25
    17b8:	87 95       	ror	r24
    17ba:	97 f9       	bld	r25, 7
    17bc:	08 95       	ret

000017be <__fp_nan>:
    17be:	9f ef       	ldi	r25, 0xFF	; 255
    17c0:	80 ec       	ldi	r24, 0xC0	; 192
    17c2:	08 95       	ret

000017c4 <__fp_pscA>:
    17c4:	00 24       	eor	r0, r0
    17c6:	0a 94       	dec	r0
    17c8:	16 16       	cp	r1, r22
    17ca:	17 06       	cpc	r1, r23
    17cc:	18 06       	cpc	r1, r24
    17ce:	09 06       	cpc	r0, r25
    17d0:	08 95       	ret

000017d2 <__fp_pscB>:
    17d2:	00 24       	eor	r0, r0
    17d4:	0a 94       	dec	r0
    17d6:	12 16       	cp	r1, r18
    17d8:	13 06       	cpc	r1, r19
    17da:	14 06       	cpc	r1, r20
    17dc:	05 06       	cpc	r0, r21
    17de:	08 95       	ret

000017e0 <__fp_round>:
    17e0:	09 2e       	mov	r0, r25
    17e2:	03 94       	inc	r0
    17e4:	00 0c       	add	r0, r0
    17e6:	11 f4       	brne	.+4      	; 0x17ec <__fp_round+0xc>
    17e8:	88 23       	and	r24, r24
    17ea:	52 f0       	brmi	.+20     	; 0x1800 <__fp_round+0x20>
    17ec:	bb 0f       	add	r27, r27
    17ee:	40 f4       	brcc	.+16     	; 0x1800 <__fp_round+0x20>
    17f0:	bf 2b       	or	r27, r31
    17f2:	11 f4       	brne	.+4      	; 0x17f8 <__fp_round+0x18>
    17f4:	60 ff       	sbrs	r22, 0
    17f6:	04 c0       	rjmp	.+8      	; 0x1800 <__fp_round+0x20>
    17f8:	6f 5f       	subi	r22, 0xFF	; 255
    17fa:	7f 4f       	sbci	r23, 0xFF	; 255
    17fc:	8f 4f       	sbci	r24, 0xFF	; 255
    17fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1800:	08 95       	ret

00001802 <__fp_split3>:
    1802:	57 fd       	sbrc	r21, 7
    1804:	90 58       	subi	r25, 0x80	; 128
    1806:	44 0f       	add	r20, r20
    1808:	55 1f       	adc	r21, r21
    180a:	59 f0       	breq	.+22     	; 0x1822 <__fp_splitA+0x10>
    180c:	5f 3f       	cpi	r21, 0xFF	; 255
    180e:	71 f0       	breq	.+28     	; 0x182c <__fp_splitA+0x1a>
    1810:	47 95       	ror	r20

00001812 <__fp_splitA>:
    1812:	88 0f       	add	r24, r24
    1814:	97 fb       	bst	r25, 7
    1816:	99 1f       	adc	r25, r25
    1818:	61 f0       	breq	.+24     	; 0x1832 <__fp_splitA+0x20>
    181a:	9f 3f       	cpi	r25, 0xFF	; 255
    181c:	79 f0       	breq	.+30     	; 0x183c <__fp_splitA+0x2a>
    181e:	87 95       	ror	r24
    1820:	08 95       	ret
    1822:	12 16       	cp	r1, r18
    1824:	13 06       	cpc	r1, r19
    1826:	14 06       	cpc	r1, r20
    1828:	55 1f       	adc	r21, r21
    182a:	f2 cf       	rjmp	.-28     	; 0x1810 <__fp_split3+0xe>
    182c:	46 95       	lsr	r20
    182e:	f1 df       	rcall	.-30     	; 0x1812 <__fp_splitA>
    1830:	08 c0       	rjmp	.+16     	; 0x1842 <__fp_splitA+0x30>
    1832:	16 16       	cp	r1, r22
    1834:	17 06       	cpc	r1, r23
    1836:	18 06       	cpc	r1, r24
    1838:	99 1f       	adc	r25, r25
    183a:	f1 cf       	rjmp	.-30     	; 0x181e <__fp_splitA+0xc>
    183c:	86 95       	lsr	r24
    183e:	71 05       	cpc	r23, r1
    1840:	61 05       	cpc	r22, r1
    1842:	08 94       	sec
    1844:	08 95       	ret

00001846 <__fp_trunc>:
    1846:	e5 df       	rcall	.-54     	; 0x1812 <__fp_splitA>
    1848:	a0 f0       	brcs	.+40     	; 0x1872 <__fp_trunc+0x2c>
    184a:	be e7       	ldi	r27, 0x7E	; 126
    184c:	b9 17       	cp	r27, r25
    184e:	88 f4       	brcc	.+34     	; 0x1872 <__fp_trunc+0x2c>
    1850:	bb 27       	eor	r27, r27
    1852:	9f 38       	cpi	r25, 0x8F	; 143
    1854:	60 f4       	brcc	.+24     	; 0x186e <__fp_trunc+0x28>
    1856:	16 16       	cp	r1, r22
    1858:	b1 1d       	adc	r27, r1
    185a:	67 2f       	mov	r22, r23
    185c:	78 2f       	mov	r23, r24
    185e:	88 27       	eor	r24, r24
    1860:	98 5f       	subi	r25, 0xF8	; 248
    1862:	f7 cf       	rjmp	.-18     	; 0x1852 <__fp_trunc+0xc>
    1864:	86 95       	lsr	r24
    1866:	77 95       	ror	r23
    1868:	67 95       	ror	r22
    186a:	b1 1d       	adc	r27, r1
    186c:	93 95       	inc	r25
    186e:	96 39       	cpi	r25, 0x96	; 150
    1870:	c8 f3       	brcs	.-14     	; 0x1864 <__fp_trunc+0x1e>
    1872:	08 95       	ret

00001874 <__fp_zero>:
    1874:	e8 94       	clt

00001876 <__fp_szero>:
    1876:	bb 27       	eor	r27, r27
    1878:	66 27       	eor	r22, r22
    187a:	77 27       	eor	r23, r23
    187c:	cb 01       	movw	r24, r22
    187e:	97 f9       	bld	r25, 7
    1880:	08 95       	ret

00001882 <__gesf2>:
    1882:	4a df       	rcall	.-364    	; 0x1718 <__fp_cmp>
    1884:	08 f4       	brcc	.+2      	; 0x1888 <__gesf2+0x6>
    1886:	8f ef       	ldi	r24, 0xFF	; 255
    1888:	08 95       	ret

0000188a <__mulsf3>:
    188a:	0b d0       	rcall	.+22     	; 0x18a2 <__mulsf3x>
    188c:	a9 cf       	rjmp	.-174    	; 0x17e0 <__fp_round>
    188e:	9a df       	rcall	.-204    	; 0x17c4 <__fp_pscA>
    1890:	28 f0       	brcs	.+10     	; 0x189c <__mulsf3+0x12>
    1892:	9f df       	rcall	.-194    	; 0x17d2 <__fp_pscB>
    1894:	18 f0       	brcs	.+6      	; 0x189c <__mulsf3+0x12>
    1896:	95 23       	and	r25, r21
    1898:	09 f0       	breq	.+2      	; 0x189c <__mulsf3+0x12>
    189a:	62 cf       	rjmp	.-316    	; 0x1760 <__fp_inf>
    189c:	90 cf       	rjmp	.-224    	; 0x17be <__fp_nan>
    189e:	11 24       	eor	r1, r1
    18a0:	ea cf       	rjmp	.-44     	; 0x1876 <__fp_szero>

000018a2 <__mulsf3x>:
    18a2:	af df       	rcall	.-162    	; 0x1802 <__fp_split3>
    18a4:	a0 f3       	brcs	.-24     	; 0x188e <__mulsf3+0x4>

000018a6 <__mulsf3_pse>:
    18a6:	95 9f       	mul	r25, r21
    18a8:	d1 f3       	breq	.-12     	; 0x189e <__mulsf3+0x14>
    18aa:	95 0f       	add	r25, r21
    18ac:	50 e0       	ldi	r21, 0x00	; 0
    18ae:	55 1f       	adc	r21, r21
    18b0:	62 9f       	mul	r22, r18
    18b2:	f0 01       	movw	r30, r0
    18b4:	72 9f       	mul	r23, r18
    18b6:	bb 27       	eor	r27, r27
    18b8:	f0 0d       	add	r31, r0
    18ba:	b1 1d       	adc	r27, r1
    18bc:	63 9f       	mul	r22, r19
    18be:	aa 27       	eor	r26, r26
    18c0:	f0 0d       	add	r31, r0
    18c2:	b1 1d       	adc	r27, r1
    18c4:	aa 1f       	adc	r26, r26
    18c6:	64 9f       	mul	r22, r20
    18c8:	66 27       	eor	r22, r22
    18ca:	b0 0d       	add	r27, r0
    18cc:	a1 1d       	adc	r26, r1
    18ce:	66 1f       	adc	r22, r22
    18d0:	82 9f       	mul	r24, r18
    18d2:	22 27       	eor	r18, r18
    18d4:	b0 0d       	add	r27, r0
    18d6:	a1 1d       	adc	r26, r1
    18d8:	62 1f       	adc	r22, r18
    18da:	73 9f       	mul	r23, r19
    18dc:	b0 0d       	add	r27, r0
    18de:	a1 1d       	adc	r26, r1
    18e0:	62 1f       	adc	r22, r18
    18e2:	83 9f       	mul	r24, r19
    18e4:	a0 0d       	add	r26, r0
    18e6:	61 1d       	adc	r22, r1
    18e8:	22 1f       	adc	r18, r18
    18ea:	74 9f       	mul	r23, r20
    18ec:	33 27       	eor	r19, r19
    18ee:	a0 0d       	add	r26, r0
    18f0:	61 1d       	adc	r22, r1
    18f2:	23 1f       	adc	r18, r19
    18f4:	84 9f       	mul	r24, r20
    18f6:	60 0d       	add	r22, r0
    18f8:	21 1d       	adc	r18, r1
    18fa:	82 2f       	mov	r24, r18
    18fc:	76 2f       	mov	r23, r22
    18fe:	6a 2f       	mov	r22, r26
    1900:	11 24       	eor	r1, r1
    1902:	9f 57       	subi	r25, 0x7F	; 127
    1904:	50 40       	sbci	r21, 0x00	; 0
    1906:	8a f0       	brmi	.+34     	; 0x192a <__mulsf3_pse+0x84>
    1908:	e1 f0       	breq	.+56     	; 0x1942 <__mulsf3_pse+0x9c>
    190a:	88 23       	and	r24, r24
    190c:	4a f0       	brmi	.+18     	; 0x1920 <__mulsf3_pse+0x7a>
    190e:	ee 0f       	add	r30, r30
    1910:	ff 1f       	adc	r31, r31
    1912:	bb 1f       	adc	r27, r27
    1914:	66 1f       	adc	r22, r22
    1916:	77 1f       	adc	r23, r23
    1918:	88 1f       	adc	r24, r24
    191a:	91 50       	subi	r25, 0x01	; 1
    191c:	50 40       	sbci	r21, 0x00	; 0
    191e:	a9 f7       	brne	.-22     	; 0x190a <__mulsf3_pse+0x64>
    1920:	9e 3f       	cpi	r25, 0xFE	; 254
    1922:	51 05       	cpc	r21, r1
    1924:	70 f0       	brcs	.+28     	; 0x1942 <__mulsf3_pse+0x9c>
    1926:	1c cf       	rjmp	.-456    	; 0x1760 <__fp_inf>
    1928:	a6 cf       	rjmp	.-180    	; 0x1876 <__fp_szero>
    192a:	5f 3f       	cpi	r21, 0xFF	; 255
    192c:	ec f3       	brlt	.-6      	; 0x1928 <__mulsf3_pse+0x82>
    192e:	98 3e       	cpi	r25, 0xE8	; 232
    1930:	dc f3       	brlt	.-10     	; 0x1928 <__mulsf3_pse+0x82>
    1932:	86 95       	lsr	r24
    1934:	77 95       	ror	r23
    1936:	67 95       	ror	r22
    1938:	b7 95       	ror	r27
    193a:	f7 95       	ror	r31
    193c:	e7 95       	ror	r30
    193e:	9f 5f       	subi	r25, 0xFF	; 255
    1940:	c1 f7       	brne	.-16     	; 0x1932 <__mulsf3_pse+0x8c>
    1942:	fe 2b       	or	r31, r30
    1944:	88 0f       	add	r24, r24
    1946:	91 1d       	adc	r25, r1
    1948:	96 95       	lsr	r25
    194a:	87 95       	ror	r24
    194c:	97 f9       	bld	r25, 7
    194e:	08 95       	ret

00001950 <sin>:
    1950:	9f 93       	push	r25
    1952:	05 d0       	rcall	.+10     	; 0x195e <__fp_rempio2>
    1954:	0f 90       	pop	r0
    1956:	07 fc       	sbrc	r0, 7
    1958:	ee 5f       	subi	r30, 0xFE	; 254
    195a:	28 c0       	rjmp	.+80     	; 0x19ac <__fp_sinus>
    195c:	30 cf       	rjmp	.-416    	; 0x17be <__fp_nan>

0000195e <__fp_rempio2>:
    195e:	59 df       	rcall	.-334    	; 0x1812 <__fp_splitA>
    1960:	e8 f3       	brcs	.-6      	; 0x195c <sin+0xc>
    1962:	e8 94       	clt
    1964:	e0 e0       	ldi	r30, 0x00	; 0
    1966:	bb 27       	eor	r27, r27
    1968:	9f 57       	subi	r25, 0x7F	; 127
    196a:	f0 f0       	brcs	.+60     	; 0x19a8 <__fp_rempio2+0x4a>
    196c:	2a ed       	ldi	r18, 0xDA	; 218
    196e:	3f e0       	ldi	r19, 0x0F	; 15
    1970:	49 ec       	ldi	r20, 0xC9	; 201
    1972:	06 c0       	rjmp	.+12     	; 0x1980 <__fp_rempio2+0x22>
    1974:	ee 0f       	add	r30, r30
    1976:	bb 0f       	add	r27, r27
    1978:	66 1f       	adc	r22, r22
    197a:	77 1f       	adc	r23, r23
    197c:	88 1f       	adc	r24, r24
    197e:	28 f0       	brcs	.+10     	; 0x198a <__fp_rempio2+0x2c>
    1980:	b2 3a       	cpi	r27, 0xA2	; 162
    1982:	62 07       	cpc	r22, r18
    1984:	73 07       	cpc	r23, r19
    1986:	84 07       	cpc	r24, r20
    1988:	28 f0       	brcs	.+10     	; 0x1994 <__fp_rempio2+0x36>
    198a:	b2 5a       	subi	r27, 0xA2	; 162
    198c:	62 0b       	sbc	r22, r18
    198e:	73 0b       	sbc	r23, r19
    1990:	84 0b       	sbc	r24, r20
    1992:	e3 95       	inc	r30
    1994:	9a 95       	dec	r25
    1996:	72 f7       	brpl	.-36     	; 0x1974 <__fp_rempio2+0x16>
    1998:	80 38       	cpi	r24, 0x80	; 128
    199a:	30 f4       	brcc	.+12     	; 0x19a8 <__fp_rempio2+0x4a>
    199c:	9a 95       	dec	r25
    199e:	bb 0f       	add	r27, r27
    19a0:	66 1f       	adc	r22, r22
    19a2:	77 1f       	adc	r23, r23
    19a4:	88 1f       	adc	r24, r24
    19a6:	d2 f7       	brpl	.-12     	; 0x199c <__fp_rempio2+0x3e>
    19a8:	90 48       	sbci	r25, 0x80	; 128
    19aa:	fd ce       	rjmp	.-518    	; 0x17a6 <__fp_mpack_finite>

000019ac <__fp_sinus>:
    19ac:	ef 93       	push	r30
    19ae:	e0 ff       	sbrs	r30, 0
    19b0:	06 c0       	rjmp	.+12     	; 0x19be <__fp_sinus+0x12>
    19b2:	a2 ea       	ldi	r26, 0xA2	; 162
    19b4:	2a ed       	ldi	r18, 0xDA	; 218
    19b6:	3f e0       	ldi	r19, 0x0F	; 15
    19b8:	49 ec       	ldi	r20, 0xC9	; 201
    19ba:	5f eb       	ldi	r21, 0xBF	; 191
    19bc:	6d dd       	rcall	.-1318   	; 0x1498 <__addsf3x>
    19be:	10 df       	rcall	.-480    	; 0x17e0 <__fp_round>
    19c0:	0f 90       	pop	r0
    19c2:	03 94       	inc	r0
    19c4:	01 fc       	sbrc	r0, 1
    19c6:	90 58       	subi	r25, 0x80	; 128
    19c8:	ec ef       	ldi	r30, 0xFC	; 252
    19ca:	f1 e0       	ldi	r31, 0x01	; 1
    19cc:	00 c0       	rjmp	.+0      	; 0x19ce <__fp_powsodd>

000019ce <__fp_powsodd>:
    19ce:	9f 93       	push	r25
    19d0:	8f 93       	push	r24
    19d2:	7f 93       	push	r23
    19d4:	6f 93       	push	r22
    19d6:	ff 93       	push	r31
    19d8:	ef 93       	push	r30
    19da:	9b 01       	movw	r18, r22
    19dc:	ac 01       	movw	r20, r24
    19de:	55 df       	rcall	.-342    	; 0x188a <__mulsf3>
    19e0:	ef 91       	pop	r30
    19e2:	ff 91       	pop	r31
    19e4:	05 d0       	rcall	.+10     	; 0x19f0 <__fp_powser>
    19e6:	2f 91       	pop	r18
    19e8:	3f 91       	pop	r19
    19ea:	4f 91       	pop	r20
    19ec:	5f 91       	pop	r21
    19ee:	4d cf       	rjmp	.-358    	; 0x188a <__mulsf3>

000019f0 <__fp_powser>:
    19f0:	df 93       	push	r29
    19f2:	cf 93       	push	r28
    19f4:	1f 93       	push	r17
    19f6:	0f 93       	push	r16
    19f8:	ff 92       	push	r15
    19fa:	ef 92       	push	r14
    19fc:	df 92       	push	r13
    19fe:	7b 01       	movw	r14, r22
    1a00:	8c 01       	movw	r16, r24
    1a02:	68 94       	set
    1a04:	05 c0       	rjmp	.+10     	; 0x1a10 <__fp_powser+0x20>
    1a06:	da 2e       	mov	r13, r26
    1a08:	ef 01       	movw	r28, r30
    1a0a:	4b df       	rcall	.-362    	; 0x18a2 <__mulsf3x>
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	e8 94       	clt
    1a10:	a5 91       	lpm	r26, Z+
    1a12:	25 91       	lpm	r18, Z+
    1a14:	35 91       	lpm	r19, Z+
    1a16:	45 91       	lpm	r20, Z+
    1a18:	55 91       	lpm	r21, Z+
    1a1a:	ae f3       	brts	.-22     	; 0x1a06 <__fp_powser+0x16>
    1a1c:	ef 01       	movw	r28, r30
    1a1e:	3c dd       	rcall	.-1416   	; 0x1498 <__addsf3x>
    1a20:	fe 01       	movw	r30, r28
    1a22:	97 01       	movw	r18, r14
    1a24:	a8 01       	movw	r20, r16
    1a26:	da 94       	dec	r13
    1a28:	79 f7       	brne	.-34     	; 0x1a08 <__fp_powser+0x18>
    1a2a:	df 90       	pop	r13
    1a2c:	ef 90       	pop	r14
    1a2e:	ff 90       	pop	r15
    1a30:	0f 91       	pop	r16
    1a32:	1f 91       	pop	r17
    1a34:	cf 91       	pop	r28
    1a36:	df 91       	pop	r29
    1a38:	08 95       	ret

00001a3a <vfprintf>:
    1a3a:	2f 92       	push	r2
    1a3c:	3f 92       	push	r3
    1a3e:	4f 92       	push	r4
    1a40:	5f 92       	push	r5
    1a42:	6f 92       	push	r6
    1a44:	7f 92       	push	r7
    1a46:	8f 92       	push	r8
    1a48:	9f 92       	push	r9
    1a4a:	af 92       	push	r10
    1a4c:	bf 92       	push	r11
    1a4e:	cf 92       	push	r12
    1a50:	df 92       	push	r13
    1a52:	ef 92       	push	r14
    1a54:	ff 92       	push	r15
    1a56:	0f 93       	push	r16
    1a58:	1f 93       	push	r17
    1a5a:	cf 93       	push	r28
    1a5c:	df 93       	push	r29
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    1a62:	63 97       	sbiw	r28, 0x13	; 19
    1a64:	cd bf       	out	0x3d, r28	; 61
    1a66:	de bf       	out	0x3e, r29	; 62
    1a68:	7c 01       	movw	r14, r24
    1a6a:	1b 01       	movw	r2, r22
    1a6c:	6a 01       	movw	r12, r20
    1a6e:	fc 01       	movw	r30, r24
    1a70:	16 82       	std	Z+6, r1	; 0x06
    1a72:	17 82       	std	Z+7, r1	; 0x07
    1a74:	83 81       	ldd	r24, Z+3	; 0x03
    1a76:	81 ff       	sbrs	r24, 1
    1a78:	49 c3       	rjmp	.+1682   	; 0x210c <vfprintf+0x6d2>
    1a7a:	be 01       	movw	r22, r28
    1a7c:	6f 5f       	subi	r22, 0xFF	; 255
    1a7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a80:	4b 01       	movw	r8, r22
    1a82:	f7 01       	movw	r30, r14
    1a84:	93 81       	ldd	r25, Z+3	; 0x03
    1a86:	f1 01       	movw	r30, r2
    1a88:	93 fd       	sbrc	r25, 3
    1a8a:	85 91       	lpm	r24, Z+
    1a8c:	93 ff       	sbrs	r25, 3
    1a8e:	81 91       	ld	r24, Z+
    1a90:	1f 01       	movw	r2, r30
    1a92:	88 23       	and	r24, r24
    1a94:	09 f4       	brne	.+2      	; 0x1a98 <vfprintf+0x5e>
    1a96:	36 c3       	rjmp	.+1644   	; 0x2104 <vfprintf+0x6ca>
    1a98:	85 32       	cpi	r24, 0x25	; 37
    1a9a:	39 f4       	brne	.+14     	; 0x1aaa <vfprintf+0x70>
    1a9c:	93 fd       	sbrc	r25, 3
    1a9e:	85 91       	lpm	r24, Z+
    1aa0:	93 ff       	sbrs	r25, 3
    1aa2:	81 91       	ld	r24, Z+
    1aa4:	1f 01       	movw	r2, r30
    1aa6:	85 32       	cpi	r24, 0x25	; 37
    1aa8:	31 f4       	brne	.+12     	; 0x1ab6 <vfprintf+0x7c>
    1aaa:	b7 01       	movw	r22, r14
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	34 d4       	rcall	.+2152   	; 0x2318 <fputc>
    1ab0:	56 01       	movw	r10, r12
    1ab2:	65 01       	movw	r12, r10
    1ab4:	e6 cf       	rjmp	.-52     	; 0x1a82 <vfprintf+0x48>
    1ab6:	10 e0       	ldi	r17, 0x00	; 0
    1ab8:	51 2c       	mov	r5, r1
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	20 32       	cpi	r18, 0x20	; 32
    1abe:	a0 f4       	brcc	.+40     	; 0x1ae8 <vfprintf+0xae>
    1ac0:	8b 32       	cpi	r24, 0x2B	; 43
    1ac2:	69 f0       	breq	.+26     	; 0x1ade <vfprintf+0xa4>
    1ac4:	30 f4       	brcc	.+12     	; 0x1ad2 <vfprintf+0x98>
    1ac6:	80 32       	cpi	r24, 0x20	; 32
    1ac8:	59 f0       	breq	.+22     	; 0x1ae0 <vfprintf+0xa6>
    1aca:	83 32       	cpi	r24, 0x23	; 35
    1acc:	69 f4       	brne	.+26     	; 0x1ae8 <vfprintf+0xae>
    1ace:	20 61       	ori	r18, 0x10	; 16
    1ad0:	2c c0       	rjmp	.+88     	; 0x1b2a <vfprintf+0xf0>
    1ad2:	8d 32       	cpi	r24, 0x2D	; 45
    1ad4:	39 f0       	breq	.+14     	; 0x1ae4 <vfprintf+0xaa>
    1ad6:	80 33       	cpi	r24, 0x30	; 48
    1ad8:	39 f4       	brne	.+14     	; 0x1ae8 <vfprintf+0xae>
    1ada:	21 60       	ori	r18, 0x01	; 1
    1adc:	26 c0       	rjmp	.+76     	; 0x1b2a <vfprintf+0xf0>
    1ade:	22 60       	ori	r18, 0x02	; 2
    1ae0:	24 60       	ori	r18, 0x04	; 4
    1ae2:	23 c0       	rjmp	.+70     	; 0x1b2a <vfprintf+0xf0>
    1ae4:	28 60       	ori	r18, 0x08	; 8
    1ae6:	21 c0       	rjmp	.+66     	; 0x1b2a <vfprintf+0xf0>
    1ae8:	27 fd       	sbrc	r18, 7
    1aea:	27 c0       	rjmp	.+78     	; 0x1b3a <vfprintf+0x100>
    1aec:	30 ed       	ldi	r19, 0xD0	; 208
    1aee:	38 0f       	add	r19, r24
    1af0:	3a 30       	cpi	r19, 0x0A	; 10
    1af2:	78 f4       	brcc	.+30     	; 0x1b12 <vfprintf+0xd8>
    1af4:	26 ff       	sbrs	r18, 6
    1af6:	06 c0       	rjmp	.+12     	; 0x1b04 <vfprintf+0xca>
    1af8:	fa e0       	ldi	r31, 0x0A	; 10
    1afa:	1f 9f       	mul	r17, r31
    1afc:	30 0d       	add	r19, r0
    1afe:	11 24       	eor	r1, r1
    1b00:	13 2f       	mov	r17, r19
    1b02:	13 c0       	rjmp	.+38     	; 0x1b2a <vfprintf+0xf0>
    1b04:	6a e0       	ldi	r22, 0x0A	; 10
    1b06:	56 9e       	mul	r5, r22
    1b08:	30 0d       	add	r19, r0
    1b0a:	11 24       	eor	r1, r1
    1b0c:	53 2e       	mov	r5, r19
    1b0e:	20 62       	ori	r18, 0x20	; 32
    1b10:	0c c0       	rjmp	.+24     	; 0x1b2a <vfprintf+0xf0>
    1b12:	8e 32       	cpi	r24, 0x2E	; 46
    1b14:	21 f4       	brne	.+8      	; 0x1b1e <vfprintf+0xe4>
    1b16:	26 fd       	sbrc	r18, 6
    1b18:	f5 c2       	rjmp	.+1514   	; 0x2104 <vfprintf+0x6ca>
    1b1a:	20 64       	ori	r18, 0x40	; 64
    1b1c:	06 c0       	rjmp	.+12     	; 0x1b2a <vfprintf+0xf0>
    1b1e:	8c 36       	cpi	r24, 0x6C	; 108
    1b20:	11 f4       	brne	.+4      	; 0x1b26 <vfprintf+0xec>
    1b22:	20 68       	ori	r18, 0x80	; 128
    1b24:	02 c0       	rjmp	.+4      	; 0x1b2a <vfprintf+0xf0>
    1b26:	88 36       	cpi	r24, 0x68	; 104
    1b28:	41 f4       	brne	.+16     	; 0x1b3a <vfprintf+0x100>
    1b2a:	f1 01       	movw	r30, r2
    1b2c:	93 fd       	sbrc	r25, 3
    1b2e:	85 91       	lpm	r24, Z+
    1b30:	93 ff       	sbrs	r25, 3
    1b32:	81 91       	ld	r24, Z+
    1b34:	1f 01       	movw	r2, r30
    1b36:	81 11       	cpse	r24, r1
    1b38:	c1 cf       	rjmp	.-126    	; 0x1abc <vfprintf+0x82>
    1b3a:	9b eb       	ldi	r25, 0xBB	; 187
    1b3c:	98 0f       	add	r25, r24
    1b3e:	93 30       	cpi	r25, 0x03	; 3
    1b40:	18 f4       	brcc	.+6      	; 0x1b48 <vfprintf+0x10e>
    1b42:	20 61       	ori	r18, 0x10	; 16
    1b44:	80 5e       	subi	r24, 0xE0	; 224
    1b46:	06 c0       	rjmp	.+12     	; 0x1b54 <vfprintf+0x11a>
    1b48:	9b e9       	ldi	r25, 0x9B	; 155
    1b4a:	98 0f       	add	r25, r24
    1b4c:	93 30       	cpi	r25, 0x03	; 3
    1b4e:	08 f0       	brcs	.+2      	; 0x1b52 <vfprintf+0x118>
    1b50:	9a c1       	rjmp	.+820    	; 0x1e86 <vfprintf+0x44c>
    1b52:	2f 7e       	andi	r18, 0xEF	; 239
    1b54:	26 ff       	sbrs	r18, 6
    1b56:	16 e0       	ldi	r17, 0x06	; 6
    1b58:	2f 73       	andi	r18, 0x3F	; 63
    1b5a:	72 2e       	mov	r7, r18
    1b5c:	85 36       	cpi	r24, 0x65	; 101
    1b5e:	21 f4       	brne	.+8      	; 0x1b68 <vfprintf+0x12e>
    1b60:	f2 2f       	mov	r31, r18
    1b62:	f0 64       	ori	r31, 0x40	; 64
    1b64:	7f 2e       	mov	r7, r31
    1b66:	08 c0       	rjmp	.+16     	; 0x1b78 <vfprintf+0x13e>
    1b68:	86 36       	cpi	r24, 0x66	; 102
    1b6a:	21 f4       	brne	.+8      	; 0x1b74 <vfprintf+0x13a>
    1b6c:	62 2f       	mov	r22, r18
    1b6e:	60 68       	ori	r22, 0x80	; 128
    1b70:	76 2e       	mov	r7, r22
    1b72:	02 c0       	rjmp	.+4      	; 0x1b78 <vfprintf+0x13e>
    1b74:	11 11       	cpse	r17, r1
    1b76:	11 50       	subi	r17, 0x01	; 1
    1b78:	77 fe       	sbrs	r7, 7
    1b7a:	07 c0       	rjmp	.+14     	; 0x1b8a <vfprintf+0x150>
    1b7c:	1c 33       	cpi	r17, 0x3C	; 60
    1b7e:	48 f4       	brcc	.+18     	; 0x1b92 <vfprintf+0x158>
    1b80:	44 24       	eor	r4, r4
    1b82:	43 94       	inc	r4
    1b84:	41 0e       	add	r4, r17
    1b86:	27 e0       	ldi	r18, 0x07	; 7
    1b88:	0b c0       	rjmp	.+22     	; 0x1ba0 <vfprintf+0x166>
    1b8a:	18 30       	cpi	r17, 0x08	; 8
    1b8c:	30 f4       	brcc	.+12     	; 0x1b9a <vfprintf+0x160>
    1b8e:	21 2f       	mov	r18, r17
    1b90:	06 c0       	rjmp	.+12     	; 0x1b9e <vfprintf+0x164>
    1b92:	27 e0       	ldi	r18, 0x07	; 7
    1b94:	4c e3       	ldi	r20, 0x3C	; 60
    1b96:	44 2e       	mov	r4, r20
    1b98:	03 c0       	rjmp	.+6      	; 0x1ba0 <vfprintf+0x166>
    1b9a:	27 e0       	ldi	r18, 0x07	; 7
    1b9c:	17 e0       	ldi	r17, 0x07	; 7
    1b9e:	41 2c       	mov	r4, r1
    1ba0:	56 01       	movw	r10, r12
    1ba2:	74 e0       	ldi	r23, 0x04	; 4
    1ba4:	a7 0e       	add	r10, r23
    1ba6:	b1 1c       	adc	r11, r1
    1ba8:	f6 01       	movw	r30, r12
    1baa:	60 81       	ld	r22, Z
    1bac:	71 81       	ldd	r23, Z+1	; 0x01
    1bae:	82 81       	ldd	r24, Z+2	; 0x02
    1bb0:	93 81       	ldd	r25, Z+3	; 0x03
    1bb2:	04 2d       	mov	r16, r4
    1bb4:	a4 01       	movw	r20, r8
    1bb6:	c2 d2       	rcall	.+1412   	; 0x213c <__ftoa_engine>
    1bb8:	6c 01       	movw	r12, r24
    1bba:	09 81       	ldd	r16, Y+1	; 0x01
    1bbc:	00 ff       	sbrs	r16, 0
    1bbe:	02 c0       	rjmp	.+4      	; 0x1bc4 <vfprintf+0x18a>
    1bc0:	03 ff       	sbrs	r16, 3
    1bc2:	06 c0       	rjmp	.+12     	; 0x1bd0 <vfprintf+0x196>
    1bc4:	71 fc       	sbrc	r7, 1
    1bc6:	07 c0       	rjmp	.+14     	; 0x1bd6 <vfprintf+0x19c>
    1bc8:	72 fc       	sbrc	r7, 2
    1bca:	08 c0       	rjmp	.+16     	; 0x1bdc <vfprintf+0x1a2>
    1bcc:	61 2c       	mov	r6, r1
    1bce:	08 c0       	rjmp	.+16     	; 0x1be0 <vfprintf+0x1a6>
    1bd0:	3d e2       	ldi	r19, 0x2D	; 45
    1bd2:	63 2e       	mov	r6, r19
    1bd4:	05 c0       	rjmp	.+10     	; 0x1be0 <vfprintf+0x1a6>
    1bd6:	2b e2       	ldi	r18, 0x2B	; 43
    1bd8:	62 2e       	mov	r6, r18
    1bda:	02 c0       	rjmp	.+4      	; 0x1be0 <vfprintf+0x1a6>
    1bdc:	90 e2       	ldi	r25, 0x20	; 32
    1bde:	69 2e       	mov	r6, r25
    1be0:	80 2f       	mov	r24, r16
    1be2:	8c 70       	andi	r24, 0x0C	; 12
    1be4:	81 f1       	breq	.+96     	; 0x1c46 <vfprintf+0x20c>
    1be6:	66 20       	and	r6, r6
    1be8:	11 f0       	breq	.+4      	; 0x1bee <vfprintf+0x1b4>
    1bea:	84 e0       	ldi	r24, 0x04	; 4
    1bec:	01 c0       	rjmp	.+2      	; 0x1bf0 <vfprintf+0x1b6>
    1bee:	83 e0       	ldi	r24, 0x03	; 3
    1bf0:	85 15       	cp	r24, r5
    1bf2:	10 f0       	brcs	.+4      	; 0x1bf8 <vfprintf+0x1be>
    1bf4:	51 2c       	mov	r5, r1
    1bf6:	0a c0       	rjmp	.+20     	; 0x1c0c <vfprintf+0x1d2>
    1bf8:	58 1a       	sub	r5, r24
    1bfa:	73 fc       	sbrc	r7, 3
    1bfc:	07 c0       	rjmp	.+14     	; 0x1c0c <vfprintf+0x1d2>
    1bfe:	b7 01       	movw	r22, r14
    1c00:	80 e2       	ldi	r24, 0x20	; 32
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	89 d3       	rcall	.+1810   	; 0x2318 <fputc>
    1c06:	5a 94       	dec	r5
    1c08:	d1 f7       	brne	.-12     	; 0x1bfe <vfprintf+0x1c4>
    1c0a:	f4 cf       	rjmp	.-24     	; 0x1bf4 <vfprintf+0x1ba>
    1c0c:	66 20       	and	r6, r6
    1c0e:	21 f0       	breq	.+8      	; 0x1c18 <vfprintf+0x1de>
    1c10:	b7 01       	movw	r22, r14
    1c12:	86 2d       	mov	r24, r6
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	80 d3       	rcall	.+1792   	; 0x2318 <fputc>
    1c18:	03 fd       	sbrc	r16, 3
    1c1a:	03 c0       	rjmp	.+6      	; 0x1c22 <vfprintf+0x1e8>
    1c1c:	0e e1       	ldi	r16, 0x1E	; 30
    1c1e:	12 e0       	ldi	r17, 0x02	; 2
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <vfprintf+0x1ec>
    1c22:	0a e1       	ldi	r16, 0x1A	; 26
    1c24:	12 e0       	ldi	r17, 0x02	; 2
    1c26:	f7 2d       	mov	r31, r7
    1c28:	f0 71       	andi	r31, 0x10	; 16
    1c2a:	7f 2e       	mov	r7, r31
    1c2c:	f8 01       	movw	r30, r16
    1c2e:	84 91       	lpm	r24, Z
    1c30:	88 23       	and	r24, r24
    1c32:	09 f4       	brne	.+2      	; 0x1c36 <vfprintf+0x1fc>
    1c34:	5e c2       	rjmp	.+1212   	; 0x20f2 <vfprintf+0x6b8>
    1c36:	71 10       	cpse	r7, r1
    1c38:	80 52       	subi	r24, 0x20	; 32
    1c3a:	b7 01       	movw	r22, r14
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	6c d3       	rcall	.+1752   	; 0x2318 <fputc>
    1c40:	0f 5f       	subi	r16, 0xFF	; 255
    1c42:	1f 4f       	sbci	r17, 0xFF	; 255
    1c44:	f3 cf       	rjmp	.-26     	; 0x1c2c <vfprintf+0x1f2>
    1c46:	77 fe       	sbrs	r7, 7
    1c48:	0f c0       	rjmp	.+30     	; 0x1c68 <vfprintf+0x22e>
    1c4a:	4c 0c       	add	r4, r12
    1c4c:	04 ff       	sbrs	r16, 4
    1c4e:	04 c0       	rjmp	.+8      	; 0x1c58 <vfprintf+0x21e>
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	81 33       	cpi	r24, 0x31	; 49
    1c54:	09 f4       	brne	.+2      	; 0x1c58 <vfprintf+0x21e>
    1c56:	4a 94       	dec	r4
    1c58:	14 14       	cp	r1, r4
    1c5a:	74 f5       	brge	.+92     	; 0x1cb8 <vfprintf+0x27e>
    1c5c:	f8 e0       	ldi	r31, 0x08	; 8
    1c5e:	f4 15       	cp	r31, r4
    1c60:	78 f5       	brcc	.+94     	; 0x1cc0 <vfprintf+0x286>
    1c62:	88 e0       	ldi	r24, 0x08	; 8
    1c64:	48 2e       	mov	r4, r24
    1c66:	2c c0       	rjmp	.+88     	; 0x1cc0 <vfprintf+0x286>
    1c68:	76 fc       	sbrc	r7, 6
    1c6a:	2a c0       	rjmp	.+84     	; 0x1cc0 <vfprintf+0x286>
    1c6c:	81 2f       	mov	r24, r17
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	8c 15       	cp	r24, r12
    1c72:	9d 05       	cpc	r25, r13
    1c74:	9c f0       	brlt	.+38     	; 0x1c9c <vfprintf+0x262>
    1c76:	6c ef       	ldi	r22, 0xFC	; 252
    1c78:	c6 16       	cp	r12, r22
    1c7a:	6f ef       	ldi	r22, 0xFF	; 255
    1c7c:	d6 06       	cpc	r13, r22
    1c7e:	74 f0       	brlt	.+28     	; 0x1c9c <vfprintf+0x262>
    1c80:	77 2d       	mov	r23, r7
    1c82:	70 68       	ori	r23, 0x80	; 128
    1c84:	77 2e       	mov	r7, r23
    1c86:	0a c0       	rjmp	.+20     	; 0x1c9c <vfprintf+0x262>
    1c88:	e2 e0       	ldi	r30, 0x02	; 2
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	ec 0f       	add	r30, r28
    1c8e:	fd 1f       	adc	r31, r29
    1c90:	e1 0f       	add	r30, r17
    1c92:	f1 1d       	adc	r31, r1
    1c94:	80 81       	ld	r24, Z
    1c96:	80 33       	cpi	r24, 0x30	; 48
    1c98:	19 f4       	brne	.+6      	; 0x1ca0 <vfprintf+0x266>
    1c9a:	11 50       	subi	r17, 0x01	; 1
    1c9c:	11 11       	cpse	r17, r1
    1c9e:	f4 cf       	rjmp	.-24     	; 0x1c88 <vfprintf+0x24e>
    1ca0:	77 fe       	sbrs	r7, 7
    1ca2:	0e c0       	rjmp	.+28     	; 0x1cc0 <vfprintf+0x286>
    1ca4:	44 24       	eor	r4, r4
    1ca6:	43 94       	inc	r4
    1ca8:	41 0e       	add	r4, r17
    1caa:	81 2f       	mov	r24, r17
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	c8 16       	cp	r12, r24
    1cb0:	d9 06       	cpc	r13, r25
    1cb2:	2c f4       	brge	.+10     	; 0x1cbe <vfprintf+0x284>
    1cb4:	1c 19       	sub	r17, r12
    1cb6:	04 c0       	rjmp	.+8      	; 0x1cc0 <vfprintf+0x286>
    1cb8:	44 24       	eor	r4, r4
    1cba:	43 94       	inc	r4
    1cbc:	01 c0       	rjmp	.+2      	; 0x1cc0 <vfprintf+0x286>
    1cbe:	10 e0       	ldi	r17, 0x00	; 0
    1cc0:	77 fe       	sbrs	r7, 7
    1cc2:	07 c0       	rjmp	.+14     	; 0x1cd2 <vfprintf+0x298>
    1cc4:	1c 14       	cp	r1, r12
    1cc6:	1d 04       	cpc	r1, r13
    1cc8:	3c f4       	brge	.+14     	; 0x1cd8 <vfprintf+0x29e>
    1cca:	96 01       	movw	r18, r12
    1ccc:	2f 5f       	subi	r18, 0xFF	; 255
    1cce:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd0:	05 c0       	rjmp	.+10     	; 0x1cdc <vfprintf+0x2a2>
    1cd2:	25 e0       	ldi	r18, 0x05	; 5
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <vfprintf+0x2a2>
    1cd8:	21 e0       	ldi	r18, 0x01	; 1
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	66 20       	and	r6, r6
    1cde:	11 f0       	breq	.+4      	; 0x1ce4 <vfprintf+0x2aa>
    1ce0:	2f 5f       	subi	r18, 0xFF	; 255
    1ce2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce4:	11 23       	and	r17, r17
    1ce6:	31 f0       	breq	.+12     	; 0x1cf4 <vfprintf+0x2ba>
    1ce8:	41 2f       	mov	r20, r17
    1cea:	50 e0       	ldi	r21, 0x00	; 0
    1cec:	4f 5f       	subi	r20, 0xFF	; 255
    1cee:	5f 4f       	sbci	r21, 0xFF	; 255
    1cf0:	24 0f       	add	r18, r20
    1cf2:	35 1f       	adc	r19, r21
    1cf4:	45 2d       	mov	r20, r5
    1cf6:	50 e0       	ldi	r21, 0x00	; 0
    1cf8:	24 17       	cp	r18, r20
    1cfa:	35 07       	cpc	r19, r21
    1cfc:	14 f4       	brge	.+4      	; 0x1d02 <vfprintf+0x2c8>
    1cfe:	52 1a       	sub	r5, r18
    1d00:	01 c0       	rjmp	.+2      	; 0x1d04 <vfprintf+0x2ca>
    1d02:	51 2c       	mov	r5, r1
    1d04:	87 2d       	mov	r24, r7
    1d06:	89 70       	andi	r24, 0x09	; 9
    1d08:	41 f4       	brne	.+16     	; 0x1d1a <vfprintf+0x2e0>
    1d0a:	55 20       	and	r5, r5
    1d0c:	31 f0       	breq	.+12     	; 0x1d1a <vfprintf+0x2e0>
    1d0e:	b7 01       	movw	r22, r14
    1d10:	80 e2       	ldi	r24, 0x20	; 32
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	01 d3       	rcall	.+1538   	; 0x2318 <fputc>
    1d16:	5a 94       	dec	r5
    1d18:	f8 cf       	rjmp	.-16     	; 0x1d0a <vfprintf+0x2d0>
    1d1a:	66 20       	and	r6, r6
    1d1c:	21 f0       	breq	.+8      	; 0x1d26 <vfprintf+0x2ec>
    1d1e:	b7 01       	movw	r22, r14
    1d20:	86 2d       	mov	r24, r6
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	f9 d2       	rcall	.+1522   	; 0x2318 <fputc>
    1d26:	73 fc       	sbrc	r7, 3
    1d28:	08 c0       	rjmp	.+16     	; 0x1d3a <vfprintf+0x300>
    1d2a:	55 20       	and	r5, r5
    1d2c:	31 f0       	breq	.+12     	; 0x1d3a <vfprintf+0x300>
    1d2e:	b7 01       	movw	r22, r14
    1d30:	80 e3       	ldi	r24, 0x30	; 48
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	f1 d2       	rcall	.+1506   	; 0x2318 <fputc>
    1d36:	5a 94       	dec	r5
    1d38:	f8 cf       	rjmp	.-16     	; 0x1d2a <vfprintf+0x2f0>
    1d3a:	77 fe       	sbrs	r7, 7
    1d3c:	5d c0       	rjmp	.+186    	; 0x1df8 <vfprintf+0x3be>
    1d3e:	9c 2d       	mov	r25, r12
    1d40:	8d 2d       	mov	r24, r13
    1d42:	d7 fe       	sbrs	r13, 7
    1d44:	02 c0       	rjmp	.+4      	; 0x1d4a <vfprintf+0x310>
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	69 2e       	mov	r6, r25
    1d4c:	78 2e       	mov	r7, r24
    1d4e:	40 e0       	ldi	r20, 0x00	; 0
    1d50:	50 e0       	ldi	r21, 0x00	; 0
    1d52:	c6 01       	movw	r24, r12
    1d54:	84 19       	sub	r24, r4
    1d56:	91 09       	sbc	r25, r1
    1d58:	8c 87       	std	Y+12, r24	; 0x0c
    1d5a:	9d 87       	std	Y+13, r25	; 0x0d
    1d5c:	96 01       	movw	r18, r12
    1d5e:	26 19       	sub	r18, r6
    1d60:	37 09       	sbc	r19, r7
    1d62:	28 0d       	add	r18, r8
    1d64:	39 1d       	adc	r19, r9
    1d66:	81 2f       	mov	r24, r17
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	ee 27       	eor	r30, r30
    1d6c:	ff 27       	eor	r31, r31
    1d6e:	e8 1b       	sub	r30, r24
    1d70:	f9 0b       	sbc	r31, r25
    1d72:	ee 87       	std	Y+14, r30	; 0x0e
    1d74:	ff 87       	std	Y+15, r31	; 0x0f
    1d76:	ff ef       	ldi	r31, 0xFF	; 255
    1d78:	6f 16       	cp	r6, r31
    1d7a:	7f 06       	cpc	r7, r31
    1d7c:	61 f4       	brne	.+24     	; 0x1d96 <vfprintf+0x35c>
    1d7e:	b7 01       	movw	r22, r14
    1d80:	8e e2       	ldi	r24, 0x2E	; 46
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	2b 8b       	std	Y+19, r18	; 0x13
    1d86:	3a 8b       	std	Y+18, r19	; 0x12
    1d88:	48 8b       	std	Y+16, r20	; 0x10
    1d8a:	59 8b       	std	Y+17, r21	; 0x11
    1d8c:	c5 d2       	rcall	.+1418   	; 0x2318 <fputc>
    1d8e:	59 89       	ldd	r21, Y+17	; 0x11
    1d90:	48 89       	ldd	r20, Y+16	; 0x10
    1d92:	3a 89       	ldd	r19, Y+18	; 0x12
    1d94:	2b 89       	ldd	r18, Y+19	; 0x13
    1d96:	c6 14       	cp	r12, r6
    1d98:	d7 04       	cpc	r13, r7
    1d9a:	54 f0       	brlt	.+20     	; 0x1db0 <vfprintf+0x376>
    1d9c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d9e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1da0:	66 15       	cp	r22, r6
    1da2:	77 05       	cpc	r23, r7
    1da4:	2c f4       	brge	.+10     	; 0x1db0 <vfprintf+0x376>
    1da6:	f9 01       	movw	r30, r18
    1da8:	e4 0f       	add	r30, r20
    1daa:	f5 1f       	adc	r31, r21
    1dac:	81 81       	ldd	r24, Z+1	; 0x01
    1dae:	01 c0       	rjmp	.+2      	; 0x1db2 <vfprintf+0x378>
    1db0:	80 e3       	ldi	r24, 0x30	; 48
    1db2:	71 e0       	ldi	r23, 0x01	; 1
    1db4:	67 1a       	sub	r6, r23
    1db6:	71 08       	sbc	r7, r1
    1db8:	4f 5f       	subi	r20, 0xFF	; 255
    1dba:	5f 4f       	sbci	r21, 0xFF	; 255
    1dbc:	ee 85       	ldd	r30, Y+14	; 0x0e
    1dbe:	ff 85       	ldd	r31, Y+15	; 0x0f
    1dc0:	6e 16       	cp	r6, r30
    1dc2:	7f 06       	cpc	r7, r31
    1dc4:	64 f0       	brlt	.+24     	; 0x1dde <vfprintf+0x3a4>
    1dc6:	b7 01       	movw	r22, r14
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	2b 8b       	std	Y+19, r18	; 0x13
    1dcc:	3a 8b       	std	Y+18, r19	; 0x12
    1dce:	48 8b       	std	Y+16, r20	; 0x10
    1dd0:	59 8b       	std	Y+17, r21	; 0x11
    1dd2:	a2 d2       	rcall	.+1348   	; 0x2318 <fputc>
    1dd4:	2b 89       	ldd	r18, Y+19	; 0x13
    1dd6:	3a 89       	ldd	r19, Y+18	; 0x12
    1dd8:	48 89       	ldd	r20, Y+16	; 0x10
    1dda:	59 89       	ldd	r21, Y+17	; 0x11
    1ddc:	cc cf       	rjmp	.-104    	; 0x1d76 <vfprintf+0x33c>
    1dde:	6c 14       	cp	r6, r12
    1de0:	7d 04       	cpc	r7, r13
    1de2:	39 f4       	brne	.+14     	; 0x1df2 <vfprintf+0x3b8>
    1de4:	9a 81       	ldd	r25, Y+2	; 0x02
    1de6:	96 33       	cpi	r25, 0x36	; 54
    1de8:	18 f4       	brcc	.+6      	; 0x1df0 <vfprintf+0x3b6>
    1dea:	95 33       	cpi	r25, 0x35	; 53
    1dec:	11 f4       	brne	.+4      	; 0x1df2 <vfprintf+0x3b8>
    1dee:	04 ff       	sbrs	r16, 4
    1df0:	81 e3       	ldi	r24, 0x31	; 49
    1df2:	b7 01       	movw	r22, r14
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	45 c0       	rjmp	.+138    	; 0x1e82 <vfprintf+0x448>
    1df8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfa:	81 33       	cpi	r24, 0x31	; 49
    1dfc:	09 f0       	breq	.+2      	; 0x1e00 <vfprintf+0x3c6>
    1dfe:	0f 7e       	andi	r16, 0xEF	; 239
    1e00:	b7 01       	movw	r22, r14
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	89 d2       	rcall	.+1298   	; 0x2318 <fputc>
    1e06:	11 11       	cpse	r17, r1
    1e08:	05 c0       	rjmp	.+10     	; 0x1e14 <vfprintf+0x3da>
    1e0a:	74 fe       	sbrs	r7, 4
    1e0c:	16 c0       	rjmp	.+44     	; 0x1e3a <vfprintf+0x400>
    1e0e:	85 e4       	ldi	r24, 0x45	; 69
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	15 c0       	rjmp	.+42     	; 0x1e3e <vfprintf+0x404>
    1e14:	b7 01       	movw	r22, r14
    1e16:	8e e2       	ldi	r24, 0x2E	; 46
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	7e d2       	rcall	.+1276   	; 0x2318 <fputc>
    1e1c:	82 e0       	ldi	r24, 0x02	; 2
    1e1e:	66 24       	eor	r6, r6
    1e20:	63 94       	inc	r6
    1e22:	68 0e       	add	r6, r24
    1e24:	f4 01       	movw	r30, r8
    1e26:	e8 0f       	add	r30, r24
    1e28:	f1 1d       	adc	r31, r1
    1e2a:	80 81       	ld	r24, Z
    1e2c:	b7 01       	movw	r22, r14
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	73 d2       	rcall	.+1254   	; 0x2318 <fputc>
    1e32:	11 50       	subi	r17, 0x01	; 1
    1e34:	51 f3       	breq	.-44     	; 0x1e0a <vfprintf+0x3d0>
    1e36:	86 2d       	mov	r24, r6
    1e38:	f2 cf       	rjmp	.-28     	; 0x1e1e <vfprintf+0x3e4>
    1e3a:	85 e6       	ldi	r24, 0x65	; 101
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	b7 01       	movw	r22, r14
    1e40:	6b d2       	rcall	.+1238   	; 0x2318 <fputc>
    1e42:	d7 fc       	sbrc	r13, 7
    1e44:	05 c0       	rjmp	.+10     	; 0x1e50 <vfprintf+0x416>
    1e46:	c1 14       	cp	r12, r1
    1e48:	d1 04       	cpc	r13, r1
    1e4a:	39 f4       	brne	.+14     	; 0x1e5a <vfprintf+0x420>
    1e4c:	04 ff       	sbrs	r16, 4
    1e4e:	05 c0       	rjmp	.+10     	; 0x1e5a <vfprintf+0x420>
    1e50:	d1 94       	neg	r13
    1e52:	c1 94       	neg	r12
    1e54:	d1 08       	sbc	r13, r1
    1e56:	8d e2       	ldi	r24, 0x2D	; 45
    1e58:	01 c0       	rjmp	.+2      	; 0x1e5c <vfprintf+0x422>
    1e5a:	8b e2       	ldi	r24, 0x2B	; 43
    1e5c:	b7 01       	movw	r22, r14
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	5b d2       	rcall	.+1206   	; 0x2318 <fputc>
    1e62:	80 e3       	ldi	r24, 0x30	; 48
    1e64:	6a e0       	ldi	r22, 0x0A	; 10
    1e66:	c6 16       	cp	r12, r22
    1e68:	d1 04       	cpc	r13, r1
    1e6a:	2c f0       	brlt	.+10     	; 0x1e76 <vfprintf+0x43c>
    1e6c:	8f 5f       	subi	r24, 0xFF	; 255
    1e6e:	fa e0       	ldi	r31, 0x0A	; 10
    1e70:	cf 1a       	sub	r12, r31
    1e72:	d1 08       	sbc	r13, r1
    1e74:	f7 cf       	rjmp	.-18     	; 0x1e64 <vfprintf+0x42a>
    1e76:	b7 01       	movw	r22, r14
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	4e d2       	rcall	.+1180   	; 0x2318 <fputc>
    1e7c:	b7 01       	movw	r22, r14
    1e7e:	c6 01       	movw	r24, r12
    1e80:	c0 96       	adiw	r24, 0x30	; 48
    1e82:	4a d2       	rcall	.+1172   	; 0x2318 <fputc>
    1e84:	36 c1       	rjmp	.+620    	; 0x20f2 <vfprintf+0x6b8>
    1e86:	83 36       	cpi	r24, 0x63	; 99
    1e88:	31 f0       	breq	.+12     	; 0x1e96 <vfprintf+0x45c>
    1e8a:	83 37       	cpi	r24, 0x73	; 115
    1e8c:	79 f0       	breq	.+30     	; 0x1eac <vfprintf+0x472>
    1e8e:	83 35       	cpi	r24, 0x53	; 83
    1e90:	09 f0       	breq	.+2      	; 0x1e94 <vfprintf+0x45a>
    1e92:	54 c0       	rjmp	.+168    	; 0x1f3c <vfprintf+0x502>
    1e94:	20 c0       	rjmp	.+64     	; 0x1ed6 <vfprintf+0x49c>
    1e96:	56 01       	movw	r10, r12
    1e98:	72 e0       	ldi	r23, 0x02	; 2
    1e9a:	a7 0e       	add	r10, r23
    1e9c:	b1 1c       	adc	r11, r1
    1e9e:	f6 01       	movw	r30, r12
    1ea0:	80 81       	ld	r24, Z
    1ea2:	89 83       	std	Y+1, r24	; 0x01
    1ea4:	01 e0       	ldi	r16, 0x01	; 1
    1ea6:	10 e0       	ldi	r17, 0x00	; 0
    1ea8:	64 01       	movw	r12, r8
    1eaa:	13 c0       	rjmp	.+38     	; 0x1ed2 <vfprintf+0x498>
    1eac:	56 01       	movw	r10, r12
    1eae:	f2 e0       	ldi	r31, 0x02	; 2
    1eb0:	af 0e       	add	r10, r31
    1eb2:	b1 1c       	adc	r11, r1
    1eb4:	f6 01       	movw	r30, r12
    1eb6:	c0 80       	ld	r12, Z
    1eb8:	d1 80       	ldd	r13, Z+1	; 0x01
    1eba:	26 ff       	sbrs	r18, 6
    1ebc:	03 c0       	rjmp	.+6      	; 0x1ec4 <vfprintf+0x48a>
    1ebe:	61 2f       	mov	r22, r17
    1ec0:	70 e0       	ldi	r23, 0x00	; 0
    1ec2:	02 c0       	rjmp	.+4      	; 0x1ec8 <vfprintf+0x48e>
    1ec4:	6f ef       	ldi	r22, 0xFF	; 255
    1ec6:	7f ef       	ldi	r23, 0xFF	; 255
    1ec8:	c6 01       	movw	r24, r12
    1eca:	2b 8b       	std	Y+19, r18	; 0x13
    1ecc:	1a d2       	rcall	.+1076   	; 0x2302 <strnlen>
    1ece:	8c 01       	movw	r16, r24
    1ed0:	2b 89       	ldd	r18, Y+19	; 0x13
    1ed2:	2f 77       	andi	r18, 0x7F	; 127
    1ed4:	14 c0       	rjmp	.+40     	; 0x1efe <vfprintf+0x4c4>
    1ed6:	56 01       	movw	r10, r12
    1ed8:	f2 e0       	ldi	r31, 0x02	; 2
    1eda:	af 0e       	add	r10, r31
    1edc:	b1 1c       	adc	r11, r1
    1ede:	f6 01       	movw	r30, r12
    1ee0:	c0 80       	ld	r12, Z
    1ee2:	d1 80       	ldd	r13, Z+1	; 0x01
    1ee4:	26 ff       	sbrs	r18, 6
    1ee6:	03 c0       	rjmp	.+6      	; 0x1eee <vfprintf+0x4b4>
    1ee8:	61 2f       	mov	r22, r17
    1eea:	70 e0       	ldi	r23, 0x00	; 0
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <vfprintf+0x4b8>
    1eee:	6f ef       	ldi	r22, 0xFF	; 255
    1ef0:	7f ef       	ldi	r23, 0xFF	; 255
    1ef2:	c6 01       	movw	r24, r12
    1ef4:	2b 8b       	std	Y+19, r18	; 0x13
    1ef6:	fa d1       	rcall	.+1012   	; 0x22ec <strnlen_P>
    1ef8:	8c 01       	movw	r16, r24
    1efa:	2b 89       	ldd	r18, Y+19	; 0x13
    1efc:	20 68       	ori	r18, 0x80	; 128
    1efe:	72 2e       	mov	r7, r18
    1f00:	23 fd       	sbrc	r18, 3
    1f02:	18 c0       	rjmp	.+48     	; 0x1f34 <vfprintf+0x4fa>
    1f04:	85 2d       	mov	r24, r5
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	08 17       	cp	r16, r24
    1f0a:	19 07       	cpc	r17, r25
    1f0c:	98 f4       	brcc	.+38     	; 0x1f34 <vfprintf+0x4fa>
    1f0e:	b7 01       	movw	r22, r14
    1f10:	80 e2       	ldi	r24, 0x20	; 32
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	01 d2       	rcall	.+1026   	; 0x2318 <fputc>
    1f16:	5a 94       	dec	r5
    1f18:	f5 cf       	rjmp	.-22     	; 0x1f04 <vfprintf+0x4ca>
    1f1a:	f6 01       	movw	r30, r12
    1f1c:	77 fc       	sbrc	r7, 7
    1f1e:	85 91       	lpm	r24, Z+
    1f20:	77 fe       	sbrs	r7, 7
    1f22:	81 91       	ld	r24, Z+
    1f24:	6f 01       	movw	r12, r30
    1f26:	b7 01       	movw	r22, r14
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	f6 d1       	rcall	.+1004   	; 0x2318 <fputc>
    1f2c:	51 10       	cpse	r5, r1
    1f2e:	5a 94       	dec	r5
    1f30:	01 50       	subi	r16, 0x01	; 1
    1f32:	11 09       	sbc	r17, r1
    1f34:	01 15       	cp	r16, r1
    1f36:	11 05       	cpc	r17, r1
    1f38:	81 f7       	brne	.-32     	; 0x1f1a <vfprintf+0x4e0>
    1f3a:	db c0       	rjmp	.+438    	; 0x20f2 <vfprintf+0x6b8>
    1f3c:	84 36       	cpi	r24, 0x64	; 100
    1f3e:	11 f0       	breq	.+4      	; 0x1f44 <vfprintf+0x50a>
    1f40:	89 36       	cpi	r24, 0x69	; 105
    1f42:	49 f5       	brne	.+82     	; 0x1f96 <vfprintf+0x55c>
    1f44:	56 01       	movw	r10, r12
    1f46:	27 ff       	sbrs	r18, 7
    1f48:	09 c0       	rjmp	.+18     	; 0x1f5c <vfprintf+0x522>
    1f4a:	f4 e0       	ldi	r31, 0x04	; 4
    1f4c:	af 0e       	add	r10, r31
    1f4e:	b1 1c       	adc	r11, r1
    1f50:	f6 01       	movw	r30, r12
    1f52:	60 81       	ld	r22, Z
    1f54:	71 81       	ldd	r23, Z+1	; 0x01
    1f56:	82 81       	ldd	r24, Z+2	; 0x02
    1f58:	93 81       	ldd	r25, Z+3	; 0x03
    1f5a:	0a c0       	rjmp	.+20     	; 0x1f70 <vfprintf+0x536>
    1f5c:	f2 e0       	ldi	r31, 0x02	; 2
    1f5e:	af 0e       	add	r10, r31
    1f60:	b1 1c       	adc	r11, r1
    1f62:	f6 01       	movw	r30, r12
    1f64:	60 81       	ld	r22, Z
    1f66:	71 81       	ldd	r23, Z+1	; 0x01
    1f68:	88 27       	eor	r24, r24
    1f6a:	77 fd       	sbrc	r23, 7
    1f6c:	80 95       	com	r24
    1f6e:	98 2f       	mov	r25, r24
    1f70:	02 2f       	mov	r16, r18
    1f72:	0f 76       	andi	r16, 0x6F	; 111
    1f74:	97 ff       	sbrs	r25, 7
    1f76:	08 c0       	rjmp	.+16     	; 0x1f88 <vfprintf+0x54e>
    1f78:	90 95       	com	r25
    1f7a:	80 95       	com	r24
    1f7c:	70 95       	com	r23
    1f7e:	61 95       	neg	r22
    1f80:	7f 4f       	sbci	r23, 0xFF	; 255
    1f82:	8f 4f       	sbci	r24, 0xFF	; 255
    1f84:	9f 4f       	sbci	r25, 0xFF	; 255
    1f86:	00 68       	ori	r16, 0x80	; 128
    1f88:	2a e0       	ldi	r18, 0x0A	; 10
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	a4 01       	movw	r20, r8
    1f8e:	07 d2       	rcall	.+1038   	; 0x239e <__ultoa_invert>
    1f90:	c8 2e       	mov	r12, r24
    1f92:	c8 18       	sub	r12, r8
    1f94:	3d c0       	rjmp	.+122    	; 0x2010 <vfprintf+0x5d6>
    1f96:	02 2f       	mov	r16, r18
    1f98:	85 37       	cpi	r24, 0x75	; 117
    1f9a:	21 f4       	brne	.+8      	; 0x1fa4 <vfprintf+0x56a>
    1f9c:	0f 7e       	andi	r16, 0xEF	; 239
    1f9e:	2a e0       	ldi	r18, 0x0A	; 10
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	1d c0       	rjmp	.+58     	; 0x1fde <vfprintf+0x5a4>
    1fa4:	09 7f       	andi	r16, 0xF9	; 249
    1fa6:	8f 36       	cpi	r24, 0x6F	; 111
    1fa8:	91 f0       	breq	.+36     	; 0x1fce <vfprintf+0x594>
    1faa:	18 f4       	brcc	.+6      	; 0x1fb2 <vfprintf+0x578>
    1fac:	88 35       	cpi	r24, 0x58	; 88
    1fae:	59 f0       	breq	.+22     	; 0x1fc6 <vfprintf+0x58c>
    1fb0:	a9 c0       	rjmp	.+338    	; 0x2104 <vfprintf+0x6ca>
    1fb2:	80 37       	cpi	r24, 0x70	; 112
    1fb4:	19 f0       	breq	.+6      	; 0x1fbc <vfprintf+0x582>
    1fb6:	88 37       	cpi	r24, 0x78	; 120
    1fb8:	11 f0       	breq	.+4      	; 0x1fbe <vfprintf+0x584>
    1fba:	a4 c0       	rjmp	.+328    	; 0x2104 <vfprintf+0x6ca>
    1fbc:	00 61       	ori	r16, 0x10	; 16
    1fbe:	04 ff       	sbrs	r16, 4
    1fc0:	09 c0       	rjmp	.+18     	; 0x1fd4 <vfprintf+0x59a>
    1fc2:	04 60       	ori	r16, 0x04	; 4
    1fc4:	07 c0       	rjmp	.+14     	; 0x1fd4 <vfprintf+0x59a>
    1fc6:	24 ff       	sbrs	r18, 4
    1fc8:	08 c0       	rjmp	.+16     	; 0x1fda <vfprintf+0x5a0>
    1fca:	06 60       	ori	r16, 0x06	; 6
    1fcc:	06 c0       	rjmp	.+12     	; 0x1fda <vfprintf+0x5a0>
    1fce:	28 e0       	ldi	r18, 0x08	; 8
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	05 c0       	rjmp	.+10     	; 0x1fde <vfprintf+0x5a4>
    1fd4:	20 e1       	ldi	r18, 0x10	; 16
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	02 c0       	rjmp	.+4      	; 0x1fde <vfprintf+0x5a4>
    1fda:	20 e1       	ldi	r18, 0x10	; 16
    1fdc:	32 e0       	ldi	r19, 0x02	; 2
    1fde:	56 01       	movw	r10, r12
    1fe0:	07 ff       	sbrs	r16, 7
    1fe2:	09 c0       	rjmp	.+18     	; 0x1ff6 <vfprintf+0x5bc>
    1fe4:	f4 e0       	ldi	r31, 0x04	; 4
    1fe6:	af 0e       	add	r10, r31
    1fe8:	b1 1c       	adc	r11, r1
    1fea:	f6 01       	movw	r30, r12
    1fec:	60 81       	ld	r22, Z
    1fee:	71 81       	ldd	r23, Z+1	; 0x01
    1ff0:	82 81       	ldd	r24, Z+2	; 0x02
    1ff2:	93 81       	ldd	r25, Z+3	; 0x03
    1ff4:	08 c0       	rjmp	.+16     	; 0x2006 <vfprintf+0x5cc>
    1ff6:	f2 e0       	ldi	r31, 0x02	; 2
    1ff8:	af 0e       	add	r10, r31
    1ffa:	b1 1c       	adc	r11, r1
    1ffc:	f6 01       	movw	r30, r12
    1ffe:	60 81       	ld	r22, Z
    2000:	71 81       	ldd	r23, Z+1	; 0x01
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	a4 01       	movw	r20, r8
    2008:	ca d1       	rcall	.+916    	; 0x239e <__ultoa_invert>
    200a:	c8 2e       	mov	r12, r24
    200c:	c8 18       	sub	r12, r8
    200e:	0f 77       	andi	r16, 0x7F	; 127
    2010:	06 ff       	sbrs	r16, 6
    2012:	0b c0       	rjmp	.+22     	; 0x202a <vfprintf+0x5f0>
    2014:	20 2f       	mov	r18, r16
    2016:	2e 7f       	andi	r18, 0xFE	; 254
    2018:	c1 16       	cp	r12, r17
    201a:	50 f4       	brcc	.+20     	; 0x2030 <vfprintf+0x5f6>
    201c:	04 ff       	sbrs	r16, 4
    201e:	0a c0       	rjmp	.+20     	; 0x2034 <vfprintf+0x5fa>
    2020:	02 fd       	sbrc	r16, 2
    2022:	08 c0       	rjmp	.+16     	; 0x2034 <vfprintf+0x5fa>
    2024:	20 2f       	mov	r18, r16
    2026:	2e 7e       	andi	r18, 0xEE	; 238
    2028:	05 c0       	rjmp	.+10     	; 0x2034 <vfprintf+0x5fa>
    202a:	dc 2c       	mov	r13, r12
    202c:	20 2f       	mov	r18, r16
    202e:	03 c0       	rjmp	.+6      	; 0x2036 <vfprintf+0x5fc>
    2030:	dc 2c       	mov	r13, r12
    2032:	01 c0       	rjmp	.+2      	; 0x2036 <vfprintf+0x5fc>
    2034:	d1 2e       	mov	r13, r17
    2036:	24 ff       	sbrs	r18, 4
    2038:	0d c0       	rjmp	.+26     	; 0x2054 <vfprintf+0x61a>
    203a:	fe 01       	movw	r30, r28
    203c:	ec 0d       	add	r30, r12
    203e:	f1 1d       	adc	r31, r1
    2040:	80 81       	ld	r24, Z
    2042:	80 33       	cpi	r24, 0x30	; 48
    2044:	11 f4       	brne	.+4      	; 0x204a <vfprintf+0x610>
    2046:	29 7e       	andi	r18, 0xE9	; 233
    2048:	09 c0       	rjmp	.+18     	; 0x205c <vfprintf+0x622>
    204a:	22 ff       	sbrs	r18, 2
    204c:	06 c0       	rjmp	.+12     	; 0x205a <vfprintf+0x620>
    204e:	d3 94       	inc	r13
    2050:	d3 94       	inc	r13
    2052:	04 c0       	rjmp	.+8      	; 0x205c <vfprintf+0x622>
    2054:	82 2f       	mov	r24, r18
    2056:	86 78       	andi	r24, 0x86	; 134
    2058:	09 f0       	breq	.+2      	; 0x205c <vfprintf+0x622>
    205a:	d3 94       	inc	r13
    205c:	23 fd       	sbrc	r18, 3
    205e:	12 c0       	rjmp	.+36     	; 0x2084 <vfprintf+0x64a>
    2060:	20 ff       	sbrs	r18, 0
    2062:	06 c0       	rjmp	.+12     	; 0x2070 <vfprintf+0x636>
    2064:	1c 2d       	mov	r17, r12
    2066:	d5 14       	cp	r13, r5
    2068:	18 f4       	brcc	.+6      	; 0x2070 <vfprintf+0x636>
    206a:	15 0d       	add	r17, r5
    206c:	1d 19       	sub	r17, r13
    206e:	d5 2c       	mov	r13, r5
    2070:	d5 14       	cp	r13, r5
    2072:	60 f4       	brcc	.+24     	; 0x208c <vfprintf+0x652>
    2074:	b7 01       	movw	r22, r14
    2076:	80 e2       	ldi	r24, 0x20	; 32
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	2b 8b       	std	Y+19, r18	; 0x13
    207c:	4d d1       	rcall	.+666    	; 0x2318 <fputc>
    207e:	d3 94       	inc	r13
    2080:	2b 89       	ldd	r18, Y+19	; 0x13
    2082:	f6 cf       	rjmp	.-20     	; 0x2070 <vfprintf+0x636>
    2084:	d5 14       	cp	r13, r5
    2086:	10 f4       	brcc	.+4      	; 0x208c <vfprintf+0x652>
    2088:	5d 18       	sub	r5, r13
    208a:	01 c0       	rjmp	.+2      	; 0x208e <vfprintf+0x654>
    208c:	51 2c       	mov	r5, r1
    208e:	24 ff       	sbrs	r18, 4
    2090:	11 c0       	rjmp	.+34     	; 0x20b4 <vfprintf+0x67a>
    2092:	b7 01       	movw	r22, r14
    2094:	80 e3       	ldi	r24, 0x30	; 48
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	2b 8b       	std	Y+19, r18	; 0x13
    209a:	3e d1       	rcall	.+636    	; 0x2318 <fputc>
    209c:	2b 89       	ldd	r18, Y+19	; 0x13
    209e:	22 ff       	sbrs	r18, 2
    20a0:	16 c0       	rjmp	.+44     	; 0x20ce <vfprintf+0x694>
    20a2:	21 ff       	sbrs	r18, 1
    20a4:	03 c0       	rjmp	.+6      	; 0x20ac <vfprintf+0x672>
    20a6:	88 e5       	ldi	r24, 0x58	; 88
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	02 c0       	rjmp	.+4      	; 0x20b0 <vfprintf+0x676>
    20ac:	88 e7       	ldi	r24, 0x78	; 120
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	b7 01       	movw	r22, r14
    20b2:	0c c0       	rjmp	.+24     	; 0x20cc <vfprintf+0x692>
    20b4:	82 2f       	mov	r24, r18
    20b6:	86 78       	andi	r24, 0x86	; 134
    20b8:	51 f0       	breq	.+20     	; 0x20ce <vfprintf+0x694>
    20ba:	21 fd       	sbrc	r18, 1
    20bc:	02 c0       	rjmp	.+4      	; 0x20c2 <vfprintf+0x688>
    20be:	80 e2       	ldi	r24, 0x20	; 32
    20c0:	01 c0       	rjmp	.+2      	; 0x20c4 <vfprintf+0x68a>
    20c2:	8b e2       	ldi	r24, 0x2B	; 43
    20c4:	27 fd       	sbrc	r18, 7
    20c6:	8d e2       	ldi	r24, 0x2D	; 45
    20c8:	b7 01       	movw	r22, r14
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	25 d1       	rcall	.+586    	; 0x2318 <fputc>
    20ce:	c1 16       	cp	r12, r17
    20d0:	30 f4       	brcc	.+12     	; 0x20de <vfprintf+0x6a4>
    20d2:	b7 01       	movw	r22, r14
    20d4:	80 e3       	ldi	r24, 0x30	; 48
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	1f d1       	rcall	.+574    	; 0x2318 <fputc>
    20da:	11 50       	subi	r17, 0x01	; 1
    20dc:	f8 cf       	rjmp	.-16     	; 0x20ce <vfprintf+0x694>
    20de:	ca 94       	dec	r12
    20e0:	f4 01       	movw	r30, r8
    20e2:	ec 0d       	add	r30, r12
    20e4:	f1 1d       	adc	r31, r1
    20e6:	80 81       	ld	r24, Z
    20e8:	b7 01       	movw	r22, r14
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	15 d1       	rcall	.+554    	; 0x2318 <fputc>
    20ee:	c1 10       	cpse	r12, r1
    20f0:	f6 cf       	rjmp	.-20     	; 0x20de <vfprintf+0x6a4>
    20f2:	55 20       	and	r5, r5
    20f4:	09 f4       	brne	.+2      	; 0x20f8 <vfprintf+0x6be>
    20f6:	dd cc       	rjmp	.-1606   	; 0x1ab2 <vfprintf+0x78>
    20f8:	b7 01       	movw	r22, r14
    20fa:	80 e2       	ldi	r24, 0x20	; 32
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	0c d1       	rcall	.+536    	; 0x2318 <fputc>
    2100:	5a 94       	dec	r5
    2102:	f7 cf       	rjmp	.-18     	; 0x20f2 <vfprintf+0x6b8>
    2104:	f7 01       	movw	r30, r14
    2106:	86 81       	ldd	r24, Z+6	; 0x06
    2108:	97 81       	ldd	r25, Z+7	; 0x07
    210a:	02 c0       	rjmp	.+4      	; 0x2110 <vfprintf+0x6d6>
    210c:	8f ef       	ldi	r24, 0xFF	; 255
    210e:	9f ef       	ldi	r25, 0xFF	; 255
    2110:	63 96       	adiw	r28, 0x13	; 19
    2112:	cd bf       	out	0x3d, r28	; 61
    2114:	de bf       	out	0x3e, r29	; 62
    2116:	df 91       	pop	r29
    2118:	cf 91       	pop	r28
    211a:	1f 91       	pop	r17
    211c:	0f 91       	pop	r16
    211e:	ff 90       	pop	r15
    2120:	ef 90       	pop	r14
    2122:	df 90       	pop	r13
    2124:	cf 90       	pop	r12
    2126:	bf 90       	pop	r11
    2128:	af 90       	pop	r10
    212a:	9f 90       	pop	r9
    212c:	8f 90       	pop	r8
    212e:	7f 90       	pop	r7
    2130:	6f 90       	pop	r6
    2132:	5f 90       	pop	r5
    2134:	4f 90       	pop	r4
    2136:	3f 90       	pop	r3
    2138:	2f 90       	pop	r2
    213a:	08 95       	ret

0000213c <__ftoa_engine>:
    213c:	28 30       	cpi	r18, 0x08	; 8
    213e:	08 f0       	brcs	.+2      	; 0x2142 <__ftoa_engine+0x6>
    2140:	27 e0       	ldi	r18, 0x07	; 7
    2142:	33 27       	eor	r19, r19
    2144:	da 01       	movw	r26, r20
    2146:	99 0f       	add	r25, r25
    2148:	31 1d       	adc	r19, r1
    214a:	87 fd       	sbrc	r24, 7
    214c:	91 60       	ori	r25, 0x01	; 1
    214e:	00 96       	adiw	r24, 0x00	; 0
    2150:	61 05       	cpc	r22, r1
    2152:	71 05       	cpc	r23, r1
    2154:	39 f4       	brne	.+14     	; 0x2164 <__ftoa_engine+0x28>
    2156:	32 60       	ori	r19, 0x02	; 2
    2158:	2e 5f       	subi	r18, 0xFE	; 254
    215a:	3d 93       	st	X+, r19
    215c:	30 e3       	ldi	r19, 0x30	; 48
    215e:	2a 95       	dec	r18
    2160:	e1 f7       	brne	.-8      	; 0x215a <__ftoa_engine+0x1e>
    2162:	08 95       	ret
    2164:	9f 3f       	cpi	r25, 0xFF	; 255
    2166:	30 f0       	brcs	.+12     	; 0x2174 <__ftoa_engine+0x38>
    2168:	80 38       	cpi	r24, 0x80	; 128
    216a:	71 05       	cpc	r23, r1
    216c:	61 05       	cpc	r22, r1
    216e:	09 f0       	breq	.+2      	; 0x2172 <__ftoa_engine+0x36>
    2170:	3c 5f       	subi	r19, 0xFC	; 252
    2172:	3c 5f       	subi	r19, 0xFC	; 252
    2174:	3d 93       	st	X+, r19
    2176:	91 30       	cpi	r25, 0x01	; 1
    2178:	08 f0       	brcs	.+2      	; 0x217c <__ftoa_engine+0x40>
    217a:	80 68       	ori	r24, 0x80	; 128
    217c:	91 1d       	adc	r25, r1
    217e:	df 93       	push	r29
    2180:	cf 93       	push	r28
    2182:	1f 93       	push	r17
    2184:	0f 93       	push	r16
    2186:	ff 92       	push	r15
    2188:	ef 92       	push	r14
    218a:	19 2f       	mov	r17, r25
    218c:	98 7f       	andi	r25, 0xF8	; 248
    218e:	96 95       	lsr	r25
    2190:	e9 2f       	mov	r30, r25
    2192:	96 95       	lsr	r25
    2194:	96 95       	lsr	r25
    2196:	e9 0f       	add	r30, r25
    2198:	ff 27       	eor	r31, r31
    219a:	e4 58       	subi	r30, 0x84	; 132
    219c:	fd 4f       	sbci	r31, 0xFD	; 253
    219e:	99 27       	eor	r25, r25
    21a0:	33 27       	eor	r19, r19
    21a2:	ee 24       	eor	r14, r14
    21a4:	ff 24       	eor	r15, r15
    21a6:	a7 01       	movw	r20, r14
    21a8:	e7 01       	movw	r28, r14
    21aa:	05 90       	lpm	r0, Z+
    21ac:	08 94       	sec
    21ae:	07 94       	ror	r0
    21b0:	28 f4       	brcc	.+10     	; 0x21bc <__ftoa_engine+0x80>
    21b2:	36 0f       	add	r19, r22
    21b4:	e7 1e       	adc	r14, r23
    21b6:	f8 1e       	adc	r15, r24
    21b8:	49 1f       	adc	r20, r25
    21ba:	51 1d       	adc	r21, r1
    21bc:	66 0f       	add	r22, r22
    21be:	77 1f       	adc	r23, r23
    21c0:	88 1f       	adc	r24, r24
    21c2:	99 1f       	adc	r25, r25
    21c4:	06 94       	lsr	r0
    21c6:	a1 f7       	brne	.-24     	; 0x21b0 <__ftoa_engine+0x74>
    21c8:	05 90       	lpm	r0, Z+
    21ca:	07 94       	ror	r0
    21cc:	28 f4       	brcc	.+10     	; 0x21d8 <__ftoa_engine+0x9c>
    21ce:	e7 0e       	add	r14, r23
    21d0:	f8 1e       	adc	r15, r24
    21d2:	49 1f       	adc	r20, r25
    21d4:	56 1f       	adc	r21, r22
    21d6:	c1 1d       	adc	r28, r1
    21d8:	77 0f       	add	r23, r23
    21da:	88 1f       	adc	r24, r24
    21dc:	99 1f       	adc	r25, r25
    21de:	66 1f       	adc	r22, r22
    21e0:	06 94       	lsr	r0
    21e2:	a1 f7       	brne	.-24     	; 0x21cc <__ftoa_engine+0x90>
    21e4:	05 90       	lpm	r0, Z+
    21e6:	07 94       	ror	r0
    21e8:	28 f4       	brcc	.+10     	; 0x21f4 <__ftoa_engine+0xb8>
    21ea:	f8 0e       	add	r15, r24
    21ec:	49 1f       	adc	r20, r25
    21ee:	56 1f       	adc	r21, r22
    21f0:	c7 1f       	adc	r28, r23
    21f2:	d1 1d       	adc	r29, r1
    21f4:	88 0f       	add	r24, r24
    21f6:	99 1f       	adc	r25, r25
    21f8:	66 1f       	adc	r22, r22
    21fa:	77 1f       	adc	r23, r23
    21fc:	06 94       	lsr	r0
    21fe:	a1 f7       	brne	.-24     	; 0x21e8 <__ftoa_engine+0xac>
    2200:	05 90       	lpm	r0, Z+
    2202:	07 94       	ror	r0
    2204:	20 f4       	brcc	.+8      	; 0x220e <__ftoa_engine+0xd2>
    2206:	49 0f       	add	r20, r25
    2208:	56 1f       	adc	r21, r22
    220a:	c7 1f       	adc	r28, r23
    220c:	d8 1f       	adc	r29, r24
    220e:	99 0f       	add	r25, r25
    2210:	66 1f       	adc	r22, r22
    2212:	77 1f       	adc	r23, r23
    2214:	88 1f       	adc	r24, r24
    2216:	06 94       	lsr	r0
    2218:	a9 f7       	brne	.-22     	; 0x2204 <__ftoa_engine+0xc8>
    221a:	84 91       	lpm	r24, Z
    221c:	10 95       	com	r17
    221e:	17 70       	andi	r17, 0x07	; 7
    2220:	41 f0       	breq	.+16     	; 0x2232 <__ftoa_engine+0xf6>
    2222:	d6 95       	lsr	r29
    2224:	c7 95       	ror	r28
    2226:	57 95       	ror	r21
    2228:	47 95       	ror	r20
    222a:	f7 94       	ror	r15
    222c:	e7 94       	ror	r14
    222e:	1a 95       	dec	r17
    2230:	c1 f7       	brne	.-16     	; 0x2222 <__ftoa_engine+0xe6>
    2232:	e2 e2       	ldi	r30, 0x22	; 34
    2234:	f2 e0       	ldi	r31, 0x02	; 2
    2236:	68 94       	set
    2238:	15 90       	lpm	r1, Z+
    223a:	15 91       	lpm	r17, Z+
    223c:	35 91       	lpm	r19, Z+
    223e:	65 91       	lpm	r22, Z+
    2240:	95 91       	lpm	r25, Z+
    2242:	05 90       	lpm	r0, Z+
    2244:	7f e2       	ldi	r23, 0x2F	; 47
    2246:	73 95       	inc	r23
    2248:	e1 18       	sub	r14, r1
    224a:	f1 0a       	sbc	r15, r17
    224c:	43 0b       	sbc	r20, r19
    224e:	56 0b       	sbc	r21, r22
    2250:	c9 0b       	sbc	r28, r25
    2252:	d0 09       	sbc	r29, r0
    2254:	c0 f7       	brcc	.-16     	; 0x2246 <__ftoa_engine+0x10a>
    2256:	e1 0c       	add	r14, r1
    2258:	f1 1e       	adc	r15, r17
    225a:	43 1f       	adc	r20, r19
    225c:	56 1f       	adc	r21, r22
    225e:	c9 1f       	adc	r28, r25
    2260:	d0 1d       	adc	r29, r0
    2262:	7e f4       	brtc	.+30     	; 0x2282 <__ftoa_engine+0x146>
    2264:	70 33       	cpi	r23, 0x30	; 48
    2266:	11 f4       	brne	.+4      	; 0x226c <__ftoa_engine+0x130>
    2268:	8a 95       	dec	r24
    226a:	e6 cf       	rjmp	.-52     	; 0x2238 <__ftoa_engine+0xfc>
    226c:	e8 94       	clt
    226e:	01 50       	subi	r16, 0x01	; 1
    2270:	30 f0       	brcs	.+12     	; 0x227e <__ftoa_engine+0x142>
    2272:	08 0f       	add	r16, r24
    2274:	0a f4       	brpl	.+2      	; 0x2278 <__ftoa_engine+0x13c>
    2276:	00 27       	eor	r16, r16
    2278:	02 17       	cp	r16, r18
    227a:	08 f4       	brcc	.+2      	; 0x227e <__ftoa_engine+0x142>
    227c:	20 2f       	mov	r18, r16
    227e:	23 95       	inc	r18
    2280:	02 2f       	mov	r16, r18
    2282:	7a 33       	cpi	r23, 0x3A	; 58
    2284:	28 f0       	brcs	.+10     	; 0x2290 <__ftoa_engine+0x154>
    2286:	79 e3       	ldi	r23, 0x39	; 57
    2288:	7d 93       	st	X+, r23
    228a:	2a 95       	dec	r18
    228c:	e9 f7       	brne	.-6      	; 0x2288 <__ftoa_engine+0x14c>
    228e:	10 c0       	rjmp	.+32     	; 0x22b0 <__ftoa_engine+0x174>
    2290:	7d 93       	st	X+, r23
    2292:	2a 95       	dec	r18
    2294:	89 f6       	brne	.-94     	; 0x2238 <__ftoa_engine+0xfc>
    2296:	06 94       	lsr	r0
    2298:	97 95       	ror	r25
    229a:	67 95       	ror	r22
    229c:	37 95       	ror	r19
    229e:	17 95       	ror	r17
    22a0:	17 94       	ror	r1
    22a2:	e1 18       	sub	r14, r1
    22a4:	f1 0a       	sbc	r15, r17
    22a6:	43 0b       	sbc	r20, r19
    22a8:	56 0b       	sbc	r21, r22
    22aa:	c9 0b       	sbc	r28, r25
    22ac:	d0 09       	sbc	r29, r0
    22ae:	98 f0       	brcs	.+38     	; 0x22d6 <__ftoa_engine+0x19a>
    22b0:	23 95       	inc	r18
    22b2:	7e 91       	ld	r23, -X
    22b4:	73 95       	inc	r23
    22b6:	7a 33       	cpi	r23, 0x3A	; 58
    22b8:	08 f0       	brcs	.+2      	; 0x22bc <__ftoa_engine+0x180>
    22ba:	70 e3       	ldi	r23, 0x30	; 48
    22bc:	7c 93       	st	X, r23
    22be:	20 13       	cpse	r18, r16
    22c0:	b8 f7       	brcc	.-18     	; 0x22b0 <__ftoa_engine+0x174>
    22c2:	7e 91       	ld	r23, -X
    22c4:	70 61       	ori	r23, 0x10	; 16
    22c6:	7d 93       	st	X+, r23
    22c8:	30 f0       	brcs	.+12     	; 0x22d6 <__ftoa_engine+0x19a>
    22ca:	83 95       	inc	r24
    22cc:	71 e3       	ldi	r23, 0x31	; 49
    22ce:	7d 93       	st	X+, r23
    22d0:	70 e3       	ldi	r23, 0x30	; 48
    22d2:	2a 95       	dec	r18
    22d4:	e1 f7       	brne	.-8      	; 0x22ce <__ftoa_engine+0x192>
    22d6:	11 24       	eor	r1, r1
    22d8:	ef 90       	pop	r14
    22da:	ff 90       	pop	r15
    22dc:	0f 91       	pop	r16
    22de:	1f 91       	pop	r17
    22e0:	cf 91       	pop	r28
    22e2:	df 91       	pop	r29
    22e4:	99 27       	eor	r25, r25
    22e6:	87 fd       	sbrc	r24, 7
    22e8:	90 95       	com	r25
    22ea:	08 95       	ret

000022ec <strnlen_P>:
    22ec:	fc 01       	movw	r30, r24
    22ee:	05 90       	lpm	r0, Z+
    22f0:	61 50       	subi	r22, 0x01	; 1
    22f2:	70 40       	sbci	r23, 0x00	; 0
    22f4:	01 10       	cpse	r0, r1
    22f6:	d8 f7       	brcc	.-10     	; 0x22ee <strnlen_P+0x2>
    22f8:	80 95       	com	r24
    22fa:	90 95       	com	r25
    22fc:	8e 0f       	add	r24, r30
    22fe:	9f 1f       	adc	r25, r31
    2300:	08 95       	ret

00002302 <strnlen>:
    2302:	fc 01       	movw	r30, r24
    2304:	61 50       	subi	r22, 0x01	; 1
    2306:	70 40       	sbci	r23, 0x00	; 0
    2308:	01 90       	ld	r0, Z+
    230a:	01 10       	cpse	r0, r1
    230c:	d8 f7       	brcc	.-10     	; 0x2304 <strnlen+0x2>
    230e:	80 95       	com	r24
    2310:	90 95       	com	r25
    2312:	8e 0f       	add	r24, r30
    2314:	9f 1f       	adc	r25, r31
    2316:	08 95       	ret

00002318 <fputc>:
    2318:	0f 93       	push	r16
    231a:	1f 93       	push	r17
    231c:	cf 93       	push	r28
    231e:	df 93       	push	r29
    2320:	18 2f       	mov	r17, r24
    2322:	09 2f       	mov	r16, r25
    2324:	eb 01       	movw	r28, r22
    2326:	8b 81       	ldd	r24, Y+3	; 0x03
    2328:	81 fd       	sbrc	r24, 1
    232a:	03 c0       	rjmp	.+6      	; 0x2332 <fputc+0x1a>
    232c:	8f ef       	ldi	r24, 0xFF	; 255
    232e:	9f ef       	ldi	r25, 0xFF	; 255
    2330:	20 c0       	rjmp	.+64     	; 0x2372 <fputc+0x5a>
    2332:	82 ff       	sbrs	r24, 2
    2334:	10 c0       	rjmp	.+32     	; 0x2356 <fputc+0x3e>
    2336:	4e 81       	ldd	r20, Y+6	; 0x06
    2338:	5f 81       	ldd	r21, Y+7	; 0x07
    233a:	2c 81       	ldd	r18, Y+4	; 0x04
    233c:	3d 81       	ldd	r19, Y+5	; 0x05
    233e:	42 17       	cp	r20, r18
    2340:	53 07       	cpc	r21, r19
    2342:	7c f4       	brge	.+30     	; 0x2362 <fputc+0x4a>
    2344:	e8 81       	ld	r30, Y
    2346:	f9 81       	ldd	r31, Y+1	; 0x01
    2348:	9f 01       	movw	r18, r30
    234a:	2f 5f       	subi	r18, 0xFF	; 255
    234c:	3f 4f       	sbci	r19, 0xFF	; 255
    234e:	28 83       	st	Y, r18
    2350:	39 83       	std	Y+1, r19	; 0x01
    2352:	10 83       	st	Z, r17
    2354:	06 c0       	rjmp	.+12     	; 0x2362 <fputc+0x4a>
    2356:	e8 85       	ldd	r30, Y+8	; 0x08
    2358:	f9 85       	ldd	r31, Y+9	; 0x09
    235a:	81 2f       	mov	r24, r17
    235c:	19 95       	eicall
    235e:	89 2b       	or	r24, r25
    2360:	29 f7       	brne	.-54     	; 0x232c <fputc+0x14>
    2362:	2e 81       	ldd	r18, Y+6	; 0x06
    2364:	3f 81       	ldd	r19, Y+7	; 0x07
    2366:	2f 5f       	subi	r18, 0xFF	; 255
    2368:	3f 4f       	sbci	r19, 0xFF	; 255
    236a:	2e 83       	std	Y+6, r18	; 0x06
    236c:	3f 83       	std	Y+7, r19	; 0x07
    236e:	81 2f       	mov	r24, r17
    2370:	90 2f       	mov	r25, r16
    2372:	df 91       	pop	r29
    2374:	cf 91       	pop	r28
    2376:	1f 91       	pop	r17
    2378:	0f 91       	pop	r16
    237a:	08 95       	ret

0000237c <printf>:
    237c:	cf 93       	push	r28
    237e:	df 93       	push	r29
    2380:	cd b7       	in	r28, 0x3d	; 61
    2382:	de b7       	in	r29, 0x3e	; 62
    2384:	fe 01       	movw	r30, r28
    2386:	36 96       	adiw	r30, 0x06	; 6
    2388:	61 91       	ld	r22, Z+
    238a:	71 91       	ld	r23, Z+
    238c:	af 01       	movw	r20, r30
    238e:	80 91 fc 20 	lds	r24, 0x20FC
    2392:	90 91 fd 20 	lds	r25, 0x20FD
    2396:	51 db       	rcall	.-2398   	; 0x1a3a <vfprintf>
    2398:	df 91       	pop	r29
    239a:	cf 91       	pop	r28
    239c:	08 95       	ret

0000239e <__ultoa_invert>:
    239e:	fa 01       	movw	r30, r20
    23a0:	aa 27       	eor	r26, r26
    23a2:	28 30       	cpi	r18, 0x08	; 8
    23a4:	51 f1       	breq	.+84     	; 0x23fa <__ultoa_invert+0x5c>
    23a6:	20 31       	cpi	r18, 0x10	; 16
    23a8:	81 f1       	breq	.+96     	; 0x240a <__ultoa_invert+0x6c>
    23aa:	e8 94       	clt
    23ac:	6f 93       	push	r22
    23ae:	6e 7f       	andi	r22, 0xFE	; 254
    23b0:	6e 5f       	subi	r22, 0xFE	; 254
    23b2:	7f 4f       	sbci	r23, 0xFF	; 255
    23b4:	8f 4f       	sbci	r24, 0xFF	; 255
    23b6:	9f 4f       	sbci	r25, 0xFF	; 255
    23b8:	af 4f       	sbci	r26, 0xFF	; 255
    23ba:	b1 e0       	ldi	r27, 0x01	; 1
    23bc:	3e d0       	rcall	.+124    	; 0x243a <__ultoa_invert+0x9c>
    23be:	b4 e0       	ldi	r27, 0x04	; 4
    23c0:	3c d0       	rcall	.+120    	; 0x243a <__ultoa_invert+0x9c>
    23c2:	67 0f       	add	r22, r23
    23c4:	78 1f       	adc	r23, r24
    23c6:	89 1f       	adc	r24, r25
    23c8:	9a 1f       	adc	r25, r26
    23ca:	a1 1d       	adc	r26, r1
    23cc:	68 0f       	add	r22, r24
    23ce:	79 1f       	adc	r23, r25
    23d0:	8a 1f       	adc	r24, r26
    23d2:	91 1d       	adc	r25, r1
    23d4:	a1 1d       	adc	r26, r1
    23d6:	6a 0f       	add	r22, r26
    23d8:	71 1d       	adc	r23, r1
    23da:	81 1d       	adc	r24, r1
    23dc:	91 1d       	adc	r25, r1
    23de:	a1 1d       	adc	r26, r1
    23e0:	20 d0       	rcall	.+64     	; 0x2422 <__ultoa_invert+0x84>
    23e2:	09 f4       	brne	.+2      	; 0x23e6 <__ultoa_invert+0x48>
    23e4:	68 94       	set
    23e6:	3f 91       	pop	r19
    23e8:	2a e0       	ldi	r18, 0x0A	; 10
    23ea:	26 9f       	mul	r18, r22
    23ec:	11 24       	eor	r1, r1
    23ee:	30 19       	sub	r19, r0
    23f0:	30 5d       	subi	r19, 0xD0	; 208
    23f2:	31 93       	st	Z+, r19
    23f4:	de f6       	brtc	.-74     	; 0x23ac <__ultoa_invert+0xe>
    23f6:	cf 01       	movw	r24, r30
    23f8:	08 95       	ret
    23fa:	46 2f       	mov	r20, r22
    23fc:	47 70       	andi	r20, 0x07	; 7
    23fe:	40 5d       	subi	r20, 0xD0	; 208
    2400:	41 93       	st	Z+, r20
    2402:	b3 e0       	ldi	r27, 0x03	; 3
    2404:	0f d0       	rcall	.+30     	; 0x2424 <__ultoa_invert+0x86>
    2406:	c9 f7       	brne	.-14     	; 0x23fa <__ultoa_invert+0x5c>
    2408:	f6 cf       	rjmp	.-20     	; 0x23f6 <__ultoa_invert+0x58>
    240a:	46 2f       	mov	r20, r22
    240c:	4f 70       	andi	r20, 0x0F	; 15
    240e:	40 5d       	subi	r20, 0xD0	; 208
    2410:	4a 33       	cpi	r20, 0x3A	; 58
    2412:	18 f0       	brcs	.+6      	; 0x241a <__ultoa_invert+0x7c>
    2414:	49 5d       	subi	r20, 0xD9	; 217
    2416:	31 fd       	sbrc	r19, 1
    2418:	40 52       	subi	r20, 0x20	; 32
    241a:	41 93       	st	Z+, r20
    241c:	02 d0       	rcall	.+4      	; 0x2422 <__ultoa_invert+0x84>
    241e:	a9 f7       	brne	.-22     	; 0x240a <__ultoa_invert+0x6c>
    2420:	ea cf       	rjmp	.-44     	; 0x23f6 <__ultoa_invert+0x58>
    2422:	b4 e0       	ldi	r27, 0x04	; 4
    2424:	a6 95       	lsr	r26
    2426:	97 95       	ror	r25
    2428:	87 95       	ror	r24
    242a:	77 95       	ror	r23
    242c:	67 95       	ror	r22
    242e:	ba 95       	dec	r27
    2430:	c9 f7       	brne	.-14     	; 0x2424 <__ultoa_invert+0x86>
    2432:	00 97       	sbiw	r24, 0x00	; 0
    2434:	61 05       	cpc	r22, r1
    2436:	71 05       	cpc	r23, r1
    2438:	08 95       	ret
    243a:	9b 01       	movw	r18, r22
    243c:	ac 01       	movw	r20, r24
    243e:	0a 2e       	mov	r0, r26
    2440:	06 94       	lsr	r0
    2442:	57 95       	ror	r21
    2444:	47 95       	ror	r20
    2446:	37 95       	ror	r19
    2448:	27 95       	ror	r18
    244a:	ba 95       	dec	r27
    244c:	c9 f7       	brne	.-14     	; 0x2440 <__ultoa_invert+0xa2>
    244e:	62 0f       	add	r22, r18
    2450:	73 1f       	adc	r23, r19
    2452:	84 1f       	adc	r24, r20
    2454:	95 1f       	adc	r25, r21
    2456:	a0 1d       	adc	r26, r0
    2458:	08 95       	ret

0000245a <_exit>:
    245a:	f8 94       	cli

0000245c <__stop_program>:
    245c:	ff cf       	rjmp	.-2      	; 0x245c <__stop_program>
